
STM32w5500.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcc0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000640  0800bea0  0800bea0  0001bea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000048  0800c4e0  0800c4e0  0001c4e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000000e8  0800c528  0800c528  0001c528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c610  0800c610  00020118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c610  0800c610  0001c610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c614  0800c614  0001c614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000118  20000000  0800c618  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019dc  20000118  0800c730  00020118  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001af4  0800c730  00021af4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016d32  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004018  00000000  00000000  00036e7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b0  00000000  00000000  0003ae98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001170  00000000  00000000  0003c148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023831  00000000  00000000  0003d2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a161  00000000  00000000  00060ae9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c02b1  00000000  00000000  0007ac4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013aefb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058fc  00000000  00000000  0013af4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000118 	.word	0x20000118
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800be88 	.word	0x0800be88

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000011c 	.word	0x2000011c
 800021c:	0800be88 	.word	0x0800be88

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f001 b8de 	b.w	80014a4 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468e      	mov	lr, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14d      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030e:	428a      	cmp	r2, r1
 8000310:	4694      	mov	ip, r2
 8000312:	d969      	bls.n	80003e8 <__udivmoddi4+0xe8>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b152      	cbz	r2, 8000330 <__udivmoddi4+0x30>
 800031a:	fa01 f302 	lsl.w	r3, r1, r2
 800031e:	f1c2 0120 	rsb	r1, r2, #32
 8000322:	fa20 f101 	lsr.w	r1, r0, r1
 8000326:	fa0c fc02 	lsl.w	ip, ip, r2
 800032a:	ea41 0e03 	orr.w	lr, r1, r3
 800032e:	4094      	lsls	r4, r2
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	0c21      	lsrs	r1, r4, #16
 8000336:	fbbe f6f8 	udiv	r6, lr, r8
 800033a:	fa1f f78c 	uxth.w	r7, ip
 800033e:	fb08 e316 	mls	r3, r8, r6, lr
 8000342:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000346:	fb06 f107 	mul.w	r1, r6, r7
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 30ff 	add.w	r0, r6, #4294967295
 8000356:	f080 811f 	bcs.w	8000598 <__udivmoddi4+0x298>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 811c 	bls.w	8000598 <__udivmoddi4+0x298>
 8000360:	3e02      	subs	r6, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a5b      	subs	r3, r3, r1
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb3 f0f8 	udiv	r0, r3, r8
 800036c:	fb08 3310 	mls	r3, r8, r0, r3
 8000370:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000374:	fb00 f707 	mul.w	r7, r0, r7
 8000378:	42a7      	cmp	r7, r4
 800037a:	d90a      	bls.n	8000392 <__udivmoddi4+0x92>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 33ff 	add.w	r3, r0, #4294967295
 8000384:	f080 810a 	bcs.w	800059c <__udivmoddi4+0x29c>
 8000388:	42a7      	cmp	r7, r4
 800038a:	f240 8107 	bls.w	800059c <__udivmoddi4+0x29c>
 800038e:	4464      	add	r4, ip
 8000390:	3802      	subs	r0, #2
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	1be4      	subs	r4, r4, r7
 8000398:	2600      	movs	r6, #0
 800039a:	b11d      	cbz	r5, 80003a4 <__udivmoddi4+0xa4>
 800039c:	40d4      	lsrs	r4, r2
 800039e:	2300      	movs	r3, #0
 80003a0:	e9c5 4300 	strd	r4, r3, [r5]
 80003a4:	4631      	mov	r1, r6
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0xc2>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80ef 	beq.w	8000592 <__udivmoddi4+0x292>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x160>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xd4>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80f9 	bhi.w	80005c6 <__udivmoddi4+0x2c6>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0303 	sbc.w	r3, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	469e      	mov	lr, r3
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0e0      	beq.n	80003a4 <__udivmoddi4+0xa4>
 80003e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003e6:	e7dd      	b.n	80003a4 <__udivmoddi4+0xa4>
 80003e8:	b902      	cbnz	r2, 80003ec <__udivmoddi4+0xec>
 80003ea:	deff      	udf	#255	; 0xff
 80003ec:	fab2 f282 	clz	r2, r2
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	f040 8092 	bne.w	800051a <__udivmoddi4+0x21a>
 80003f6:	eba1 010c 	sub.w	r1, r1, ip
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2601      	movs	r6, #1
 8000404:	0c20      	lsrs	r0, r4, #16
 8000406:	fbb1 f3f7 	udiv	r3, r1, r7
 800040a:	fb07 1113 	mls	r1, r7, r3, r1
 800040e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000412:	fb0e f003 	mul.w	r0, lr, r3
 8000416:	4288      	cmp	r0, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x12c>
 800041a:	eb1c 0101 	adds.w	r1, ip, r1
 800041e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x12a>
 8000424:	4288      	cmp	r0, r1
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2c0>
 800042a:	4643      	mov	r3, r8
 800042c:	1a09      	subs	r1, r1, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1110 	mls	r1, r7, r0, r1
 8000438:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x156>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x154>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2ca>
 8000454:	4608      	mov	r0, r1
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800045e:	e79c      	b.n	800039a <__udivmoddi4+0x9a>
 8000460:	f1c6 0720 	rsb	r7, r6, #32
 8000464:	40b3      	lsls	r3, r6
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa20 f407 	lsr.w	r4, r0, r7
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	431c      	orrs	r4, r3
 8000478:	40f9      	lsrs	r1, r7
 800047a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047e:	fa00 f306 	lsl.w	r3, r0, r6
 8000482:	fbb1 f8f9 	udiv	r8, r1, r9
 8000486:	0c20      	lsrs	r0, r4, #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fb09 1118 	mls	r1, r9, r8, r1
 8000490:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000494:	fb08 f00e 	mul.w	r0, r8, lr
 8000498:	4288      	cmp	r0, r1
 800049a:	fa02 f206 	lsl.w	r2, r2, r6
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b8>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2bc>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2bc>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1a09      	subs	r1, r1, r0
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c0:	fb09 1110 	mls	r1, r9, r0, r1
 80004c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004cc:	458e      	cmp	lr, r1
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1e2>
 80004d0:	eb1c 0101 	adds.w	r1, ip, r1
 80004d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2b4>
 80004da:	458e      	cmp	lr, r1
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2b4>
 80004de:	3802      	subs	r0, #2
 80004e0:	4461      	add	r1, ip
 80004e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004e6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ea:	eba1 010e 	sub.w	r1, r1, lr
 80004ee:	42a1      	cmp	r1, r4
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46a6      	mov	lr, r4
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x2a4>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x2a0>
 80004f8:	b15d      	cbz	r5, 8000512 <__udivmoddi4+0x212>
 80004fa:	ebb3 0208 	subs.w	r2, r3, r8
 80004fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000502:	fa01 f707 	lsl.w	r7, r1, r7
 8000506:	fa22 f306 	lsr.w	r3, r2, r6
 800050a:	40f1      	lsrs	r1, r6
 800050c:	431f      	orrs	r7, r3
 800050e:	e9c5 7100 	strd	r7, r1, [r5]
 8000512:	2600      	movs	r6, #0
 8000514:	4631      	mov	r1, r6
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	40d8      	lsrs	r0, r3
 8000520:	fa0c fc02 	lsl.w	ip, ip, r2
 8000524:	fa21 f303 	lsr.w	r3, r1, r3
 8000528:	4091      	lsls	r1, r2
 800052a:	4301      	orrs	r1, r0
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb3 f0f7 	udiv	r0, r3, r7
 8000538:	fb07 3610 	mls	r6, r7, r0, r3
 800053c:	0c0b      	lsrs	r3, r1, #16
 800053e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000542:	fb00 f60e 	mul.w	r6, r0, lr
 8000546:	429e      	cmp	r6, r3
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x260>
 800054e:	eb1c 0303 	adds.w	r3, ip, r3
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b8>
 8000558:	429e      	cmp	r6, r3
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b8>
 800055c:	3802      	subs	r0, #2
 800055e:	4463      	add	r3, ip
 8000560:	1b9b      	subs	r3, r3, r6
 8000562:	b289      	uxth	r1, r1
 8000564:	fbb3 f6f7 	udiv	r6, r3, r7
 8000568:	fb07 3316 	mls	r3, r7, r6, r3
 800056c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000570:	fb06 f30e 	mul.w	r3, r6, lr
 8000574:	428b      	cmp	r3, r1
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x28a>
 8000578:	eb1c 0101 	adds.w	r1, ip, r1
 800057c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000582:	428b      	cmp	r3, r1
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	1ac9      	subs	r1, r1, r3
 800058c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0x104>
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e705      	b.n	80003a4 <__udivmoddi4+0xa4>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e3      	b.n	8000364 <__udivmoddi4+0x64>
 800059c:	4618      	mov	r0, r3
 800059e:	e6f8      	b.n	8000392 <__udivmoddi4+0x92>
 80005a0:	454b      	cmp	r3, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f8>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f8>
 80005b0:	4646      	mov	r6, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x28a>
 80005b4:	4620      	mov	r0, r4
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1e2>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x260>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b8>
 80005c0:	3b02      	subs	r3, #2
 80005c2:	4461      	add	r1, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x12c>
 80005c6:	4630      	mov	r0, r6
 80005c8:	e709      	b.n	80003de <__udivmoddi4+0xde>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x156>

080005d0 <selfrel_offset31>:
 80005d0:	6803      	ldr	r3, [r0, #0]
 80005d2:	005a      	lsls	r2, r3, #1
 80005d4:	bf4c      	ite	mi
 80005d6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80005da:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 80005de:	4418      	add	r0, r3
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <search_EIT_table>:
 80005e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80005e8:	b329      	cbz	r1, 8000636 <search_EIT_table+0x52>
 80005ea:	1e4f      	subs	r7, r1, #1
 80005ec:	4604      	mov	r4, r0
 80005ee:	4615      	mov	r5, r2
 80005f0:	463e      	mov	r6, r7
 80005f2:	f04f 0800 	mov.w	r8, #0
 80005f6:	eb08 0106 	add.w	r1, r8, r6
 80005fa:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80005fe:	1049      	asrs	r1, r1, #1
 8000600:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 8000604:	4648      	mov	r0, r9
 8000606:	f7ff ffe3 	bl	80005d0 <selfrel_offset31>
 800060a:	4603      	mov	r3, r0
 800060c:	00c8      	lsls	r0, r1, #3
 800060e:	3008      	adds	r0, #8
 8000610:	428f      	cmp	r7, r1
 8000612:	4420      	add	r0, r4
 8000614:	d009      	beq.n	800062a <search_EIT_table+0x46>
 8000616:	42ab      	cmp	r3, r5
 8000618:	d809      	bhi.n	800062e <search_EIT_table+0x4a>
 800061a:	f7ff ffd9 	bl	80005d0 <selfrel_offset31>
 800061e:	3801      	subs	r0, #1
 8000620:	42a8      	cmp	r0, r5
 8000622:	d20a      	bcs.n	800063a <search_EIT_table+0x56>
 8000624:	f101 0801 	add.w	r8, r1, #1
 8000628:	e7e5      	b.n	80005f6 <search_EIT_table+0x12>
 800062a:	42ab      	cmp	r3, r5
 800062c:	d905      	bls.n	800063a <search_EIT_table+0x56>
 800062e:	4588      	cmp	r8, r1
 8000630:	d001      	beq.n	8000636 <search_EIT_table+0x52>
 8000632:	1e4e      	subs	r6, r1, #1
 8000634:	e7df      	b.n	80005f6 <search_EIT_table+0x12>
 8000636:	f04f 0900 	mov.w	r9, #0
 800063a:	4648      	mov	r0, r9
 800063c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000640 <__gnu_unwind_get_pr_addr>:
 8000640:	2801      	cmp	r0, #1
 8000642:	d007      	beq.n	8000654 <__gnu_unwind_get_pr_addr+0x14>
 8000644:	2802      	cmp	r0, #2
 8000646:	d007      	beq.n	8000658 <__gnu_unwind_get_pr_addr+0x18>
 8000648:	4b04      	ldr	r3, [pc, #16]	; (800065c <__gnu_unwind_get_pr_addr+0x1c>)
 800064a:	2800      	cmp	r0, #0
 800064c:	bf0c      	ite	eq
 800064e:	4618      	moveq	r0, r3
 8000650:	2000      	movne	r0, #0
 8000652:	4770      	bx	lr
 8000654:	4802      	ldr	r0, [pc, #8]	; (8000660 <__gnu_unwind_get_pr_addr+0x20>)
 8000656:	4770      	bx	lr
 8000658:	4802      	ldr	r0, [pc, #8]	; (8000664 <__gnu_unwind_get_pr_addr+0x24>)
 800065a:	4770      	bx	lr
 800065c:	08000d19 	.word	0x08000d19
 8000660:	08000d1d 	.word	0x08000d1d
 8000664:	08000d21 	.word	0x08000d21

08000668 <get_eit_entry>:
 8000668:	b530      	push	{r4, r5, lr}
 800066a:	4b23      	ldr	r3, [pc, #140]	; (80006f8 <get_eit_entry+0x90>)
 800066c:	b083      	sub	sp, #12
 800066e:	4604      	mov	r4, r0
 8000670:	1e8d      	subs	r5, r1, #2
 8000672:	b33b      	cbz	r3, 80006c4 <get_eit_entry+0x5c>
 8000674:	a901      	add	r1, sp, #4
 8000676:	4628      	mov	r0, r5
 8000678:	f3af 8000 	nop.w
 800067c:	b1e8      	cbz	r0, 80006ba <get_eit_entry+0x52>
 800067e:	9901      	ldr	r1, [sp, #4]
 8000680:	462a      	mov	r2, r5
 8000682:	f7ff ffaf 	bl	80005e4 <search_EIT_table>
 8000686:	4601      	mov	r1, r0
 8000688:	b1b8      	cbz	r0, 80006ba <get_eit_entry+0x52>
 800068a:	f7ff ffa1 	bl	80005d0 <selfrel_offset31>
 800068e:	684b      	ldr	r3, [r1, #4]
 8000690:	64a0      	str	r0, [r4, #72]	; 0x48
 8000692:	2b01      	cmp	r3, #1
 8000694:	d02c      	beq.n	80006f0 <get_eit_entry+0x88>
 8000696:	2b00      	cmp	r3, #0
 8000698:	f101 0004 	add.w	r0, r1, #4
 800069c:	db24      	blt.n	80006e8 <get_eit_entry+0x80>
 800069e:	f7ff ff97 	bl	80005d0 <selfrel_offset31>
 80006a2:	2300      	movs	r3, #0
 80006a4:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 80006a8:	6803      	ldr	r3, [r0, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	db11      	blt.n	80006d2 <get_eit_entry+0x6a>
 80006ae:	f7ff ff8f 	bl	80005d0 <selfrel_offset31>
 80006b2:	6120      	str	r0, [r4, #16]
 80006b4:	2000      	movs	r0, #0
 80006b6:	b003      	add	sp, #12
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	2300      	movs	r3, #0
 80006bc:	2009      	movs	r0, #9
 80006be:	6123      	str	r3, [r4, #16]
 80006c0:	b003      	add	sp, #12
 80006c2:	bd30      	pop	{r4, r5, pc}
 80006c4:	4b0d      	ldr	r3, [pc, #52]	; (80006fc <get_eit_entry+0x94>)
 80006c6:	490e      	ldr	r1, [pc, #56]	; (8000700 <get_eit_entry+0x98>)
 80006c8:	1ac9      	subs	r1, r1, r3
 80006ca:	10c9      	asrs	r1, r1, #3
 80006cc:	4618      	mov	r0, r3
 80006ce:	9101      	str	r1, [sp, #4]
 80006d0:	e7d6      	b.n	8000680 <get_eit_entry+0x18>
 80006d2:	f3c3 6003 	ubfx	r0, r3, #24, #4
 80006d6:	f7ff ffb3 	bl	8000640 <__gnu_unwind_get_pr_addr>
 80006da:	2800      	cmp	r0, #0
 80006dc:	6120      	str	r0, [r4, #16]
 80006de:	bf14      	ite	ne
 80006e0:	2000      	movne	r0, #0
 80006e2:	2009      	moveq	r0, #9
 80006e4:	b003      	add	sp, #12
 80006e6:	bd30      	pop	{r4, r5, pc}
 80006e8:	2301      	movs	r3, #1
 80006ea:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 80006ee:	e7db      	b.n	80006a8 <get_eit_entry+0x40>
 80006f0:	2300      	movs	r3, #0
 80006f2:	6123      	str	r3, [r4, #16]
 80006f4:	2005      	movs	r0, #5
 80006f6:	e7de      	b.n	80006b6 <get_eit_entry+0x4e>
 80006f8:	00000000 	.word	0x00000000
 80006fc:	0800c528 	.word	0x0800c528
 8000700:	0800c610 	.word	0x0800c610

08000704 <restore_non_core_regs>:
 8000704:	6803      	ldr	r3, [r0, #0]
 8000706:	07da      	lsls	r2, r3, #31
 8000708:	b510      	push	{r4, lr}
 800070a:	4604      	mov	r4, r0
 800070c:	d406      	bmi.n	800071c <restore_non_core_regs+0x18>
 800070e:	079b      	lsls	r3, r3, #30
 8000710:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000714:	d509      	bpl.n	800072a <restore_non_core_regs+0x26>
 8000716:	f000 fc5b 	bl	8000fd0 <__gnu_Unwind_Restore_VFP_D>
 800071a:	6823      	ldr	r3, [r4, #0]
 800071c:	0759      	lsls	r1, r3, #29
 800071e:	d509      	bpl.n	8000734 <restore_non_core_regs+0x30>
 8000720:	071a      	lsls	r2, r3, #28
 8000722:	d50e      	bpl.n	8000742 <restore_non_core_regs+0x3e>
 8000724:	06db      	lsls	r3, r3, #27
 8000726:	d513      	bpl.n	8000750 <restore_non_core_regs+0x4c>
 8000728:	bd10      	pop	{r4, pc}
 800072a:	f000 fc49 	bl	8000fc0 <__gnu_Unwind_Restore_VFP>
 800072e:	6823      	ldr	r3, [r4, #0]
 8000730:	0759      	lsls	r1, r3, #29
 8000732:	d4f5      	bmi.n	8000720 <restore_non_core_regs+0x1c>
 8000734:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000738:	f000 fc52 	bl	8000fe0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 800073c:	6823      	ldr	r3, [r4, #0]
 800073e:	071a      	lsls	r2, r3, #28
 8000740:	d4f0      	bmi.n	8000724 <restore_non_core_regs+0x20>
 8000742:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000746:	f000 fc53 	bl	8000ff0 <__gnu_Unwind_Restore_WMMXD>
 800074a:	6823      	ldr	r3, [r4, #0]
 800074c:	06db      	lsls	r3, r3, #27
 800074e:	d4eb      	bmi.n	8000728 <restore_non_core_regs+0x24>
 8000750:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000758:	f000 bc8e 	b.w	8001078 <__gnu_Unwind_Restore_WMMXC>

0800075c <__gnu_unwind_24bit.constprop.0>:
 800075c:	2009      	movs	r0, #9
 800075e:	4770      	bx	lr

08000760 <_Unwind_decode_typeinfo_ptr.constprop.0>:
 8000760:	4603      	mov	r3, r0
 8000762:	6800      	ldr	r0, [r0, #0]
 8000764:	b100      	cbz	r0, 8000768 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 8000766:	4418      	add	r0, r3
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop

0800076c <_Unwind_DebugHook>:
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop

08000770 <unwind_phase2>:
 8000770:	b570      	push	{r4, r5, r6, lr}
 8000772:	4604      	mov	r4, r0
 8000774:	460e      	mov	r6, r1
 8000776:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000778:	4620      	mov	r0, r4
 800077a:	f7ff ff75 	bl	8000668 <get_eit_entry>
 800077e:	4605      	mov	r5, r0
 8000780:	b988      	cbnz	r0, 80007a6 <unwind_phase2+0x36>
 8000782:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8000784:	6162      	str	r2, [r4, #20]
 8000786:	6923      	ldr	r3, [r4, #16]
 8000788:	4632      	mov	r2, r6
 800078a:	4621      	mov	r1, r4
 800078c:	2001      	movs	r0, #1
 800078e:	4798      	blx	r3
 8000790:	2808      	cmp	r0, #8
 8000792:	d0f0      	beq.n	8000776 <unwind_phase2+0x6>
 8000794:	2807      	cmp	r0, #7
 8000796:	d106      	bne.n	80007a6 <unwind_phase2+0x36>
 8000798:	4628      	mov	r0, r5
 800079a:	6c31      	ldr	r1, [r6, #64]	; 0x40
 800079c:	f7ff ffe6 	bl	800076c <_Unwind_DebugHook>
 80007a0:	1d30      	adds	r0, r6, #4
 80007a2:	f000 fc01 	bl	8000fa8 <__restore_core_regs>
 80007a6:	f00b faaf 	bl	800bd08 <abort>
 80007aa:	bf00      	nop

080007ac <unwind_phase2_forced>:
 80007ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007b0:	1d0d      	adds	r5, r1, #4
 80007b2:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80007b6:	f8d0 9018 	ldr.w	r9, [r0, #24]
 80007ba:	4607      	mov	r7, r0
 80007bc:	4614      	mov	r4, r2
 80007be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007c0:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 80007c4:	f10d 0c0c 	add.w	ip, sp, #12
 80007c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80007cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80007d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80007d8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80007dc:	ae02      	add	r6, sp, #8
 80007de:	f04f 0e00 	mov.w	lr, #0
 80007e2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80007e6:	f8c6 e000 	str.w	lr, [r6]
 80007ea:	e020      	b.n	800082e <unwind_phase2_forced+0x82>
 80007ec:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80007ee:	617b      	str	r3, [r7, #20]
 80007f0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80007f4:	4631      	mov	r1, r6
 80007f6:	a87a      	add	r0, sp, #488	; 0x1e8
 80007f8:	f00a f8d6 	bl	800a9a8 <memcpy>
 80007fc:	693b      	ldr	r3, [r7, #16]
 80007fe:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000800:	4639      	mov	r1, r7
 8000802:	4650      	mov	r0, sl
 8000804:	4798      	blx	r3
 8000806:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8000808:	6473      	str	r3, [r6, #68]	; 0x44
 800080a:	4621      	mov	r1, r4
 800080c:	e9cd 6900 	strd	r6, r9, [sp]
 8000810:	4605      	mov	r5, r0
 8000812:	463b      	mov	r3, r7
 8000814:	463a      	mov	r2, r7
 8000816:	2001      	movs	r0, #1
 8000818:	47c0      	blx	r8
 800081a:	4604      	mov	r4, r0
 800081c:	b9e0      	cbnz	r0, 8000858 <unwind_phase2_forced+0xac>
 800081e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000822:	a97a      	add	r1, sp, #488	; 0x1e8
 8000824:	4630      	mov	r0, r6
 8000826:	f00a f8bf 	bl	800a9a8 <memcpy>
 800082a:	2d08      	cmp	r5, #8
 800082c:	d11a      	bne.n	8000864 <unwind_phase2_forced+0xb8>
 800082e:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000830:	4638      	mov	r0, r7
 8000832:	f7ff ff19 	bl	8000668 <get_eit_entry>
 8000836:	3409      	adds	r4, #9
 8000838:	fa5f fa84 	uxtb.w	sl, r4
 800083c:	4605      	mov	r5, r0
 800083e:	2800      	cmp	r0, #0
 8000840:	d0d4      	beq.n	80007ec <unwind_phase2_forced+0x40>
 8000842:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000844:	6473      	str	r3, [r6, #68]	; 0x44
 8000846:	463a      	mov	r2, r7
 8000848:	e9cd 6900 	strd	r6, r9, [sp]
 800084c:	463b      	mov	r3, r7
 800084e:	f04a 0110 	orr.w	r1, sl, #16
 8000852:	2001      	movs	r0, #1
 8000854:	47c0      	blx	r8
 8000856:	b100      	cbz	r0, 800085a <unwind_phase2_forced+0xae>
 8000858:	2509      	movs	r5, #9
 800085a:	4628      	mov	r0, r5
 800085c:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000864:	2d07      	cmp	r5, #7
 8000866:	d1f7      	bne.n	8000858 <unwind_phase2_forced+0xac>
 8000868:	4620      	mov	r0, r4
 800086a:	6c31      	ldr	r1, [r6, #64]	; 0x40
 800086c:	f7ff ff7e 	bl	800076c <_Unwind_DebugHook>
 8000870:	a803      	add	r0, sp, #12
 8000872:	f000 fb99 	bl	8000fa8 <__restore_core_regs>
 8000876:	bf00      	nop

08000878 <_Unwind_GetCFA>:
 8000878:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800087a:	4770      	bx	lr

0800087c <__gnu_Unwind_RaiseException>:
 800087c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800087e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000880:	640b      	str	r3, [r1, #64]	; 0x40
 8000882:	f101 0c04 	add.w	ip, r1, #4
 8000886:	460e      	mov	r6, r1
 8000888:	4605      	mov	r5, r0
 800088a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800088e:	b0f9      	sub	sp, #484	; 0x1e4
 8000890:	ac01      	add	r4, sp, #4
 8000892:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000894:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000898:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800089a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800089e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008a0:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80008a4:	f04f 37ff 	mov.w	r7, #4294967295
 80008a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80008ac:	9700      	str	r7, [sp, #0]
 80008ae:	e006      	b.n	80008be <__gnu_Unwind_RaiseException+0x42>
 80008b0:	692b      	ldr	r3, [r5, #16]
 80008b2:	466a      	mov	r2, sp
 80008b4:	4629      	mov	r1, r5
 80008b6:	4798      	blx	r3
 80008b8:	2808      	cmp	r0, #8
 80008ba:	4604      	mov	r4, r0
 80008bc:	d108      	bne.n	80008d0 <__gnu_Unwind_RaiseException+0x54>
 80008be:	9910      	ldr	r1, [sp, #64]	; 0x40
 80008c0:	4628      	mov	r0, r5
 80008c2:	f7ff fed1 	bl	8000668 <get_eit_entry>
 80008c6:	2800      	cmp	r0, #0
 80008c8:	d0f2      	beq.n	80008b0 <__gnu_Unwind_RaiseException+0x34>
 80008ca:	2009      	movs	r0, #9
 80008cc:	b079      	add	sp, #484	; 0x1e4
 80008ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008d0:	4668      	mov	r0, sp
 80008d2:	f7ff ff17 	bl	8000704 <restore_non_core_regs>
 80008d6:	2c06      	cmp	r4, #6
 80008d8:	d1f7      	bne.n	80008ca <__gnu_Unwind_RaiseException+0x4e>
 80008da:	4631      	mov	r1, r6
 80008dc:	4628      	mov	r0, r5
 80008de:	f7ff ff47 	bl	8000770 <unwind_phase2>
 80008e2:	bf00      	nop

080008e4 <__gnu_Unwind_ForcedUnwind>:
 80008e4:	60c1      	str	r1, [r0, #12]
 80008e6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80008e8:	6182      	str	r2, [r0, #24]
 80008ea:	6419      	str	r1, [r3, #64]	; 0x40
 80008ec:	2200      	movs	r2, #0
 80008ee:	4619      	mov	r1, r3
 80008f0:	e75c      	b.n	80007ac <unwind_phase2_forced>
 80008f2:	bf00      	nop

080008f4 <__gnu_Unwind_Resume>:
 80008f4:	b570      	push	{r4, r5, r6, lr}
 80008f6:	68c6      	ldr	r6, [r0, #12]
 80008f8:	6943      	ldr	r3, [r0, #20]
 80008fa:	640b      	str	r3, [r1, #64]	; 0x40
 80008fc:	b9ae      	cbnz	r6, 800092a <__gnu_Unwind_Resume+0x36>
 80008fe:	6903      	ldr	r3, [r0, #16]
 8000900:	460a      	mov	r2, r1
 8000902:	4604      	mov	r4, r0
 8000904:	460d      	mov	r5, r1
 8000906:	4601      	mov	r1, r0
 8000908:	2002      	movs	r0, #2
 800090a:	4798      	blx	r3
 800090c:	2807      	cmp	r0, #7
 800090e:	d005      	beq.n	800091c <__gnu_Unwind_Resume+0x28>
 8000910:	2808      	cmp	r0, #8
 8000912:	d10f      	bne.n	8000934 <__gnu_Unwind_Resume+0x40>
 8000914:	4629      	mov	r1, r5
 8000916:	4620      	mov	r0, r4
 8000918:	f7ff ff2a 	bl	8000770 <unwind_phase2>
 800091c:	4630      	mov	r0, r6
 800091e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000920:	f7ff ff24 	bl	800076c <_Unwind_DebugHook>
 8000924:	1d28      	adds	r0, r5, #4
 8000926:	f000 fb3f 	bl	8000fa8 <__restore_core_regs>
 800092a:	2201      	movs	r2, #1
 800092c:	f7ff ff3e 	bl	80007ac <unwind_phase2_forced>
 8000930:	f00b f9ea 	bl	800bd08 <abort>
 8000934:	f00b f9e8 	bl	800bd08 <abort>

08000938 <__gnu_Unwind_Resume_or_Rethrow>:
 8000938:	68c2      	ldr	r2, [r0, #12]
 800093a:	b11a      	cbz	r2, 8000944 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 800093c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800093e:	640a      	str	r2, [r1, #64]	; 0x40
 8000940:	2200      	movs	r2, #0
 8000942:	e733      	b.n	80007ac <unwind_phase2_forced>
 8000944:	e79a      	b.n	800087c <__gnu_Unwind_RaiseException>
 8000946:	bf00      	nop

08000948 <_Unwind_Complete>:
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop

0800094c <_Unwind_DeleteException>:
 800094c:	6883      	ldr	r3, [r0, #8]
 800094e:	4601      	mov	r1, r0
 8000950:	b10b      	cbz	r3, 8000956 <_Unwind_DeleteException+0xa>
 8000952:	2001      	movs	r0, #1
 8000954:	4718      	bx	r3
 8000956:	4770      	bx	lr

08000958 <_Unwind_VRS_Get>:
 8000958:	2901      	cmp	r1, #1
 800095a:	d012      	beq.n	8000982 <_Unwind_VRS_Get+0x2a>
 800095c:	d809      	bhi.n	8000972 <_Unwind_VRS_Get+0x1a>
 800095e:	b973      	cbnz	r3, 800097e <_Unwind_VRS_Get+0x26>
 8000960:	2a0f      	cmp	r2, #15
 8000962:	d80c      	bhi.n	800097e <_Unwind_VRS_Get+0x26>
 8000964:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000968:	4618      	mov	r0, r3
 800096a:	6853      	ldr	r3, [r2, #4]
 800096c:	9a00      	ldr	r2, [sp, #0]
 800096e:	6013      	str	r3, [r2, #0]
 8000970:	4770      	bx	lr
 8000972:	3903      	subs	r1, #3
 8000974:	2901      	cmp	r1, #1
 8000976:	bf94      	ite	ls
 8000978:	2001      	movls	r0, #1
 800097a:	2002      	movhi	r0, #2
 800097c:	4770      	bx	lr
 800097e:	2002      	movs	r0, #2
 8000980:	4770      	bx	lr
 8000982:	4608      	mov	r0, r1
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <_Unwind_GetGR>:
 8000988:	b500      	push	{lr}
 800098a:	b085      	sub	sp, #20
 800098c:	460a      	mov	r2, r1
 800098e:	2300      	movs	r3, #0
 8000990:	a903      	add	r1, sp, #12
 8000992:	9100      	str	r1, [sp, #0]
 8000994:	4619      	mov	r1, r3
 8000996:	f7ff ffdf 	bl	8000958 <_Unwind_VRS_Get>
 800099a:	9803      	ldr	r0, [sp, #12]
 800099c:	b005      	add	sp, #20
 800099e:	f85d fb04 	ldr.w	pc, [sp], #4
 80009a2:	bf00      	nop

080009a4 <_Unwind_VRS_Set>:
 80009a4:	2901      	cmp	r1, #1
 80009a6:	d012      	beq.n	80009ce <_Unwind_VRS_Set+0x2a>
 80009a8:	d809      	bhi.n	80009be <_Unwind_VRS_Set+0x1a>
 80009aa:	b973      	cbnz	r3, 80009ca <_Unwind_VRS_Set+0x26>
 80009ac:	2a0f      	cmp	r2, #15
 80009ae:	d80c      	bhi.n	80009ca <_Unwind_VRS_Set+0x26>
 80009b0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80009b4:	9a00      	ldr	r2, [sp, #0]
 80009b6:	6812      	ldr	r2, [r2, #0]
 80009b8:	6042      	str	r2, [r0, #4]
 80009ba:	4618      	mov	r0, r3
 80009bc:	4770      	bx	lr
 80009be:	3903      	subs	r1, #3
 80009c0:	2901      	cmp	r1, #1
 80009c2:	bf94      	ite	ls
 80009c4:	2001      	movls	r0, #1
 80009c6:	2002      	movhi	r0, #2
 80009c8:	4770      	bx	lr
 80009ca:	2002      	movs	r0, #2
 80009cc:	4770      	bx	lr
 80009ce:	4608      	mov	r0, r1
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop

080009d4 <_Unwind_SetGR>:
 80009d4:	b510      	push	{r4, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	2300      	movs	r3, #0
 80009da:	ac03      	add	r4, sp, #12
 80009dc:	9203      	str	r2, [sp, #12]
 80009de:	9400      	str	r4, [sp, #0]
 80009e0:	460a      	mov	r2, r1
 80009e2:	4619      	mov	r1, r3
 80009e4:	f7ff ffde 	bl	80009a4 <_Unwind_VRS_Set>
 80009e8:	b004      	add	sp, #16
 80009ea:	bd10      	pop	{r4, pc}

080009ec <__gnu_Unwind_Backtrace>:
 80009ec:	b570      	push	{r4, r5, r6, lr}
 80009ee:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80009f0:	6413      	str	r3, [r2, #64]	; 0x40
 80009f2:	f102 0c04 	add.w	ip, r2, #4
 80009f6:	4605      	mov	r5, r0
 80009f8:	460c      	mov	r4, r1
 80009fa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80009fe:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8000a02:	f10d 0e5c 	add.w	lr, sp, #92	; 0x5c
 8000a06:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000a0a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000a0e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000a12:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000a16:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000a1a:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000a1e:	f04f 36ff 	mov.w	r6, #4294967295
 8000a22:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8000a26:	9616      	str	r6, [sp, #88]	; 0x58
 8000a28:	e010      	b.n	8000a4c <__gnu_Unwind_Backtrace+0x60>
 8000a2a:	f7ff ffd3 	bl	80009d4 <_Unwind_SetGR>
 8000a2e:	4621      	mov	r1, r4
 8000a30:	a816      	add	r0, sp, #88	; 0x58
 8000a32:	47a8      	blx	r5
 8000a34:	4603      	mov	r3, r0
 8000a36:	aa16      	add	r2, sp, #88	; 0x58
 8000a38:	4669      	mov	r1, sp
 8000a3a:	2008      	movs	r0, #8
 8000a3c:	b983      	cbnz	r3, 8000a60 <__gnu_Unwind_Backtrace+0x74>
 8000a3e:	9b04      	ldr	r3, [sp, #16]
 8000a40:	4798      	blx	r3
 8000a42:	2805      	cmp	r0, #5
 8000a44:	4606      	mov	r6, r0
 8000a46:	d00c      	beq.n	8000a62 <__gnu_Unwind_Backtrace+0x76>
 8000a48:	2809      	cmp	r0, #9
 8000a4a:	d009      	beq.n	8000a60 <__gnu_Unwind_Backtrace+0x74>
 8000a4c:	9926      	ldr	r1, [sp, #152]	; 0x98
 8000a4e:	4668      	mov	r0, sp
 8000a50:	f7ff fe0a 	bl	8000668 <get_eit_entry>
 8000a54:	4603      	mov	r3, r0
 8000a56:	466a      	mov	r2, sp
 8000a58:	210c      	movs	r1, #12
 8000a5a:	a816      	add	r0, sp, #88	; 0x58
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d0e4      	beq.n	8000a2a <__gnu_Unwind_Backtrace+0x3e>
 8000a60:	2609      	movs	r6, #9
 8000a62:	a816      	add	r0, sp, #88	; 0x58
 8000a64:	f7ff fe4e 	bl	8000704 <restore_non_core_regs>
 8000a68:	4630      	mov	r0, r6
 8000a6a:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 8000a6e:	bd70      	pop	{r4, r5, r6, pc}

08000a70 <__gnu_unwind_pr_common>:
 8000a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a74:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8000a76:	b089      	sub	sp, #36	; 0x24
 8000a78:	461e      	mov	r6, r3
 8000a7a:	f854 3b04 	ldr.w	r3, [r4], #4
 8000a7e:	9406      	str	r4, [sp, #24]
 8000a80:	460d      	mov	r5, r1
 8000a82:	4617      	mov	r7, r2
 8000a84:	f000 0803 	and.w	r8, r0, #3
 8000a88:	2e00      	cmp	r6, #0
 8000a8a:	d079      	beq.n	8000b80 <__gnu_unwind_pr_common+0x110>
 8000a8c:	0c1a      	lsrs	r2, r3, #16
 8000a8e:	041b      	lsls	r3, r3, #16
 8000a90:	9305      	str	r3, [sp, #20]
 8000a92:	f88d 201d 	strb.w	r2, [sp, #29]
 8000a96:	2302      	movs	r3, #2
 8000a98:	b2d2      	uxtb	r2, r2
 8000a9a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8000a9e:	f88d 301c 	strb.w	r3, [sp, #28]
 8000aa2:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000aa4:	f1b8 0f02 	cmp.w	r8, #2
 8000aa8:	bf08      	it	eq
 8000aaa:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000aac:	f013 0301 	ands.w	r3, r3, #1
 8000ab0:	d00c      	beq.n	8000acc <__gnu_unwind_pr_common+0x5c>
 8000ab2:	a905      	add	r1, sp, #20
 8000ab4:	4638      	mov	r0, r7
 8000ab6:	f000 fb79 	bl	80011ac <__gnu_unwind_execute>
 8000aba:	b918      	cbnz	r0, 8000ac4 <__gnu_unwind_pr_common+0x54>
 8000abc:	2008      	movs	r0, #8
 8000abe:	b009      	add	sp, #36	; 0x24
 8000ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ac4:	2009      	movs	r0, #9
 8000ac6:	b009      	add	sp, #36	; 0x24
 8000ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000acc:	f8d4 a000 	ldr.w	sl, [r4]
 8000ad0:	f1ba 0f00 	cmp.w	sl, #0
 8000ad4:	d0ed      	beq.n	8000ab2 <__gnu_unwind_pr_common+0x42>
 8000ad6:	9301      	str	r3, [sp, #4]
 8000ad8:	f000 0308 	and.w	r3, r0, #8
 8000adc:	9302      	str	r3, [sp, #8]
 8000ade:	2e02      	cmp	r6, #2
 8000ae0:	d04a      	beq.n	8000b78 <__gnu_unwind_pr_common+0x108>
 8000ae2:	f8b4 a000 	ldrh.w	sl, [r4]
 8000ae6:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 8000aea:	3404      	adds	r4, #4
 8000aec:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000aee:	f029 0b01 	bic.w	fp, r9, #1
 8000af2:	210f      	movs	r1, #15
 8000af4:	4638      	mov	r0, r7
 8000af6:	449b      	add	fp, r3
 8000af8:	f7ff ff46 	bl	8000988 <_Unwind_GetGR>
 8000afc:	4583      	cmp	fp, r0
 8000afe:	d839      	bhi.n	8000b74 <__gnu_unwind_pr_common+0x104>
 8000b00:	f02a 0301 	bic.w	r3, sl, #1
 8000b04:	449b      	add	fp, r3
 8000b06:	4583      	cmp	fp, r0
 8000b08:	bf94      	ite	ls
 8000b0a:	2000      	movls	r0, #0
 8000b0c:	2001      	movhi	r0, #1
 8000b0e:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8000b12:	f003 0302 	and.w	r3, r3, #2
 8000b16:	f00a 0a01 	and.w	sl, sl, #1
 8000b1a:	ea43 030a 	orr.w	r3, r3, sl
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d049      	beq.n	8000bb6 <__gnu_unwind_pr_common+0x146>
 8000b22:	2b02      	cmp	r3, #2
 8000b24:	d032      	beq.n	8000b8c <__gnu_unwind_pr_common+0x11c>
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d1cc      	bne.n	8000ac4 <__gnu_unwind_pr_common+0x54>
 8000b2a:	f1b8 0f00 	cmp.w	r8, #0
 8000b2e:	d002      	beq.n	8000b36 <__gnu_unwind_pr_common+0xc6>
 8000b30:	2800      	cmp	r0, #0
 8000b32:	f040 80cd 	bne.w	8000cd0 <__gnu_unwind_pr_common+0x260>
 8000b36:	3404      	adds	r4, #4
 8000b38:	f8d4 a000 	ldr.w	sl, [r4]
 8000b3c:	f1ba 0f00 	cmp.w	sl, #0
 8000b40:	d1cd      	bne.n	8000ade <__gnu_unwind_pr_common+0x6e>
 8000b42:	a905      	add	r1, sp, #20
 8000b44:	4638      	mov	r0, r7
 8000b46:	f000 fb31 	bl	80011ac <__gnu_unwind_execute>
 8000b4a:	2800      	cmp	r0, #0
 8000b4c:	d1ba      	bne.n	8000ac4 <__gnu_unwind_pr_common+0x54>
 8000b4e:	9b01      	ldr	r3, [sp, #4]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d0b3      	beq.n	8000abc <__gnu_unwind_pr_common+0x4c>
 8000b54:	210f      	movs	r1, #15
 8000b56:	4638      	mov	r0, r7
 8000b58:	f7ff ff16 	bl	8000988 <_Unwind_GetGR>
 8000b5c:	210e      	movs	r1, #14
 8000b5e:	4602      	mov	r2, r0
 8000b60:	4638      	mov	r0, r7
 8000b62:	f7ff ff37 	bl	80009d4 <_Unwind_SetGR>
 8000b66:	4638      	mov	r0, r7
 8000b68:	4a6a      	ldr	r2, [pc, #424]	; (8000d14 <__gnu_unwind_pr_common+0x2a4>)
 8000b6a:	210f      	movs	r1, #15
 8000b6c:	f7ff ff32 	bl	80009d4 <_Unwind_SetGR>
 8000b70:	2007      	movs	r0, #7
 8000b72:	e7a8      	b.n	8000ac6 <__gnu_unwind_pr_common+0x56>
 8000b74:	2000      	movs	r0, #0
 8000b76:	e7ca      	b.n	8000b0e <__gnu_unwind_pr_common+0x9e>
 8000b78:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8000b7c:	3408      	adds	r4, #8
 8000b7e:	e7b5      	b.n	8000aec <__gnu_unwind_pr_common+0x7c>
 8000b80:	021b      	lsls	r3, r3, #8
 8000b82:	9305      	str	r3, [sp, #20]
 8000b84:	2303      	movs	r3, #3
 8000b86:	f8ad 301c 	strh.w	r3, [sp, #28]
 8000b8a:	e78a      	b.n	8000aa2 <__gnu_unwind_pr_common+0x32>
 8000b8c:	6823      	ldr	r3, [r4, #0]
 8000b8e:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8000b92:	f1b8 0f00 	cmp.w	r8, #0
 8000b96:	d145      	bne.n	8000c24 <__gnu_unwind_pr_common+0x1b4>
 8000b98:	b128      	cbz	r0, 8000ba6 <__gnu_unwind_pr_common+0x136>
 8000b9a:	9a02      	ldr	r2, [sp, #8]
 8000b9c:	2a00      	cmp	r2, #0
 8000b9e:	d05c      	beq.n	8000c5a <__gnu_unwind_pr_common+0x1ea>
 8000ba0:	f1bb 0f00 	cmp.w	fp, #0
 8000ba4:	d074      	beq.n	8000c90 <__gnu_unwind_pr_common+0x220>
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	da00      	bge.n	8000bac <__gnu_unwind_pr_common+0x13c>
 8000baa:	3404      	adds	r4, #4
 8000bac:	f10b 0b01 	add.w	fp, fp, #1
 8000bb0:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 8000bb4:	e7c0      	b.n	8000b38 <__gnu_unwind_pr_common+0xc8>
 8000bb6:	f1b8 0f00 	cmp.w	r8, #0
 8000bba:	d119      	bne.n	8000bf0 <__gnu_unwind_pr_common+0x180>
 8000bbc:	b1b0      	cbz	r0, 8000bec <__gnu_unwind_pr_common+0x17c>
 8000bbe:	6863      	ldr	r3, [r4, #4]
 8000bc0:	6822      	ldr	r2, [r4, #0]
 8000bc2:	1c99      	adds	r1, r3, #2
 8000bc4:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000bc8:	f43f af7c 	beq.w	8000ac4 <__gnu_unwind_pr_common+0x54>
 8000bcc:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	9104      	str	r1, [sp, #16]
 8000bd4:	f000 8090 	beq.w	8000cf8 <__gnu_unwind_pr_common+0x288>
 8000bd8:	1d20      	adds	r0, r4, #4
 8000bda:	f7ff fdc1 	bl	8000760 <_Unwind_decode_typeinfo_ptr.constprop.0>
 8000bde:	ab04      	add	r3, sp, #16
 8000be0:	4601      	mov	r1, r0
 8000be2:	4628      	mov	r0, r5
 8000be4:	f3af 8000 	nop.w
 8000be8:	2800      	cmp	r0, #0
 8000bea:	d15b      	bne.n	8000ca4 <__gnu_unwind_pr_common+0x234>
 8000bec:	3408      	adds	r4, #8
 8000bee:	e7a3      	b.n	8000b38 <__gnu_unwind_pr_common+0xc8>
 8000bf0:	210d      	movs	r1, #13
 8000bf2:	4638      	mov	r0, r7
 8000bf4:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8000bf8:	f7ff fec6 	bl	8000988 <_Unwind_GetGR>
 8000bfc:	4581      	cmp	r9, r0
 8000bfe:	d1f5      	bne.n	8000bec <__gnu_unwind_pr_common+0x17c>
 8000c00:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000c02:	429c      	cmp	r4, r3
 8000c04:	d1f2      	bne.n	8000bec <__gnu_unwind_pr_common+0x17c>
 8000c06:	4620      	mov	r0, r4
 8000c08:	f7ff fce2 	bl	80005d0 <selfrel_offset31>
 8000c0c:	210f      	movs	r1, #15
 8000c0e:	4602      	mov	r2, r0
 8000c10:	4638      	mov	r0, r7
 8000c12:	f7ff fedf 	bl	80009d4 <_Unwind_SetGR>
 8000c16:	4638      	mov	r0, r7
 8000c18:	462a      	mov	r2, r5
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	f7ff feda 	bl	80009d4 <_Unwind_SetGR>
 8000c20:	2007      	movs	r0, #7
 8000c22:	e750      	b.n	8000ac6 <__gnu_unwind_pr_common+0x56>
 8000c24:	210d      	movs	r1, #13
 8000c26:	4638      	mov	r0, r7
 8000c28:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8000c2c:	f7ff feac 	bl	8000988 <_Unwind_GetGR>
 8000c30:	4581      	cmp	r9, r0
 8000c32:	d001      	beq.n	8000c38 <__gnu_unwind_pr_common+0x1c8>
 8000c34:	6823      	ldr	r3, [r4, #0]
 8000c36:	e7b6      	b.n	8000ba6 <__gnu_unwind_pr_common+0x136>
 8000c38:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000c3a:	429c      	cmp	r4, r3
 8000c3c:	d1fa      	bne.n	8000c34 <__gnu_unwind_pr_common+0x1c4>
 8000c3e:	2304      	movs	r3, #4
 8000c40:	2200      	movs	r2, #0
 8000c42:	e9c5 230b 	strd	r2, r3, [r5, #44]	; 0x2c
 8000c46:	18e3      	adds	r3, r4, r3
 8000c48:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 8000c4c:	636b      	str	r3, [r5, #52]	; 0x34
 8000c4e:	6823      	ldr	r3, [r4, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db59      	blt.n	8000d08 <__gnu_unwind_pr_common+0x298>
 8000c54:	2301      	movs	r3, #1
 8000c56:	9301      	str	r3, [sp, #4]
 8000c58:	e7a8      	b.n	8000bac <__gnu_unwind_pr_common+0x13c>
 8000c5a:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000c5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8000c62:	f104 0a04 	add.w	sl, r4, #4
 8000c66:	46b0      	mov	r8, r6
 8000c68:	4691      	mov	r9, r2
 8000c6a:	461e      	mov	r6, r3
 8000c6c:	e00e      	b.n	8000c8c <__gnu_unwind_pr_common+0x21c>
 8000c6e:	4650      	mov	r0, sl
 8000c70:	9604      	str	r6, [sp, #16]
 8000c72:	f7ff fd75 	bl	8000760 <_Unwind_decode_typeinfo_ptr.constprop.0>
 8000c76:	2200      	movs	r2, #0
 8000c78:	4601      	mov	r1, r0
 8000c7a:	ab04      	add	r3, sp, #16
 8000c7c:	4628      	mov	r0, r5
 8000c7e:	f109 0901 	add.w	r9, r9, #1
 8000c82:	f10a 0a04 	add.w	sl, sl, #4
 8000c86:	f3af 8000 	nop.w
 8000c8a:	b9e0      	cbnz	r0, 8000cc6 <__gnu_unwind_pr_common+0x256>
 8000c8c:	45d9      	cmp	r9, fp
 8000c8e:	d1ee      	bne.n	8000c6e <__gnu_unwind_pr_common+0x1fe>
 8000c90:	210d      	movs	r1, #13
 8000c92:	4638      	mov	r0, r7
 8000c94:	f7ff fe78 	bl	8000988 <_Unwind_GetGR>
 8000c98:	9b04      	ldr	r3, [sp, #16]
 8000c9a:	62ac      	str	r4, [r5, #40]	; 0x28
 8000c9c:	e9c5 0308 	strd	r0, r3, [r5, #32]
 8000ca0:	2006      	movs	r0, #6
 8000ca2:	e710      	b.n	8000ac6 <__gnu_unwind_pr_common+0x56>
 8000ca4:	4681      	mov	r9, r0
 8000ca6:	210d      	movs	r1, #13
 8000ca8:	4638      	mov	r0, r7
 8000caa:	f7ff fe6d 	bl	8000988 <_Unwind_GetGR>
 8000cae:	f1b9 0f02 	cmp.w	r9, #2
 8000cb2:	6228      	str	r0, [r5, #32]
 8000cb4:	d125      	bne.n	8000d02 <__gnu_unwind_pr_common+0x292>
 8000cb6:	462b      	mov	r3, r5
 8000cb8:	9a04      	ldr	r2, [sp, #16]
 8000cba:	f843 2f2c 	str.w	r2, [r3, #44]!
 8000cbe:	626b      	str	r3, [r5, #36]	; 0x24
 8000cc0:	62ac      	str	r4, [r5, #40]	; 0x28
 8000cc2:	2006      	movs	r0, #6
 8000cc4:	e6ff      	b.n	8000ac6 <__gnu_unwind_pr_common+0x56>
 8000cc6:	4646      	mov	r6, r8
 8000cc8:	6823      	ldr	r3, [r4, #0]
 8000cca:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8000cce:	e76a      	b.n	8000ba6 <__gnu_unwind_pr_common+0x136>
 8000cd0:	4620      	mov	r0, r4
 8000cd2:	f7ff fc7d 	bl	80005d0 <selfrel_offset31>
 8000cd6:	3404      	adds	r4, #4
 8000cd8:	4602      	mov	r2, r0
 8000cda:	63ac      	str	r4, [r5, #56]	; 0x38
 8000cdc:	4628      	mov	r0, r5
 8000cde:	4614      	mov	r4, r2
 8000ce0:	f3af 8000 	nop.w
 8000ce4:	2800      	cmp	r0, #0
 8000ce6:	f43f aeed 	beq.w	8000ac4 <__gnu_unwind_pr_common+0x54>
 8000cea:	4638      	mov	r0, r7
 8000cec:	4622      	mov	r2, r4
 8000cee:	210f      	movs	r1, #15
 8000cf0:	f7ff fe70 	bl	80009d4 <_Unwind_SetGR>
 8000cf4:	2007      	movs	r0, #7
 8000cf6:	e6e6      	b.n	8000ac6 <__gnu_unwind_pr_common+0x56>
 8000cf8:	210d      	movs	r1, #13
 8000cfa:	4638      	mov	r0, r7
 8000cfc:	f7ff fe44 	bl	8000988 <_Unwind_GetGR>
 8000d00:	6228      	str	r0, [r5, #32]
 8000d02:	9b04      	ldr	r3, [sp, #16]
 8000d04:	626b      	str	r3, [r5, #36]	; 0x24
 8000d06:	e7db      	b.n	8000cc0 <__gnu_unwind_pr_common+0x250>
 8000d08:	f10b 0001 	add.w	r0, fp, #1
 8000d0c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000d10:	e77a      	b.n	8000c08 <__gnu_unwind_pr_common+0x198>
 8000d12:	bf00      	nop
 8000d14:	00000000 	.word	0x00000000

08000d18 <__aeabi_unwind_cpp_pr0>:
 8000d18:	2300      	movs	r3, #0
 8000d1a:	e6a9      	b.n	8000a70 <__gnu_unwind_pr_common>

08000d1c <__aeabi_unwind_cpp_pr1>:
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	e6a7      	b.n	8000a70 <__gnu_unwind_pr_common>

08000d20 <__aeabi_unwind_cpp_pr2>:
 8000d20:	2302      	movs	r3, #2
 8000d22:	e6a5      	b.n	8000a70 <__gnu_unwind_pr_common>

08000d24 <_Unwind_VRS_Pop>:
 8000d24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d28:	4606      	mov	r6, r0
 8000d2a:	b0c3      	sub	sp, #268	; 0x10c
 8000d2c:	4615      	mov	r5, r2
 8000d2e:	461c      	mov	r4, r3
 8000d30:	2904      	cmp	r1, #4
 8000d32:	f200 80bf 	bhi.w	8000eb4 <_Unwind_VRS_Pop+0x190>
 8000d36:	e8df f001 	tbb	[pc, r1]
 8000d3a:	579e      	.short	0x579e
 8000d3c:	2dbd      	.short	0x2dbd
 8000d3e:	03          	.byte	0x03
 8000d3f:	00          	.byte	0x00
 8000d40:	2c00      	cmp	r4, #0
 8000d42:	f040 80b7 	bne.w	8000eb4 <_Unwind_VRS_Pop+0x190>
 8000d46:	2a10      	cmp	r2, #16
 8000d48:	f200 80b4 	bhi.w	8000eb4 <_Unwind_VRS_Pop+0x190>
 8000d4c:	6803      	ldr	r3, [r0, #0]
 8000d4e:	06d8      	lsls	r0, r3, #27
 8000d50:	f100 80f9 	bmi.w	8000f46 <_Unwind_VRS_Pop+0x222>
 8000d54:	af20      	add	r7, sp, #128	; 0x80
 8000d56:	4638      	mov	r0, r7
 8000d58:	f000 f998 	bl	800108c <__gnu_Unwind_Save_WMMXC>
 8000d5c:	6bb4      	ldr	r4, [r6, #56]	; 0x38
 8000d5e:	4639      	mov	r1, r7
 8000d60:	2300      	movs	r3, #0
 8000d62:	f04f 0c01 	mov.w	ip, #1
 8000d66:	fa0c f203 	lsl.w	r2, ip, r3
 8000d6a:	422a      	tst	r2, r5
 8000d6c:	4620      	mov	r0, r4
 8000d6e:	f103 0301 	add.w	r3, r3, #1
 8000d72:	d003      	beq.n	8000d7c <_Unwind_VRS_Pop+0x58>
 8000d74:	f850 2b04 	ldr.w	r2, [r0], #4
 8000d78:	600a      	str	r2, [r1, #0]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	2b04      	cmp	r3, #4
 8000d7e:	f101 0104 	add.w	r1, r1, #4
 8000d82:	d1f0      	bne.n	8000d66 <_Unwind_VRS_Pop+0x42>
 8000d84:	4638      	mov	r0, r7
 8000d86:	63b4      	str	r4, [r6, #56]	; 0x38
 8000d88:	f000 f976 	bl	8001078 <__gnu_Unwind_Restore_WMMXC>
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	b043      	add	sp, #268	; 0x10c
 8000d90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d94:	2c03      	cmp	r4, #3
 8000d96:	f040 808d 	bne.w	8000eb4 <_Unwind_VRS_Pop+0x190>
 8000d9a:	b294      	uxth	r4, r2
 8000d9c:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8000da0:	2b10      	cmp	r3, #16
 8000da2:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8000da6:	f200 8085 	bhi.w	8000eb4 <_Unwind_VRS_Pop+0x190>
 8000daa:	6803      	ldr	r3, [r0, #0]
 8000dac:	071f      	lsls	r7, r3, #28
 8000dae:	f100 80d2 	bmi.w	8000f56 <_Unwind_VRS_Pop+0x232>
 8000db2:	af20      	add	r7, sp, #128	; 0x80
 8000db4:	4638      	mov	r0, r7
 8000db6:	f000 f93d 	bl	8001034 <__gnu_Unwind_Save_WMMXD>
 8000dba:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8000dbc:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 8000dc0:	b154      	cbz	r4, 8000dd8 <_Unwind_VRS_Pop+0xb4>
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	1ad0      	subs	r0, r2, r3
 8000dc6:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8000dca:	00e4      	lsls	r4, r4, #3
 8000dcc:	581d      	ldr	r5, [r3, r0]
 8000dce:	f843 5b04 	str.w	r5, [r3], #4
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d1fa      	bne.n	8000dcc <_Unwind_VRS_Pop+0xa8>
 8000dd6:	4422      	add	r2, r4
 8000dd8:	4638      	mov	r0, r7
 8000dda:	63b2      	str	r2, [r6, #56]	; 0x38
 8000ddc:	f000 f908 	bl	8000ff0 <__gnu_Unwind_Restore_WMMXD>
 8000de0:	2000      	movs	r0, #0
 8000de2:	b043      	add	sp, #268	; 0x10c
 8000de4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000de8:	2c01      	cmp	r4, #1
 8000dea:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8000dee:	b295      	uxth	r5, r2
 8000df0:	d05c      	beq.n	8000eac <_Unwind_VRS_Pop+0x188>
 8000df2:	2c05      	cmp	r4, #5
 8000df4:	d15e      	bne.n	8000eb4 <_Unwind_VRS_Pop+0x190>
 8000df6:	eb08 0905 	add.w	r9, r8, r5
 8000dfa:	f1b9 0f20 	cmp.w	r9, #32
 8000dfe:	d859      	bhi.n	8000eb4 <_Unwind_VRS_Pop+0x190>
 8000e00:	f1b8 0f0f 	cmp.w	r8, #15
 8000e04:	d979      	bls.n	8000efa <_Unwind_VRS_Pop+0x1d6>
 8000e06:	46a9      	mov	r9, r5
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	f040 808a 	bne.w	8000f22 <_Unwind_VRS_Pop+0x1fe>
 8000e0e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000e10:	b36d      	cbz	r5, 8000e6e <_Unwind_VRS_Pop+0x14a>
 8000e12:	af20      	add	r7, sp, #128	; 0x80
 8000e14:	f04f 0900 	mov.w	r9, #0
 8000e18:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8000e1c:	3f04      	subs	r7, #4
 8000e1e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8000e22:	f853 1b04 	ldr.w	r1, [r3], #4
 8000e26:	f847 1f04 	str.w	r1, [r7, #4]!
 8000e2a:	42ab      	cmp	r3, r5
 8000e2c:	d1f9      	bne.n	8000e22 <_Unwind_VRS_Pop+0xfe>
 8000e2e:	f1b9 0f00 	cmp.w	r9, #0
 8000e32:	d00f      	beq.n	8000e54 <_Unwind_VRS_Pop+0x130>
 8000e34:	466f      	mov	r7, sp
 8000e36:	4641      	mov	r1, r8
 8000e38:	2910      	cmp	r1, #16
 8000e3a:	bf38      	it	cc
 8000e3c:	2110      	movcc	r1, #16
 8000e3e:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8000e42:	3984      	subs	r1, #132	; 0x84
 8000e44:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 8000e48:	f853 0b04 	ldr.w	r0, [r3], #4
 8000e4c:	f841 0f04 	str.w	r0, [r1, #4]!
 8000e50:	42ab      	cmp	r3, r5
 8000e52:	d1f9      	bne.n	8000e48 <_Unwind_VRS_Pop+0x124>
 8000e54:	2c01      	cmp	r4, #1
 8000e56:	f000 8086 	beq.w	8000f66 <_Unwind_VRS_Pop+0x242>
 8000e5a:	f1b8 0f0f 	cmp.w	r8, #15
 8000e5e:	63b5      	str	r5, [r6, #56]	; 0x38
 8000e60:	d947      	bls.n	8000ef2 <_Unwind_VRS_Pop+0x1ce>
 8000e62:	f1b9 0f00 	cmp.w	r9, #0
 8000e66:	d002      	beq.n	8000e6e <_Unwind_VRS_Pop+0x14a>
 8000e68:	4668      	mov	r0, sp
 8000e6a:	f000 f8b9 	bl	8000fe0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000e6e:	2000      	movs	r0, #0
 8000e70:	b043      	add	sp, #268	; 0x10c
 8000e72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e76:	b9ec      	cbnz	r4, 8000eb4 <_Unwind_VRS_Pop+0x190>
 8000e78:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8000e7a:	4623      	mov	r3, r4
 8000e7c:	fa1f fc82 	uxth.w	ip, r2
 8000e80:	2401      	movs	r4, #1
 8000e82:	1d37      	adds	r7, r6, #4
 8000e84:	fa04 f203 	lsl.w	r2, r4, r3
 8000e88:	ea12 0f0c 	tst.w	r2, ip
 8000e8c:	4601      	mov	r1, r0
 8000e8e:	d004      	beq.n	8000e9a <_Unwind_VRS_Pop+0x176>
 8000e90:	f851 2b04 	ldr.w	r2, [r1], #4
 8000e94:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 8000e98:	4608      	mov	r0, r1
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	2b10      	cmp	r3, #16
 8000e9e:	d1f1      	bne.n	8000e84 <_Unwind_VRS_Pop+0x160>
 8000ea0:	f415 5500 	ands.w	r5, r5, #8192	; 0x2000
 8000ea4:	d1e3      	bne.n	8000e6e <_Unwind_VRS_Pop+0x14a>
 8000ea6:	63b0      	str	r0, [r6, #56]	; 0x38
 8000ea8:	4628      	mov	r0, r5
 8000eaa:	e004      	b.n	8000eb6 <_Unwind_VRS_Pop+0x192>
 8000eac:	eb08 0305 	add.w	r3, r8, r5
 8000eb0:	2b10      	cmp	r3, #16
 8000eb2:	d903      	bls.n	8000ebc <_Unwind_VRS_Pop+0x198>
 8000eb4:	2002      	movs	r0, #2
 8000eb6:	b043      	add	sp, #268	; 0x10c
 8000eb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000ebc:	f1b8 0f0f 	cmp.w	r8, #15
 8000ec0:	d8f8      	bhi.n	8000eb4 <_Unwind_VRS_Pop+0x190>
 8000ec2:	6833      	ldr	r3, [r6, #0]
 8000ec4:	07da      	lsls	r2, r3, #31
 8000ec6:	d506      	bpl.n	8000ed6 <_Unwind_VRS_Pop+0x1b2>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	f023 0303 	bic.w	r3, r3, #3
 8000ece:	f840 3b48 	str.w	r3, [r0], #72
 8000ed2:	f000 f879 	bl	8000fc8 <__gnu_Unwind_Save_VFP>
 8000ed6:	af20      	add	r7, sp, #128	; 0x80
 8000ed8:	4638      	mov	r0, r7
 8000eda:	f000 f875 	bl	8000fc8 <__gnu_Unwind_Save_VFP>
 8000ede:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000ee0:	2d00      	cmp	r5, #0
 8000ee2:	d197      	bne.n	8000e14 <_Unwind_VRS_Pop+0xf0>
 8000ee4:	461d      	mov	r5, r3
 8000ee6:	3504      	adds	r5, #4
 8000ee8:	63b5      	str	r5, [r6, #56]	; 0x38
 8000eea:	4638      	mov	r0, r7
 8000eec:	f000 f868 	bl	8000fc0 <__gnu_Unwind_Restore_VFP>
 8000ef0:	e7bd      	b.n	8000e6e <_Unwind_VRS_Pop+0x14a>
 8000ef2:	a820      	add	r0, sp, #128	; 0x80
 8000ef4:	f000 f86c 	bl	8000fd0 <__gnu_Unwind_Restore_VFP_D>
 8000ef8:	e7b3      	b.n	8000e62 <_Unwind_VRS_Pop+0x13e>
 8000efa:	f1b9 0f10 	cmp.w	r9, #16
 8000efe:	d940      	bls.n	8000f82 <_Unwind_VRS_Pop+0x25e>
 8000f00:	f1a9 0910 	sub.w	r9, r9, #16
 8000f04:	6833      	ldr	r3, [r6, #0]
 8000f06:	07d9      	lsls	r1, r3, #31
 8000f08:	d508      	bpl.n	8000f1c <_Unwind_VRS_Pop+0x1f8>
 8000f0a:	f023 0301 	bic.w	r3, r3, #1
 8000f0e:	4630      	mov	r0, r6
 8000f10:	f043 0302 	orr.w	r3, r3, #2
 8000f14:	f840 3b48 	str.w	r3, [r0], #72
 8000f18:	f000 f85e 	bl	8000fd8 <__gnu_Unwind_Save_VFP_D>
 8000f1c:	f1b9 0f00 	cmp.w	r9, #0
 8000f20:	d032      	beq.n	8000f88 <_Unwind_VRS_Pop+0x264>
 8000f22:	6833      	ldr	r3, [r6, #0]
 8000f24:	075a      	lsls	r2, r3, #29
 8000f26:	d420      	bmi.n	8000f6a <_Unwind_VRS_Pop+0x246>
 8000f28:	f1b8 0f0f 	cmp.w	r8, #15
 8000f2c:	d925      	bls.n	8000f7a <_Unwind_VRS_Pop+0x256>
 8000f2e:	466f      	mov	r7, sp
 8000f30:	4638      	mov	r0, r7
 8000f32:	f1c8 0510 	rsb	r5, r8, #16
 8000f36:	f000 f857 	bl	8000fe8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000f3a:	2d00      	cmp	r5, #0
 8000f3c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000f3e:	f77f af7a 	ble.w	8000e36 <_Unwind_VRS_Pop+0x112>
 8000f42:	af20      	add	r7, sp, #128	; 0x80
 8000f44:	e768      	b.n	8000e18 <_Unwind_VRS_Pop+0xf4>
 8000f46:	f023 0310 	bic.w	r3, r3, #16
 8000f4a:	6033      	str	r3, [r6, #0]
 8000f4c:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 8000f50:	f000 f89c 	bl	800108c <__gnu_Unwind_Save_WMMXC>
 8000f54:	e6fe      	b.n	8000d54 <_Unwind_VRS_Pop+0x30>
 8000f56:	f023 0308 	bic.w	r3, r3, #8
 8000f5a:	6003      	str	r3, [r0, #0]
 8000f5c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8000f60:	f000 f868 	bl	8001034 <__gnu_Unwind_Save_WMMXD>
 8000f64:	e725      	b.n	8000db2 <_Unwind_VRS_Pop+0x8e>
 8000f66:	af20      	add	r7, sp, #128	; 0x80
 8000f68:	e7bd      	b.n	8000ee6 <_Unwind_VRS_Pop+0x1c2>
 8000f6a:	4630      	mov	r0, r6
 8000f6c:	f023 0304 	bic.w	r3, r3, #4
 8000f70:	f840 3bd0 	str.w	r3, [r0], #208
 8000f74:	f000 f838 	bl	8000fe8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000f78:	e7d6      	b.n	8000f28 <_Unwind_VRS_Pop+0x204>
 8000f7a:	a820      	add	r0, sp, #128	; 0x80
 8000f7c:	f000 f82c 	bl	8000fd8 <__gnu_Unwind_Save_VFP_D>
 8000f80:	e7d5      	b.n	8000f2e <_Unwind_VRS_Pop+0x20a>
 8000f82:	f04f 0900 	mov.w	r9, #0
 8000f86:	e7bd      	b.n	8000f04 <_Unwind_VRS_Pop+0x1e0>
 8000f88:	f1b8 0f0f 	cmp.w	r8, #15
 8000f8c:	f63f af3f 	bhi.w	8000e0e <_Unwind_VRS_Pop+0xea>
 8000f90:	af20      	add	r7, sp, #128	; 0x80
 8000f92:	4638      	mov	r0, r7
 8000f94:	f000 f820 	bl	8000fd8 <__gnu_Unwind_Save_VFP_D>
 8000f98:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000f9a:	2d00      	cmp	r5, #0
 8000f9c:	f47f af3a 	bne.w	8000e14 <_Unwind_VRS_Pop+0xf0>
 8000fa0:	4638      	mov	r0, r7
 8000fa2:	f000 f815 	bl	8000fd0 <__gnu_Unwind_Restore_VFP_D>
 8000fa6:	e762      	b.n	8000e6e <_Unwind_VRS_Pop+0x14a>

08000fa8 <__restore_core_regs>:
 8000fa8:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000fac:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000fb0:	469c      	mov	ip, r3
 8000fb2:	46a6      	mov	lr, r4
 8000fb4:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000fb8:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000fbc:	46e5      	mov	sp, ip
 8000fbe:	bd00      	pop	{pc}

08000fc0 <__gnu_Unwind_Restore_VFP>:
 8000fc0:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <__gnu_Unwind_Save_VFP>:
 8000fc8:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop

08000fd0 <__gnu_Unwind_Restore_VFP_D>:
 8000fd0:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <__gnu_Unwind_Save_VFP_D>:
 8000fd8:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop

08000fe0 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000fe0:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000fe8:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <__gnu_Unwind_Restore_WMMXD>:
 8000ff0:	ecf0 0102 	ldfe	f0, [r0], #8
 8000ff4:	ecf0 1102 	ldfe	f1, [r0], #8
 8000ff8:	ecf0 2102 	ldfe	f2, [r0], #8
 8000ffc:	ecf0 3102 	ldfe	f3, [r0], #8
 8001000:	ecf0 4102 	ldfe	f4, [r0], #8
 8001004:	ecf0 5102 	ldfe	f5, [r0], #8
 8001008:	ecf0 6102 	ldfe	f6, [r0], #8
 800100c:	ecf0 7102 	ldfe	f7, [r0], #8
 8001010:	ecf0 8102 	ldfp	f0, [r0], #8
 8001014:	ecf0 9102 	ldfp	f1, [r0], #8
 8001018:	ecf0 a102 	ldfp	f2, [r0], #8
 800101c:	ecf0 b102 	ldfp	f3, [r0], #8
 8001020:	ecf0 c102 	ldfp	f4, [r0], #8
 8001024:	ecf0 d102 	ldfp	f5, [r0], #8
 8001028:	ecf0 e102 	ldfp	f6, [r0], #8
 800102c:	ecf0 f102 	ldfp	f7, [r0], #8
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <__gnu_Unwind_Save_WMMXD>:
 8001034:	ece0 0102 	stfe	f0, [r0], #8
 8001038:	ece0 1102 	stfe	f1, [r0], #8
 800103c:	ece0 2102 	stfe	f2, [r0], #8
 8001040:	ece0 3102 	stfe	f3, [r0], #8
 8001044:	ece0 4102 	stfe	f4, [r0], #8
 8001048:	ece0 5102 	stfe	f5, [r0], #8
 800104c:	ece0 6102 	stfe	f6, [r0], #8
 8001050:	ece0 7102 	stfe	f7, [r0], #8
 8001054:	ece0 8102 	stfp	f0, [r0], #8
 8001058:	ece0 9102 	stfp	f1, [r0], #8
 800105c:	ece0 a102 	stfp	f2, [r0], #8
 8001060:	ece0 b102 	stfp	f3, [r0], #8
 8001064:	ece0 c102 	stfp	f4, [r0], #8
 8001068:	ece0 d102 	stfp	f5, [r0], #8
 800106c:	ece0 e102 	stfp	f6, [r0], #8
 8001070:	ece0 f102 	stfp	f7, [r0], #8
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop

08001078 <__gnu_Unwind_Restore_WMMXC>:
 8001078:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 800107c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001080:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001084:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop

0800108c <__gnu_Unwind_Save_WMMXC>:
 800108c:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001090:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001094:	fca0 a101 	stc2	1, cr10, [r0], #4
 8001098:	fca0 b101 	stc2	1, cr11, [r0], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop

080010a0 <_Unwind_RaiseException>:
 80010a0:	46ec      	mov	ip, sp
 80010a2:	b500      	push	{lr}
 80010a4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80010a8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80010ac:	f04f 0300 	mov.w	r3, #0
 80010b0:	e92d 000c 	stmdb	sp!, {r2, r3}
 80010b4:	a901      	add	r1, sp, #4
 80010b6:	f7ff fbe1 	bl	800087c <__gnu_Unwind_RaiseException>
 80010ba:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80010be:	b012      	add	sp, #72	; 0x48
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <_Unwind_Resume>:
 80010c4:	46ec      	mov	ip, sp
 80010c6:	b500      	push	{lr}
 80010c8:	e92d 5000 	stmdb	sp!, {ip, lr}
 80010cc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80010d0:	f04f 0300 	mov.w	r3, #0
 80010d4:	e92d 000c 	stmdb	sp!, {r2, r3}
 80010d8:	a901      	add	r1, sp, #4
 80010da:	f7ff fc0b 	bl	80008f4 <__gnu_Unwind_Resume>
 80010de:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80010e2:	b012      	add	sp, #72	; 0x48
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop

080010e8 <_Unwind_Resume_or_Rethrow>:
 80010e8:	46ec      	mov	ip, sp
 80010ea:	b500      	push	{lr}
 80010ec:	e92d 5000 	stmdb	sp!, {ip, lr}
 80010f0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80010f4:	f04f 0300 	mov.w	r3, #0
 80010f8:	e92d 000c 	stmdb	sp!, {r2, r3}
 80010fc:	a901      	add	r1, sp, #4
 80010fe:	f7ff fc1b 	bl	8000938 <__gnu_Unwind_Resume_or_Rethrow>
 8001102:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001106:	b012      	add	sp, #72	; 0x48
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop

0800110c <_Unwind_ForcedUnwind>:
 800110c:	46ec      	mov	ip, sp
 800110e:	b500      	push	{lr}
 8001110:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001114:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001118:	f04f 0300 	mov.w	r3, #0
 800111c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001120:	ab01      	add	r3, sp, #4
 8001122:	f7ff fbdf 	bl	80008e4 <__gnu_Unwind_ForcedUnwind>
 8001126:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800112a:	b012      	add	sp, #72	; 0x48
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop

08001130 <_Unwind_Backtrace>:
 8001130:	46ec      	mov	ip, sp
 8001132:	b500      	push	{lr}
 8001134:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001138:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800113c:	f04f 0300 	mov.w	r3, #0
 8001140:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001144:	aa01      	add	r2, sp, #4
 8001146:	f7ff fc51 	bl	80009ec <__gnu_Unwind_Backtrace>
 800114a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800114e:	b012      	add	sp, #72	; 0x48
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop

08001154 <next_unwind_byte>:
 8001154:	7a02      	ldrb	r2, [r0, #8]
 8001156:	4603      	mov	r3, r0
 8001158:	b97a      	cbnz	r2, 800117a <next_unwind_byte+0x26>
 800115a:	7a42      	ldrb	r2, [r0, #9]
 800115c:	b1a2      	cbz	r2, 8001188 <next_unwind_byte+0x34>
 800115e:	6841      	ldr	r1, [r0, #4]
 8001160:	3a01      	subs	r2, #1
 8001162:	b410      	push	{r4}
 8001164:	7242      	strb	r2, [r0, #9]
 8001166:	6808      	ldr	r0, [r1, #0]
 8001168:	2203      	movs	r2, #3
 800116a:	1d0c      	adds	r4, r1, #4
 800116c:	721a      	strb	r2, [r3, #8]
 800116e:	0202      	lsls	r2, r0, #8
 8001170:	605c      	str	r4, [r3, #4]
 8001172:	0e00      	lsrs	r0, r0, #24
 8001174:	bc10      	pop	{r4}
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	4770      	bx	lr
 800117a:	6800      	ldr	r0, [r0, #0]
 800117c:	3a01      	subs	r2, #1
 800117e:	721a      	strb	r2, [r3, #8]
 8001180:	0202      	lsls	r2, r0, #8
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	0e00      	lsrs	r0, r0, #24
 8001186:	4770      	bx	lr
 8001188:	20b0      	movs	r0, #176	; 0xb0
 800118a:	4770      	bx	lr

0800118c <_Unwind_GetGR.constprop.0>:
 800118c:	b500      	push	{lr}
 800118e:	b085      	sub	sp, #20
 8001190:	2300      	movs	r3, #0
 8001192:	aa03      	add	r2, sp, #12
 8001194:	9200      	str	r2, [sp, #0]
 8001196:	4619      	mov	r1, r3
 8001198:	220c      	movs	r2, #12
 800119a:	f7ff fbdd 	bl	8000958 <_Unwind_VRS_Get>
 800119e:	9803      	ldr	r0, [sp, #12]
 80011a0:	b005      	add	sp, #20
 80011a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80011a6:	bf00      	nop

080011a8 <unwind_UCB_from_context>:
 80011a8:	e7f0      	b.n	800118c <_Unwind_GetGR.constprop.0>
 80011aa:	bf00      	nop

080011ac <__gnu_unwind_execute>:
 80011ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011b0:	4605      	mov	r5, r0
 80011b2:	b085      	sub	sp, #20
 80011b4:	460e      	mov	r6, r1
 80011b6:	f04f 0800 	mov.w	r8, #0
 80011ba:	4630      	mov	r0, r6
 80011bc:	f7ff ffca 	bl	8001154 <next_unwind_byte>
 80011c0:	28b0      	cmp	r0, #176	; 0xb0
 80011c2:	4604      	mov	r4, r0
 80011c4:	f000 80ba 	beq.w	800133c <__gnu_unwind_execute+0x190>
 80011c8:	0607      	lsls	r7, r0, #24
 80011ca:	d520      	bpl.n	800120e <__gnu_unwind_execute+0x62>
 80011cc:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 80011d0:	2b80      	cmp	r3, #128	; 0x80
 80011d2:	d04d      	beq.n	8001270 <__gnu_unwind_execute+0xc4>
 80011d4:	2b90      	cmp	r3, #144	; 0x90
 80011d6:	d036      	beq.n	8001246 <__gnu_unwind_execute+0x9a>
 80011d8:	2ba0      	cmp	r3, #160	; 0xa0
 80011da:	d060      	beq.n	800129e <__gnu_unwind_execute+0xf2>
 80011dc:	2bb0      	cmp	r3, #176	; 0xb0
 80011de:	d074      	beq.n	80012ca <__gnu_unwind_execute+0x11e>
 80011e0:	2bc0      	cmp	r3, #192	; 0xc0
 80011e2:	f000 808b 	beq.w	80012fc <__gnu_unwind_execute+0x150>
 80011e6:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80011ea:	2bd0      	cmp	r3, #208	; 0xd0
 80011ec:	d10b      	bne.n	8001206 <__gnu_unwind_execute+0x5a>
 80011ee:	f000 0207 	and.w	r2, r0, #7
 80011f2:	3201      	adds	r2, #1
 80011f4:	2305      	movs	r3, #5
 80011f6:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80011fa:	2101      	movs	r1, #1
 80011fc:	4628      	mov	r0, r5
 80011fe:	f7ff fd91 	bl	8000d24 <_Unwind_VRS_Pop>
 8001202:	2800      	cmp	r0, #0
 8001204:	d0d9      	beq.n	80011ba <__gnu_unwind_execute+0xe>
 8001206:	2009      	movs	r0, #9
 8001208:	b005      	add	sp, #20
 800120a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800120e:	0083      	lsls	r3, r0, #2
 8001210:	b2db      	uxtb	r3, r3
 8001212:	1d1f      	adds	r7, r3, #4
 8001214:	f10d 090c 	add.w	r9, sp, #12
 8001218:	2300      	movs	r3, #0
 800121a:	4619      	mov	r1, r3
 800121c:	f8cd 9000 	str.w	r9, [sp]
 8001220:	220d      	movs	r2, #13
 8001222:	4628      	mov	r0, r5
 8001224:	f7ff fb98 	bl	8000958 <_Unwind_VRS_Get>
 8001228:	9b03      	ldr	r3, [sp, #12]
 800122a:	f8cd 9000 	str.w	r9, [sp]
 800122e:	0660      	lsls	r0, r4, #25
 8001230:	bf4c      	ite	mi
 8001232:	1bdf      	submi	r7, r3, r7
 8001234:	18ff      	addpl	r7, r7, r3
 8001236:	2300      	movs	r3, #0
 8001238:	220d      	movs	r2, #13
 800123a:	4619      	mov	r1, r3
 800123c:	4628      	mov	r0, r5
 800123e:	9703      	str	r7, [sp, #12]
 8001240:	f7ff fbb0 	bl	80009a4 <_Unwind_VRS_Set>
 8001244:	e7b9      	b.n	80011ba <__gnu_unwind_execute+0xe>
 8001246:	f000 030d 	and.w	r3, r0, #13
 800124a:	2b0d      	cmp	r3, #13
 800124c:	d0db      	beq.n	8001206 <__gnu_unwind_execute+0x5a>
 800124e:	af03      	add	r7, sp, #12
 8001250:	2300      	movs	r3, #0
 8001252:	f000 020f 	and.w	r2, r0, #15
 8001256:	4619      	mov	r1, r3
 8001258:	9700      	str	r7, [sp, #0]
 800125a:	4628      	mov	r0, r5
 800125c:	f7ff fb7c 	bl	8000958 <_Unwind_VRS_Get>
 8001260:	2300      	movs	r3, #0
 8001262:	9700      	str	r7, [sp, #0]
 8001264:	220d      	movs	r2, #13
 8001266:	4619      	mov	r1, r3
 8001268:	4628      	mov	r0, r5
 800126a:	f7ff fb9b 	bl	80009a4 <_Unwind_VRS_Set>
 800126e:	e7a4      	b.n	80011ba <__gnu_unwind_execute+0xe>
 8001270:	4630      	mov	r0, r6
 8001272:	f7ff ff6f 	bl	8001154 <next_unwind_byte>
 8001276:	0224      	lsls	r4, r4, #8
 8001278:	4320      	orrs	r0, r4
 800127a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800127e:	d0c2      	beq.n	8001206 <__gnu_unwind_execute+0x5a>
 8001280:	0104      	lsls	r4, r0, #4
 8001282:	2300      	movs	r3, #0
 8001284:	b2a2      	uxth	r2, r4
 8001286:	4619      	mov	r1, r3
 8001288:	4628      	mov	r0, r5
 800128a:	f7ff fd4b 	bl	8000d24 <_Unwind_VRS_Pop>
 800128e:	2800      	cmp	r0, #0
 8001290:	d1b9      	bne.n	8001206 <__gnu_unwind_execute+0x5a>
 8001292:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001296:	bf18      	it	ne
 8001298:	f04f 0801 	movne.w	r8, #1
 800129c:	e78d      	b.n	80011ba <__gnu_unwind_execute+0xe>
 800129e:	43c2      	mvns	r2, r0
 80012a0:	f002 0307 	and.w	r3, r2, #7
 80012a4:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 80012a8:	411a      	asrs	r2, r3
 80012aa:	0701      	lsls	r1, r0, #28
 80012ac:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 80012b0:	f04f 0300 	mov.w	r3, #0
 80012b4:	bf48      	it	mi
 80012b6:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 80012ba:	4619      	mov	r1, r3
 80012bc:	4628      	mov	r0, r5
 80012be:	f7ff fd31 	bl	8000d24 <_Unwind_VRS_Pop>
 80012c2:	2800      	cmp	r0, #0
 80012c4:	f43f af79 	beq.w	80011ba <__gnu_unwind_execute+0xe>
 80012c8:	e79d      	b.n	8001206 <__gnu_unwind_execute+0x5a>
 80012ca:	28b1      	cmp	r0, #177	; 0xb1
 80012cc:	d03b      	beq.n	8001346 <__gnu_unwind_execute+0x19a>
 80012ce:	28b2      	cmp	r0, #178	; 0xb2
 80012d0:	f000 8093 	beq.w	80013fa <__gnu_unwind_execute+0x24e>
 80012d4:	28b3      	cmp	r0, #179	; 0xb3
 80012d6:	d041      	beq.n	800135c <__gnu_unwind_execute+0x1b0>
 80012d8:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 80012dc:	2bb4      	cmp	r3, #180	; 0xb4
 80012de:	d092      	beq.n	8001206 <__gnu_unwind_execute+0x5a>
 80012e0:	f000 0207 	and.w	r2, r0, #7
 80012e4:	3201      	adds	r2, #1
 80012e6:	2301      	movs	r3, #1
 80012e8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80012ec:	4619      	mov	r1, r3
 80012ee:	4628      	mov	r0, r5
 80012f0:	f7ff fd18 	bl	8000d24 <_Unwind_VRS_Pop>
 80012f4:	2800      	cmp	r0, #0
 80012f6:	f43f af60 	beq.w	80011ba <__gnu_unwind_execute+0xe>
 80012fa:	e784      	b.n	8001206 <__gnu_unwind_execute+0x5a>
 80012fc:	28c6      	cmp	r0, #198	; 0xc6
 80012fe:	d04a      	beq.n	8001396 <__gnu_unwind_execute+0x1ea>
 8001300:	28c7      	cmp	r0, #199	; 0xc7
 8001302:	d054      	beq.n	80013ae <__gnu_unwind_execute+0x202>
 8001304:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001308:	2bc0      	cmp	r3, #192	; 0xc0
 800130a:	d063      	beq.n	80013d4 <__gnu_unwind_execute+0x228>
 800130c:	28c8      	cmp	r0, #200	; 0xc8
 800130e:	d068      	beq.n	80013e2 <__gnu_unwind_execute+0x236>
 8001310:	28c9      	cmp	r0, #201	; 0xc9
 8001312:	f47f af78 	bne.w	8001206 <__gnu_unwind_execute+0x5a>
 8001316:	4630      	mov	r0, r6
 8001318:	f7ff ff1c 	bl	8001154 <next_unwind_byte>
 800131c:	0302      	lsls	r2, r0, #12
 800131e:	f000 000f 	and.w	r0, r0, #15
 8001322:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8001326:	3001      	adds	r0, #1
 8001328:	4302      	orrs	r2, r0
 800132a:	2101      	movs	r1, #1
 800132c:	2305      	movs	r3, #5
 800132e:	4628      	mov	r0, r5
 8001330:	f7ff fcf8 	bl	8000d24 <_Unwind_VRS_Pop>
 8001334:	2800      	cmp	r0, #0
 8001336:	f43f af40 	beq.w	80011ba <__gnu_unwind_execute+0xe>
 800133a:	e764      	b.n	8001206 <__gnu_unwind_execute+0x5a>
 800133c:	f1b8 0f00 	cmp.w	r8, #0
 8001340:	d018      	beq.n	8001374 <__gnu_unwind_execute+0x1c8>
 8001342:	2000      	movs	r0, #0
 8001344:	e760      	b.n	8001208 <__gnu_unwind_execute+0x5c>
 8001346:	4630      	mov	r0, r6
 8001348:	f7ff ff04 	bl	8001154 <next_unwind_byte>
 800134c:	4602      	mov	r2, r0
 800134e:	2800      	cmp	r0, #0
 8001350:	f43f af59 	beq.w	8001206 <__gnu_unwind_execute+0x5a>
 8001354:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001358:	d0c8      	beq.n	80012ec <__gnu_unwind_execute+0x140>
 800135a:	e754      	b.n	8001206 <__gnu_unwind_execute+0x5a>
 800135c:	4630      	mov	r0, r6
 800135e:	f7ff fef9 	bl	8001154 <next_unwind_byte>
 8001362:	0302      	lsls	r2, r0, #12
 8001364:	f000 030f 	and.w	r3, r0, #15
 8001368:	3301      	adds	r3, #1
 800136a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 800136e:	431a      	orrs	r2, r3
 8001370:	2301      	movs	r3, #1
 8001372:	e7bb      	b.n	80012ec <__gnu_unwind_execute+0x140>
 8001374:	ac03      	add	r4, sp, #12
 8001376:	4643      	mov	r3, r8
 8001378:	220e      	movs	r2, #14
 800137a:	4641      	mov	r1, r8
 800137c:	9400      	str	r4, [sp, #0]
 800137e:	4628      	mov	r0, r5
 8001380:	f7ff faea 	bl	8000958 <_Unwind_VRS_Get>
 8001384:	9400      	str	r4, [sp, #0]
 8001386:	4643      	mov	r3, r8
 8001388:	220f      	movs	r2, #15
 800138a:	4641      	mov	r1, r8
 800138c:	4628      	mov	r0, r5
 800138e:	f7ff fb09 	bl	80009a4 <_Unwind_VRS_Set>
 8001392:	4640      	mov	r0, r8
 8001394:	e738      	b.n	8001208 <__gnu_unwind_execute+0x5c>
 8001396:	4630      	mov	r0, r6
 8001398:	f7ff fedc 	bl	8001154 <next_unwind_byte>
 800139c:	0302      	lsls	r2, r0, #12
 800139e:	f000 030f 	and.w	r3, r0, #15
 80013a2:	3301      	adds	r3, #1
 80013a4:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 80013a8:	431a      	orrs	r2, r3
 80013aa:	2303      	movs	r3, #3
 80013ac:	e79e      	b.n	80012ec <__gnu_unwind_execute+0x140>
 80013ae:	4630      	mov	r0, r6
 80013b0:	f7ff fed0 	bl	8001154 <next_unwind_byte>
 80013b4:	4602      	mov	r2, r0
 80013b6:	2800      	cmp	r0, #0
 80013b8:	f43f af25 	beq.w	8001206 <__gnu_unwind_execute+0x5a>
 80013bc:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80013c0:	f47f af21 	bne.w	8001206 <__gnu_unwind_execute+0x5a>
 80013c4:	2104      	movs	r1, #4
 80013c6:	4628      	mov	r0, r5
 80013c8:	f7ff fcac 	bl	8000d24 <_Unwind_VRS_Pop>
 80013cc:	2800      	cmp	r0, #0
 80013ce:	f43f aef4 	beq.w	80011ba <__gnu_unwind_execute+0xe>
 80013d2:	e718      	b.n	8001206 <__gnu_unwind_execute+0x5a>
 80013d4:	f000 020f 	and.w	r2, r0, #15
 80013d8:	3201      	adds	r2, #1
 80013da:	2303      	movs	r3, #3
 80013dc:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 80013e0:	e784      	b.n	80012ec <__gnu_unwind_execute+0x140>
 80013e2:	4630      	mov	r0, r6
 80013e4:	f7ff feb6 	bl	8001154 <next_unwind_byte>
 80013e8:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 80013ec:	f000 030f 	and.w	r3, r0, #15
 80013f0:	3210      	adds	r2, #16
 80013f2:	3301      	adds	r3, #1
 80013f4:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 80013f8:	e797      	b.n	800132a <__gnu_unwind_execute+0x17e>
 80013fa:	2300      	movs	r3, #0
 80013fc:	f10d 090c 	add.w	r9, sp, #12
 8001400:	220d      	movs	r2, #13
 8001402:	4619      	mov	r1, r3
 8001404:	f8cd 9000 	str.w	r9, [sp]
 8001408:	4628      	mov	r0, r5
 800140a:	f7ff faa5 	bl	8000958 <_Unwind_VRS_Get>
 800140e:	4630      	mov	r0, r6
 8001410:	f7ff fea0 	bl	8001154 <next_unwind_byte>
 8001414:	0602      	lsls	r2, r0, #24
 8001416:	f04f 0402 	mov.w	r4, #2
 800141a:	d50c      	bpl.n	8001436 <__gnu_unwind_execute+0x28a>
 800141c:	9b03      	ldr	r3, [sp, #12]
 800141e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001422:	40a0      	lsls	r0, r4
 8001424:	4418      	add	r0, r3
 8001426:	9003      	str	r0, [sp, #12]
 8001428:	4630      	mov	r0, r6
 800142a:	f7ff fe93 	bl	8001154 <next_unwind_byte>
 800142e:	0603      	lsls	r3, r0, #24
 8001430:	f104 0407 	add.w	r4, r4, #7
 8001434:	d4f2      	bmi.n	800141c <__gnu_unwind_execute+0x270>
 8001436:	9b03      	ldr	r3, [sp, #12]
 8001438:	f8cd 9000 	str.w	r9, [sp]
 800143c:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8001440:	40a2      	lsls	r2, r4
 8001442:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001446:	441a      	add	r2, r3
 8001448:	2300      	movs	r3, #0
 800144a:	9203      	str	r2, [sp, #12]
 800144c:	4619      	mov	r1, r3
 800144e:	220d      	movs	r2, #13
 8001450:	4628      	mov	r0, r5
 8001452:	f7ff faa7 	bl	80009a4 <_Unwind_VRS_Set>
 8001456:	e6b0      	b.n	80011ba <__gnu_unwind_execute+0xe>

08001458 <__gnu_unwind_frame>:
 8001458:	b510      	push	{r4, lr}
 800145a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800145c:	6853      	ldr	r3, [r2, #4]
 800145e:	b084      	sub	sp, #16
 8001460:	f04f 0c03 	mov.w	ip, #3
 8001464:	3208      	adds	r2, #8
 8001466:	021c      	lsls	r4, r3, #8
 8001468:	4608      	mov	r0, r1
 800146a:	0e1b      	lsrs	r3, r3, #24
 800146c:	a901      	add	r1, sp, #4
 800146e:	9401      	str	r4, [sp, #4]
 8001470:	9202      	str	r2, [sp, #8]
 8001472:	f88d c00c 	strb.w	ip, [sp, #12]
 8001476:	f88d 300d 	strb.w	r3, [sp, #13]
 800147a:	f7ff fe97 	bl	80011ac <__gnu_unwind_execute>
 800147e:	b004      	add	sp, #16
 8001480:	bd10      	pop	{r4, pc}
 8001482:	bf00      	nop

08001484 <_Unwind_GetRegionStart>:
 8001484:	b508      	push	{r3, lr}
 8001486:	f7ff fe8f 	bl	80011a8 <unwind_UCB_from_context>
 800148a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800148c:	bd08      	pop	{r3, pc}
 800148e:	bf00      	nop

08001490 <_Unwind_GetLanguageSpecificData>:
 8001490:	b508      	push	{r3, lr}
 8001492:	f7ff fe89 	bl	80011a8 <unwind_UCB_from_context>
 8001496:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001498:	79c3      	ldrb	r3, [r0, #7]
 800149a:	3302      	adds	r3, #2
 800149c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80014a0:	bd08      	pop	{r3, pc}
 80014a2:	bf00      	nop

080014a4 <__aeabi_idiv0>:
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop

080014a8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b088      	sub	sp, #32
 80014ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ae:	f107 030c 	add.w	r3, r7, #12
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
 80014bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014be:	4b22      	ldr	r3, [pc, #136]	; (8001548 <MX_GPIO_Init+0xa0>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c2:	4a21      	ldr	r2, [pc, #132]	; (8001548 <MX_GPIO_Init+0xa0>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ca:	4b1f      	ldr	r3, [pc, #124]	; (8001548 <MX_GPIO_Init+0xa0>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d6:	4b1c      	ldr	r3, [pc, #112]	; (8001548 <MX_GPIO_Init+0xa0>)
 80014d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014da:	4a1b      	ldr	r2, [pc, #108]	; (8001548 <MX_GPIO_Init+0xa0>)
 80014dc:	f043 0302 	orr.w	r3, r3, #2
 80014e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014e2:	4b19      	ldr	r3, [pc, #100]	; (8001548 <MX_GPIO_Init+0xa0>)
 80014e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_SET);
 80014ee:	2201      	movs	r2, #1
 80014f0:	2110      	movs	r1, #16
 80014f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f6:	f000 ffe7 	bl	80024c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, W5500_CS_Pin|W5500_RST_Pin, GPIO_PIN_SET);
 80014fa:	2201      	movs	r2, #1
 80014fc:	2130      	movs	r1, #48	; 0x30
 80014fe:	4813      	ldr	r0, [pc, #76]	; (800154c <MX_GPIO_Init+0xa4>)
 8001500:	f000 ffe2 	bl	80024c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LORA_CS_Pin;
 8001504:	2310      	movs	r3, #16
 8001506:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001508:	2301      	movs	r3, #1
 800150a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001510:	2300      	movs	r3, #0
 8001512:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LORA_CS_GPIO_Port, &GPIO_InitStruct);
 8001514:	f107 030c 	add.w	r3, r7, #12
 8001518:	4619      	mov	r1, r3
 800151a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800151e:	f000 fe51 	bl	80021c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = W5500_CS_Pin|W5500_RST_Pin;
 8001522:	2330      	movs	r3, #48	; 0x30
 8001524:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001526:	2301      	movs	r3, #1
 8001528:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152e:	2300      	movs	r3, #0
 8001530:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001532:	f107 030c 	add.w	r3, r7, #12
 8001536:	4619      	mov	r1, r3
 8001538:	4804      	ldr	r0, [pc, #16]	; (800154c <MX_GPIO_Init+0xa4>)
 800153a:	f000 fe43 	bl	80021c4 <HAL_GPIO_Init>

}
 800153e:	bf00      	nop
 8001540:	3720      	adds	r7, #32
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40021000 	.word	0x40021000
 800154c:	48000400 	.word	0x48000400

08001550 <_Z14messageArrivedP11MessageData>:
};
unsigned char TargetName[] = "driver.cloudmqtt.com";
unsigned char targetIP[4] = {5,196,95,208};
unsigned int targetPort = 18602;
void messageArrived(MessageData* md)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b09c      	sub	sp, #112	; 0x70
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
	printf("Message Received\r\n");
 8001558:	481e      	ldr	r0, [pc, #120]	; (80015d4 <_Z14messageArrivedP11MessageData+0x84>)
 800155a:	f009 fba1 	bl	800aca0 <puts>
	unsigned char testbuffer[100];
	MQTTMessage* message = md->message;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	66fb      	str	r3, [r7, #108]	; 0x6c

	if (opts.showtopics)
 8001564:	4b1c      	ldr	r3, [pc, #112]	; (80015d8 <_Z14messageArrivedP11MessageData+0x88>)
 8001566:	6a1b      	ldr	r3, [r3, #32]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d016      	beq.n	800159a <_Z14messageArrivedP11MessageData+0x4a>
	{
		memcpy(testbuffer,(char*)message->payload,(int)message->payloadlen);
 800156c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800156e:	6899      	ldr	r1, [r3, #8]
 8001570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001572:	68da      	ldr	r2, [r3, #12]
 8001574:	f107 0308 	add.w	r3, r7, #8
 8001578:	4618      	mov	r0, r3
 800157a:	f009 fa15 	bl	800a9a8 <memcpy>
		testbuffer[(int)message->payloadlen + 1] = 0x0a;
 800157e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	3301      	adds	r3, #1
 8001584:	3370      	adds	r3, #112	; 0x70
 8001586:	443b      	add	r3, r7
 8001588:	220a      	movs	r2, #10
 800158a:	f803 2c68 	strb.w	r2, [r3, #-104]
//		*(testbuffer + (int)message->payloadlen + 1) = "\n";
		printf("%s\r\n",testbuffer);
 800158e:	f107 0308 	add.w	r3, r7, #8
 8001592:	4619      	mov	r1, r3
 8001594:	4811      	ldr	r0, [pc, #68]	; (80015dc <_Z14messageArrivedP11MessageData+0x8c>)
 8001596:	f009 fafd 	bl	800ab94 <iprintf>
	}
	//	printf("%12s\r\n", md->topicName->lenstring.len, md->topicName->lenstring.data);
	if (opts.nodelimiter)
 800159a:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <_Z14messageArrivedP11MessageData+0x88>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d009      	beq.n	80015b6 <_Z14messageArrivedP11MessageData+0x66>
		printf("%.*s", (int)message->payloadlen, (char*)message->payload);
 80015a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	4619      	mov	r1, r3
 80015a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	461a      	mov	r2, r3
 80015ae:	480c      	ldr	r0, [pc, #48]	; (80015e0 <_Z14messageArrivedP11MessageData+0x90>)
 80015b0:	f009 faf0 	bl	800ab94 <iprintf>
	else
		printf("%.*s%s", (int)message->payloadlen, (char*)message->payload, opts.delimiter);
	//fflush(stdout);
}
 80015b4:	e009      	b.n	80015ca <_Z14messageArrivedP11MessageData+0x7a>
		printf("%.*s%s", (int)message->payloadlen, (char*)message->payload, opts.delimiter);
 80015b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	4619      	mov	r1, r3
 80015bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015be:	689a      	ldr	r2, [r3, #8]
 80015c0:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <_Z14messageArrivedP11MessageData+0x88>)
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	4807      	ldr	r0, [pc, #28]	; (80015e4 <_Z14messageArrivedP11MessageData+0x94>)
 80015c6:	f009 fae5 	bl	800ab94 <iprintf>
}
 80015ca:	bf00      	nop
 80015cc:	3770      	adds	r7, #112	; 0x70
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	0800bee0 	.word	0x0800bee0
 80015d8:	20000018 	.word	0x20000018
 80015dc:	0800bef4 	.word	0x0800bef4
 80015e0:	0800befc 	.word	0x0800befc
 80015e4:	0800bf04 	.word	0x0800bf04

080015e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015e8:	b590      	push	{r4, r7, lr}
 80015ea:	b0d1      	sub	sp, #324	; 0x144
 80015ec:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	int i;
	int rc = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015f4:	f000 fc6f 	bl	8001ed6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015f8:	f000 f90e 	bl	8001818 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015fc:	f7ff ff54 	bl	80014a8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001600:	f000 fa12 	bl	8001a28 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001604:	f000 fb9a 	bl	8001d3c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	printf("W5500 Start.\n\r");
 8001608:	486e      	ldr	r0, [pc, #440]	; (80017c4 <main+0x1dc>)
 800160a:	f009 fac3 	bl	800ab94 <iprintf>
//	Eth.setSpi(&hspi1, W5500_CS_GPIO_Port, W5500_CS_Pin, W5500_RST_GPIO_Port, W5500_RST_Pin);

	/*Setup W5500, including the memory allegation to each socket for RX/TX*/
	W5500Initialze();
 800160e:	f009 f8ef 	bl	800a7f0 <W5500Initialze>
	printf("\r\nCHIP Version: %02x\r\n", getVERSIONR());
 8001612:	f44f 5064 	mov.w	r0, #14592	; 0x3900
 8001616:	f003 fcb9 	bl	8004f8c <WIZCHIP_READ>
 800161a:	4603      	mov	r3, r0
 800161c:	4619      	mov	r1, r3
 800161e:	486a      	ldr	r0, [pc, #424]	; (80017c8 <main+0x1e0>)
 8001620:	f009 fab8 	bl	800ab94 <iprintf>

	/*Set network informations (Writes network info to W5500)*/
	wizchip_setnetinfo(&gWIZNETINFO);
 8001624:	4869      	ldr	r0, [pc, #420]	; (80017cc <main+0x1e4>)
 8001626:	f005 fbc3 	bl	8006db0 <wizchip_setnetinfo>
	ctlnetwork(CN_SET_NETINFO,&gWIZNETINFO);
 800162a:	4968      	ldr	r1, [pc, #416]	; (80017cc <main+0x1e4>)
 800162c:	2000      	movs	r0, #0
 800162e:	f005 f8c7 	bl	80067c0 <ctlnetwork>

	printf("Network Info Set\r\n");
 8001632:	4867      	ldr	r0, [pc, #412]	; (80017d0 <main+0x1e8>)
 8001634:	f009 fb34 	bl	800aca0 <puts>
	print_network_information();
 8001638:	f000 f938 	bl	80018ac <_Z25print_network_informationv>

	DHCP_init(3, ethBuf3);
 800163c:	4965      	ldr	r1, [pc, #404]	; (80017d4 <main+0x1ec>)
 800163e:	2003      	movs	r0, #3
 8001640:	f006 ffc4 	bl	80085cc <DHCP_init>

	while(1){
		if(process_dhcp() == DHCP_IP_LEASED){
 8001644:	f000 f9a6 	bl	8001994 <_Z12process_dhcpv>
 8001648:	4603      	mov	r3, r0
 800164a:	2b04      	cmp	r3, #4
 800164c:	bf0c      	ite	eq
 800164e:	2301      	moveq	r3, #1
 8001650:	2300      	movne	r3, #0
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	d00b      	beq.n	8001670 <main+0x88>
			printf("DHCP Success\r\n");
 8001658:	485f      	ldr	r0, [pc, #380]	; (80017d8 <main+0x1f0>)
 800165a:	f009 fb21 	bl	800aca0 <puts>
			break;
 800165e:	bf00      	nop
			printf("Try.....\r\n");
	}

	Network n;
	MQTTClient c;
	n.my_socket = 2;
 8001660:	2302      	movs	r3, #2
 8001662:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

	DNS_init(1,ethBuf1);
 8001666:	495d      	ldr	r1, [pc, #372]	; (80017dc <main+0x1f4>)
 8001668:	2001      	movs	r0, #1
 800166a:	f007 fbf5 	bl	8008e58 <DNS_init>
 800166e:	e003      	b.n	8001678 <main+0x90>
			printf("Try.....\r\n");
 8001670:	485b      	ldr	r0, [pc, #364]	; (80017e0 <main+0x1f8>)
 8001672:	f009 fb15 	bl	800aca0 <puts>
		if(process_dhcp() == DHCP_IP_LEASED){
 8001676:	e7e5      	b.n	8001644 <main+0x5c>
	while(DNS_run(gWIZNETINFO.dns,TargetName,targetIP) == 0){}
 8001678:	4a5a      	ldr	r2, [pc, #360]	; (80017e4 <main+0x1fc>)
 800167a:	495b      	ldr	r1, [pc, #364]	; (80017e8 <main+0x200>)
 800167c:	485b      	ldr	r0, [pc, #364]	; (80017ec <main+0x204>)
 800167e:	f007 fc07 	bl	8008e90 <DNS_run>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	bf0c      	ite	eq
 8001688:	2301      	moveq	r3, #1
 800168a:	2300      	movne	r3, #0
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	d000      	beq.n	8001694 <main+0xac>
 8001692:	e7f1      	b.n	8001678 <main+0x90>


	printf("START MQTT\r\n");
 8001694:	4856      	ldr	r0, [pc, #344]	; (80017f0 <main+0x208>)
 8001696:	f009 fb03 	bl	800aca0 <puts>

	NewNetwork(&n, 0);
 800169a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800169e:	2100      	movs	r1, #0
 80016a0:	4618      	mov	r0, r3
 80016a2:	f008 f9f3 	bl	8009a8c <NewNetwork>
	ConnectNetwork(&n, targetIP, targetPort);
 80016a6:	4b53      	ldr	r3, [pc, #332]	; (80017f4 <main+0x20c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80016b0:	494c      	ldr	r1, [pc, #304]	; (80017e4 <main+0x1fc>)
 80016b2:	4618      	mov	r0, r3
 80016b4:	f008 fa67 	bl	8009b86 <ConnectNetwork>
	MQTTClientInit(&c,&n,1000,buf,100,ethBuf2,2048);
 80016b8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80016bc:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 80016c0:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 80016c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016c8:	9202      	str	r2, [sp, #8]
 80016ca:	4a4b      	ldr	r2, [pc, #300]	; (80017f8 <main+0x210>)
 80016cc:	9201      	str	r2, [sp, #4]
 80016ce:	2264      	movs	r2, #100	; 0x64
 80016d0:	9200      	str	r2, [sp, #0]
 80016d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016d6:	f007 fd1b 	bl	8009110 <MQTTClientInit>

	print_network_information();
 80016da:	f000 f8e7 	bl	80018ac <_Z25print_network_informationv>
	printf("Target IP  Address : %d.%d.%d.%d:%d\n\r",targetIP[0],targetIP[1],targetIP[2],targetIP[3],targetPort);
 80016de:	4b41      	ldr	r3, [pc, #260]	; (80017e4 <main+0x1fc>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	4619      	mov	r1, r3
 80016e4:	4b3f      	ldr	r3, [pc, #252]	; (80017e4 <main+0x1fc>)
 80016e6:	785b      	ldrb	r3, [r3, #1]
 80016e8:	4618      	mov	r0, r3
 80016ea:	4b3e      	ldr	r3, [pc, #248]	; (80017e4 <main+0x1fc>)
 80016ec:	789b      	ldrb	r3, [r3, #2]
 80016ee:	461c      	mov	r4, r3
 80016f0:	4b3c      	ldr	r3, [pc, #240]	; (80017e4 <main+0x1fc>)
 80016f2:	78db      	ldrb	r3, [r3, #3]
 80016f4:	461a      	mov	r2, r3
 80016f6:	4b3f      	ldr	r3, [pc, #252]	; (80017f4 <main+0x20c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	9301      	str	r3, [sp, #4]
 80016fc:	9200      	str	r2, [sp, #0]
 80016fe:	4623      	mov	r3, r4
 8001700:	4602      	mov	r2, r0
 8001702:	483e      	ldr	r0, [pc, #248]	; (80017fc <main+0x214>)
 8001704:	f009 fa46 	bl	800ab94 <iprintf>


	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
 8001708:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800170c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001710:	4a3b      	ldr	r2, [pc, #236]	; (8001800 <main+0x218>)
 8001712:	4618      	mov	r0, r3
 8001714:	4611      	mov	r1, r2
 8001716:	2358      	movs	r3, #88	; 0x58
 8001718:	461a      	mov	r2, r3
 800171a:	f009 f945 	bl	800a9a8 <memcpy>
	data.willFlag = 0;
 800171e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001722:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001726:	2200      	movs	r2, #0
 8001728:	76da      	strb	r2, [r3, #27]
	data.MQTTVersion = 3;
 800172a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800172e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001732:	2203      	movs	r2, #3
 8001734:	721a      	strb	r2, [r3, #8]
	data.clientID.cstring = opts.clientid;
 8001736:	4b33      	ldr	r3, [pc, #204]	; (8001804 <main+0x21c>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800173e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001742:	60da      	str	r2, [r3, #12]
	data.username.cstring = opts.username;
 8001744:	4b2f      	ldr	r3, [pc, #188]	; (8001804 <main+0x21c>)
 8001746:	691a      	ldr	r2, [r3, #16]
 8001748:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800174c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001750:	641a      	str	r2, [r3, #64]	; 0x40
	data.password.cstring = opts.password;
 8001752:	4b2c      	ldr	r3, [pc, #176]	; (8001804 <main+0x21c>)
 8001754:	695a      	ldr	r2, [r3, #20]
 8001756:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800175a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800175e:	64da      	str	r2, [r3, #76]	; 0x4c

	data.keepAliveInterval = 60;
 8001760:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001764:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001768:	223c      	movs	r2, #60	; 0x3c
 800176a:	831a      	strh	r2, [r3, #24]
	data.cleansession = 1;
 800176c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001770:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001774:	2201      	movs	r2, #1
 8001776:	769a      	strb	r2, [r3, #26]


	rc = MQTTConnect(&c, &data);
 8001778:	1d3a      	adds	r2, r7, #4
 800177a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800177e:	4611      	mov	r1, r2
 8001780:	4618      	mov	r0, r3
 8001782:	f007 ffef 	bl	8009764 <MQTTConnect>
 8001786:	4603      	mov	r3, r0
 8001788:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	printf("MQTT Connected\r\n");
 800178c:	481e      	ldr	r0, [pc, #120]	; (8001808 <main+0x220>)
 800178e:	f009 fa87 	bl	800aca0 <puts>

	opts.showtopics = 1;
 8001792:	4b1c      	ldr	r3, [pc, #112]	; (8001804 <main+0x21c>)
 8001794:	2201      	movs	r2, #1
 8001796:	621a      	str	r2, [r3, #32]
	rc = MQTTSubscribe(&c, "joe/test", opts.qos, messageArrived);
 8001798:	4b1a      	ldr	r3, [pc, #104]	; (8001804 <main+0x21c>)
 800179a:	7b1a      	ldrb	r2, [r3, #12]
 800179c:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 80017a0:	4b1a      	ldr	r3, [pc, #104]	; (800180c <main+0x224>)
 80017a2:	491b      	ldr	r1, [pc, #108]	; (8001810 <main+0x228>)
 80017a4:	f008 f864 	bl	8009870 <MQTTSubscribe>
 80017a8:	4603      	mov	r3, r0
 80017aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	printf("MQTT Subscribed\r\n");
 80017ae:	4819      	ldr	r0, [pc, #100]	; (8001814 <main+0x22c>)
 80017b0:	f009 fa76 	bl	800aca0 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MQTTYield(&c, 1000);
 80017b4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80017b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017bc:	4618      	mov	r0, r3
 80017be:	f007 ff8d 	bl	80096dc <MQTTYield>
 80017c2:	e7f7      	b.n	80017b4 <main+0x1cc>
 80017c4:	0800bf0c 	.word	0x0800bf0c
 80017c8:	0800bf1c 	.word	0x0800bf1c
 80017cc:	20000000 	.word	0x20000000
 80017d0:	0800bf34 	.word	0x0800bf34
 80017d4:	20001134 	.word	0x20001134
 80017d8:	0800bf48 	.word	0x0800bf48
 80017dc:	20000134 	.word	0x20000134
 80017e0:	0800bf58 	.word	0x0800bf58
 80017e4:	20000054 	.word	0x20000054
 80017e8:	2000003c 	.word	0x2000003c
 80017ec:	20000012 	.word	0x20000012
 80017f0:	0800bf64 	.word	0x0800bf64
 80017f4:	20000058 	.word	0x20000058
 80017f8:	20000934 	.word	0x20000934
 80017fc:	0800bf70 	.word	0x0800bf70
 8001800:	0800bfc8 	.word	0x0800bfc8
 8001804:	20000018 	.word	0x20000018
 8001808:	0800bf98 	.word	0x0800bf98
 800180c:	08001551 	.word	0x08001551
 8001810:	0800bfa8 	.word	0x0800bfa8
 8001814:	0800bfb4 	.word	0x0800bfb4

08001818 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b094      	sub	sp, #80	; 0x50
 800181c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800181e:	f107 0318 	add.w	r3, r7, #24
 8001822:	2238      	movs	r2, #56	; 0x38
 8001824:	2100      	movs	r1, #0
 8001826:	4618      	mov	r0, r3
 8001828:	f009 f8cc 	bl	800a9c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800182c:	1d3b      	adds	r3, r7, #4
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]
 8001834:	609a      	str	r2, [r3, #8]
 8001836:	60da      	str	r2, [r3, #12]
 8001838:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800183a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800183e:	f000 fe5b 	bl	80024f8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001842:	2302      	movs	r3, #2
 8001844:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001846:	f44f 7380 	mov.w	r3, #256	; 0x100
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800184c:	2340      	movs	r3, #64	; 0x40
 800184e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001850:	2300      	movs	r3, #0
 8001852:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001854:	f107 0318 	add.w	r3, r7, #24
 8001858:	4618      	mov	r0, r3
 800185a:	f000 fef1 	bl	8002640 <HAL_RCC_OscConfig>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	bf14      	ite	ne
 8001864:	2301      	movne	r3, #1
 8001866:	2300      	moveq	r3, #0
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <_Z18SystemClock_Configv+0x5a>
  {
    Error_Handler();
 800186e:	f000 f8c1 	bl	80019f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001872:	230f      	movs	r3, #15
 8001874:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001876:	2301      	movs	r3, #1
 8001878:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800187e:	2300      	movs	r3, #0
 8001880:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001882:	2300      	movs	r3, #0
 8001884:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001886:	1d3b      	adds	r3, r7, #4
 8001888:	2100      	movs	r1, #0
 800188a:	4618      	mov	r0, r3
 800188c:	f001 f9f0 	bl	8002c70 <HAL_RCC_ClockConfig>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	bf14      	ite	ne
 8001896:	2301      	movne	r3, #1
 8001898:	2300      	moveq	r3, #0
 800189a:	b2db      	uxtb	r3, r3
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 80018a0:	f000 f8a8 	bl	80019f4 <Error_Handler>
  }
}
 80018a4:	bf00      	nop
 80018a6:	3750      	adds	r7, #80	; 0x50
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <_Z25print_network_informationv>:

/* USER CODE BEGIN 4 */
void print_network_information(void)
{
 80018ac:	b5b0      	push	{r4, r5, r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af04      	add	r7, sp, #16
	memset(&gWIZNETINFO,0,sizeof(gWIZNETINFO));
 80018b2:	2217      	movs	r2, #23
 80018b4:	2100      	movs	r1, #0
 80018b6:	4831      	ldr	r0, [pc, #196]	; (800197c <_Z25print_network_informationv+0xd0>)
 80018b8:	f009 f884 	bl	800a9c4 <memset>

	wizchip_getnetinfo(&gWIZNETINFO);
 80018bc:	482f      	ldr	r0, [pc, #188]	; (800197c <_Z25print_network_informationv+0xd0>)
 80018be:	f005 fab7 	bl	8006e30 <wizchip_getnetinfo>
	printf("MAC Address : %02x:%02x:%02x:%02x:%02x:%02x\n\r",gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
 80018c2:	4b2e      	ldr	r3, [pc, #184]	; (800197c <_Z25print_network_informationv+0xd0>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	4b2c      	ldr	r3, [pc, #176]	; (800197c <_Z25print_network_informationv+0xd0>)
 80018ca:	785b      	ldrb	r3, [r3, #1]
 80018cc:	461c      	mov	r4, r3
 80018ce:	4b2b      	ldr	r3, [pc, #172]	; (800197c <_Z25print_network_informationv+0xd0>)
 80018d0:	789b      	ldrb	r3, [r3, #2]
 80018d2:	461d      	mov	r5, r3
 80018d4:	4b29      	ldr	r3, [pc, #164]	; (800197c <_Z25print_network_informationv+0xd0>)
 80018d6:	78db      	ldrb	r3, [r3, #3]
 80018d8:	461a      	mov	r2, r3
 80018da:	4b28      	ldr	r3, [pc, #160]	; (800197c <_Z25print_network_informationv+0xd0>)
 80018dc:	791b      	ldrb	r3, [r3, #4]
 80018de:	4619      	mov	r1, r3
 80018e0:	4b26      	ldr	r3, [pc, #152]	; (800197c <_Z25print_network_informationv+0xd0>)
 80018e2:	795b      	ldrb	r3, [r3, #5]
 80018e4:	9302      	str	r3, [sp, #8]
 80018e6:	9101      	str	r1, [sp, #4]
 80018e8:	9200      	str	r2, [sp, #0]
 80018ea:	462b      	mov	r3, r5
 80018ec:	4622      	mov	r2, r4
 80018ee:	4601      	mov	r1, r0
 80018f0:	4823      	ldr	r0, [pc, #140]	; (8001980 <_Z25print_network_informationv+0xd4>)
 80018f2:	f009 f94f 	bl	800ab94 <iprintf>
	printf("IP  Address : %d.%d.%d.%d\n\r",gWIZNETINFO.ip[0],gWIZNETINFO.ip[1],gWIZNETINFO.ip[2],gWIZNETINFO.ip[3]);
 80018f6:	4b21      	ldr	r3, [pc, #132]	; (800197c <_Z25print_network_informationv+0xd0>)
 80018f8:	799b      	ldrb	r3, [r3, #6]
 80018fa:	4619      	mov	r1, r3
 80018fc:	4b1f      	ldr	r3, [pc, #124]	; (800197c <_Z25print_network_informationv+0xd0>)
 80018fe:	79db      	ldrb	r3, [r3, #7]
 8001900:	461a      	mov	r2, r3
 8001902:	4b1e      	ldr	r3, [pc, #120]	; (800197c <_Z25print_network_informationv+0xd0>)
 8001904:	7a1b      	ldrb	r3, [r3, #8]
 8001906:	4618      	mov	r0, r3
 8001908:	4b1c      	ldr	r3, [pc, #112]	; (800197c <_Z25print_network_informationv+0xd0>)
 800190a:	7a5b      	ldrb	r3, [r3, #9]
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	4603      	mov	r3, r0
 8001910:	481c      	ldr	r0, [pc, #112]	; (8001984 <_Z25print_network_informationv+0xd8>)
 8001912:	f009 f93f 	bl	800ab94 <iprintf>
	printf("Subnet Mask : %d.%d.%d.%d\n\r",gWIZNETINFO.sn[0],gWIZNETINFO.sn[1],gWIZNETINFO.sn[2],gWIZNETINFO.sn[3]);
 8001916:	4b19      	ldr	r3, [pc, #100]	; (800197c <_Z25print_network_informationv+0xd0>)
 8001918:	7a9b      	ldrb	r3, [r3, #10]
 800191a:	4619      	mov	r1, r3
 800191c:	4b17      	ldr	r3, [pc, #92]	; (800197c <_Z25print_network_informationv+0xd0>)
 800191e:	7adb      	ldrb	r3, [r3, #11]
 8001920:	461a      	mov	r2, r3
 8001922:	4b16      	ldr	r3, [pc, #88]	; (800197c <_Z25print_network_informationv+0xd0>)
 8001924:	7b1b      	ldrb	r3, [r3, #12]
 8001926:	4618      	mov	r0, r3
 8001928:	4b14      	ldr	r3, [pc, #80]	; (800197c <_Z25print_network_informationv+0xd0>)
 800192a:	7b5b      	ldrb	r3, [r3, #13]
 800192c:	9300      	str	r3, [sp, #0]
 800192e:	4603      	mov	r3, r0
 8001930:	4815      	ldr	r0, [pc, #84]	; (8001988 <_Z25print_network_informationv+0xdc>)
 8001932:	f009 f92f 	bl	800ab94 <iprintf>
	printf("Gateway     : %d.%d.%d.%d\n\r",gWIZNETINFO.gw[0],gWIZNETINFO.gw[1],gWIZNETINFO.gw[2],gWIZNETINFO.gw[3]);
 8001936:	4b11      	ldr	r3, [pc, #68]	; (800197c <_Z25print_network_informationv+0xd0>)
 8001938:	7b9b      	ldrb	r3, [r3, #14]
 800193a:	4619      	mov	r1, r3
 800193c:	4b0f      	ldr	r3, [pc, #60]	; (800197c <_Z25print_network_informationv+0xd0>)
 800193e:	7bdb      	ldrb	r3, [r3, #15]
 8001940:	461a      	mov	r2, r3
 8001942:	4b0e      	ldr	r3, [pc, #56]	; (800197c <_Z25print_network_informationv+0xd0>)
 8001944:	7c1b      	ldrb	r3, [r3, #16]
 8001946:	4618      	mov	r0, r3
 8001948:	4b0c      	ldr	r3, [pc, #48]	; (800197c <_Z25print_network_informationv+0xd0>)
 800194a:	7c5b      	ldrb	r3, [r3, #17]
 800194c:	9300      	str	r3, [sp, #0]
 800194e:	4603      	mov	r3, r0
 8001950:	480e      	ldr	r0, [pc, #56]	; (800198c <_Z25print_network_informationv+0xe0>)
 8001952:	f009 f91f 	bl	800ab94 <iprintf>
	printf("DNS Server  : %d.%d.%d.%d\n\r",gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
 8001956:	4b09      	ldr	r3, [pc, #36]	; (800197c <_Z25print_network_informationv+0xd0>)
 8001958:	7c9b      	ldrb	r3, [r3, #18]
 800195a:	4619      	mov	r1, r3
 800195c:	4b07      	ldr	r3, [pc, #28]	; (800197c <_Z25print_network_informationv+0xd0>)
 800195e:	7cdb      	ldrb	r3, [r3, #19]
 8001960:	461a      	mov	r2, r3
 8001962:	4b06      	ldr	r3, [pc, #24]	; (800197c <_Z25print_network_informationv+0xd0>)
 8001964:	7d1b      	ldrb	r3, [r3, #20]
 8001966:	4618      	mov	r0, r3
 8001968:	4b04      	ldr	r3, [pc, #16]	; (800197c <_Z25print_network_informationv+0xd0>)
 800196a:	7d5b      	ldrb	r3, [r3, #21]
 800196c:	9300      	str	r3, [sp, #0]
 800196e:	4603      	mov	r3, r0
 8001970:	4807      	ldr	r0, [pc, #28]	; (8001990 <_Z25print_network_informationv+0xe4>)
 8001972:	f009 f90f 	bl	800ab94 <iprintf>
}
 8001976:	bf00      	nop
 8001978:	46bd      	mov	sp, r7
 800197a:	bdb0      	pop	{r4, r5, r7, pc}
 800197c:	20000000 	.word	0x20000000
 8001980:	0800c020 	.word	0x0800c020
 8001984:	0800c050 	.word	0x0800c050
 8001988:	0800c06c 	.word	0x0800c06c
 800198c:	0800c088 	.word	0x0800c088
 8001990:	0800c0a4 	.word	0x0800c0a4

08001994 <_Z12process_dhcpv>:


int process_dhcp(void){
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
	int8_t ret =0;
 800199a:	2300      	movs	r3, #0
 800199c:	71fb      	strb	r3, [r7, #7]
	while(1){
		ret = DHCP_run();
 800199e:	f006 fc23 	bl	80081e8 <DHCP_run>
 80019a2:	4603      	mov	r3, r0
 80019a4:	71fb      	strb	r3, [r7, #7]
		if(ret == DHCP_IP_LEASED)
 80019a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	d108      	bne.n	80019c0 <_Z12process_dhcpv+0x2c>
		{
				printf("=============================\r\n");
 80019ae:	480f      	ldr	r0, [pc, #60]	; (80019ec <_Z12process_dhcpv+0x58>)
 80019b0:	f009 f976 	bl	800aca0 <puts>
				print_network_information();
 80019b4:	f7ff ff7a 	bl	80018ac <_Z25print_network_informationv>
				printf("=============================\r\n");
 80019b8:	480c      	ldr	r0, [pc, #48]	; (80019ec <_Z12process_dhcpv+0x58>)
 80019ba:	f009 f971 	bl	800aca0 <puts>
				break;
 80019be:	e00f      	b.n	80019e0 <_Z12process_dhcpv+0x4c>
		}
		else if(ret == DHCP_FAILED)
 80019c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d105      	bne.n	80019d4 <_Z12process_dhcpv+0x40>
		{
			dhcp_retry++;
 80019c8:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <_Z12process_dhcpv+0x5c>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	3301      	adds	r3, #1
 80019ce:	b2da      	uxtb	r2, r3
 80019d0:	4b07      	ldr	r3, [pc, #28]	; (80019f0 <_Z12process_dhcpv+0x5c>)
 80019d2:	701a      	strb	r2, [r3, #0]
		}


		if(dhcp_retry > 3)
 80019d4:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <_Z12process_dhcpv+0x5c>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b03      	cmp	r3, #3
 80019da:	d9e0      	bls.n	800199e <_Z12process_dhcpv+0xa>
		{
			DHCP_stop();
 80019dc:	f006 fd42 	bl	8008464 <DHCP_stop>
			break;
		}
	}
	return ret;
 80019e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	0800c0c0 	.word	0x0800c0c0
 80019f0:	20001975 	.word	0x20001975

080019f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019f8:	b672      	cpsid	i
}
 80019fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019fc:	e7fe      	b.n	80019fc <Error_Handler+0x8>
	...

08001a00 <_write>:


/*Low layer write(output) function*/
__attribute__ ((used))
int _write(int file, char *ptr, int len)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]

	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, 100);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	2364      	movs	r3, #100	; 0x64
 8001a12:	68b9      	ldr	r1, [r7, #8]
 8001a14:	4803      	ldr	r0, [pc, #12]	; (8001a24 <_write+0x24>)
 8001a16:	f002 fc9f 	bl	8004358 <HAL_UART_Transmit>
    return len;
 8001a1a:	687b      	ldr	r3, [r7, #4]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	200019e0 	.word	0x200019e0

08001a28 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001a2c:	4b1b      	ldr	r3, [pc, #108]	; (8001a9c <MX_SPI1_Init+0x74>)
 8001a2e:	4a1c      	ldr	r2, [pc, #112]	; (8001aa0 <MX_SPI1_Init+0x78>)
 8001a30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a32:	4b1a      	ldr	r3, [pc, #104]	; (8001a9c <MX_SPI1_Init+0x74>)
 8001a34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a3a:	4b18      	ldr	r3, [pc, #96]	; (8001a9c <MX_SPI1_Init+0x74>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a40:	4b16      	ldr	r3, [pc, #88]	; (8001a9c <MX_SPI1_Init+0x74>)
 8001a42:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001a46:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a48:	4b14      	ldr	r3, [pc, #80]	; (8001a9c <MX_SPI1_Init+0x74>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a4e:	4b13      	ldr	r3, [pc, #76]	; (8001a9c <MX_SPI1_Init+0x74>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a54:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <MX_SPI1_Init+0x74>)
 8001a56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a5a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a5c:	4b0f      	ldr	r3, [pc, #60]	; (8001a9c <MX_SPI1_Init+0x74>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a62:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <MX_SPI1_Init+0x74>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a68:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <MX_SPI1_Init+0x74>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a6e:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <MX_SPI1_Init+0x74>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001a74:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <MX_SPI1_Init+0x74>)
 8001a76:	2207      	movs	r2, #7
 8001a78:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a7a:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <MX_SPI1_Init+0x74>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <MX_SPI1_Init+0x74>)
 8001a82:	2208      	movs	r2, #8
 8001a84:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a86:	4805      	ldr	r0, [pc, #20]	; (8001a9c <MX_SPI1_Init+0x74>)
 8001a88:	f001 fcfe 	bl	8003488 <HAL_SPI_Init>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001a92:	f7ff ffaf 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20001978 	.word	0x20001978
 8001aa0:	40013000 	.word	0x40013000

08001aa4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08a      	sub	sp, #40	; 0x28
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	60da      	str	r2, [r3, #12]
 8001aba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a17      	ldr	r2, [pc, #92]	; (8001b20 <HAL_SPI_MspInit+0x7c>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d128      	bne.n	8001b18 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ac6:	4b17      	ldr	r3, [pc, #92]	; (8001b24 <HAL_SPI_MspInit+0x80>)
 8001ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aca:	4a16      	ldr	r2, [pc, #88]	; (8001b24 <HAL_SPI_MspInit+0x80>)
 8001acc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ad0:	6613      	str	r3, [r2, #96]	; 0x60
 8001ad2:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <HAL_SPI_MspInit+0x80>)
 8001ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ad6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ada:	613b      	str	r3, [r7, #16]
 8001adc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ade:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <HAL_SPI_MspInit+0x80>)
 8001ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae2:	4a10      	ldr	r2, [pc, #64]	; (8001b24 <HAL_SPI_MspInit+0x80>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aea:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <HAL_SPI_MspInit+0x80>)
 8001aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001af6:	23e0      	movs	r3, #224	; 0xe0
 8001af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afa:	2302      	movs	r3, #2
 8001afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b02:	2300      	movs	r3, #0
 8001b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b06:	2305      	movs	r3, #5
 8001b08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0a:	f107 0314 	add.w	r3, r7, #20
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b14:	f000 fb56 	bl	80021c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001b18:	bf00      	nop
 8001b1a:	3728      	adds	r7, #40	; 0x28
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40013000 	.word	0x40013000
 8001b24:	40021000 	.word	0x40021000

08001b28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b2e:	4b0f      	ldr	r3, [pc, #60]	; (8001b6c <HAL_MspInit+0x44>)
 8001b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b32:	4a0e      	ldr	r2, [pc, #56]	; (8001b6c <HAL_MspInit+0x44>)
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	6613      	str	r3, [r2, #96]	; 0x60
 8001b3a:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <HAL_MspInit+0x44>)
 8001b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	607b      	str	r3, [r7, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b46:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <HAL_MspInit+0x44>)
 8001b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b4a:	4a08      	ldr	r2, [pc, #32]	; (8001b6c <HAL_MspInit+0x44>)
 8001b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b50:	6593      	str	r3, [r2, #88]	; 0x58
 8001b52:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <HAL_MspInit+0x44>)
 8001b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5a:	603b      	str	r3, [r7, #0]
 8001b5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	40021000 	.word	0x40021000

08001b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b74:	e7fe      	b.n	8001b74 <NMI_Handler+0x4>

08001b76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b7a:	e7fe      	b.n	8001b7a <HardFault_Handler+0x4>

08001b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b80:	e7fe      	b.n	8001b80 <MemManage_Handler+0x4>

08001b82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b82:	b480      	push	{r7}
 8001b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b86:	e7fe      	b.n	8001b86 <BusFault_Handler+0x4>

08001b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b8c:	e7fe      	b.n	8001b8c <UsageFault_Handler+0x4>

08001b8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bbc:	f000 f9de 	bl	8001f7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bc0:	bf00      	nop
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return 1;
 8001bc8:	2301      	movs	r3, #1
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <_kill>:

int _kill(int pid, int sig)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bde:	f008 feb9 	bl	800a954 <__errno>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2216      	movs	r2, #22
 8001be6:	601a      	str	r2, [r3, #0]
  return -1;
 8001be8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <_exit>:

void _exit (int status)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff ffe7 	bl	8001bd4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c06:	e7fe      	b.n	8001c06 <_exit+0x12>

08001c08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
 8001c18:	e00a      	b.n	8001c30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c1a:	f3af 8000 	nop.w
 8001c1e:	4601      	mov	r1, r0
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	1c5a      	adds	r2, r3, #1
 8001c24:	60ba      	str	r2, [r7, #8]
 8001c26:	b2ca      	uxtb	r2, r1
 8001c28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	617b      	str	r3, [r7, #20]
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	dbf0      	blt.n	8001c1a <_read+0x12>
  }

  return len;
 8001c38:	687b      	ldr	r3, [r7, #4]
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3718      	adds	r7, #24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
 8001c62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c6a:	605a      	str	r2, [r3, #4]
  return 0;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <_isatty>:

int _isatty(int file)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c82:	2301      	movs	r3, #1
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
	...

08001cac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cb4:	4a14      	ldr	r2, [pc, #80]	; (8001d08 <_sbrk+0x5c>)
 8001cb6:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <_sbrk+0x60>)
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cc0:	4b13      	ldr	r3, [pc, #76]	; (8001d10 <_sbrk+0x64>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d102      	bne.n	8001cce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cc8:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <_sbrk+0x64>)
 8001cca:	4a12      	ldr	r2, [pc, #72]	; (8001d14 <_sbrk+0x68>)
 8001ccc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cce:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <_sbrk+0x64>)
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d207      	bcs.n	8001cec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cdc:	f008 fe3a 	bl	800a954 <__errno>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	220c      	movs	r2, #12
 8001ce4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cea:	e009      	b.n	8001d00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cec:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <_sbrk+0x64>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cf2:	4b07      	ldr	r3, [pc, #28]	; (8001d10 <_sbrk+0x64>)
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	4a05      	ldr	r2, [pc, #20]	; (8001d10 <_sbrk+0x64>)
 8001cfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3718      	adds	r7, #24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20008000 	.word	0x20008000
 8001d0c:	00000400 	.word	0x00000400
 8001d10:	200019dc 	.word	0x200019dc
 8001d14:	20001af8 	.word	0x20001af8

08001d18 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d1c:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <SystemInit+0x20>)
 8001d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d22:	4a05      	ldr	r2, [pc, #20]	; (8001d38 <SystemInit+0x20>)
 8001d24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d40:	4b22      	ldr	r3, [pc, #136]	; (8001dcc <MX_USART2_UART_Init+0x90>)
 8001d42:	4a23      	ldr	r2, [pc, #140]	; (8001dd0 <MX_USART2_UART_Init+0x94>)
 8001d44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d46:	4b21      	ldr	r3, [pc, #132]	; (8001dcc <MX_USART2_UART_Init+0x90>)
 8001d48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d4e:	4b1f      	ldr	r3, [pc, #124]	; (8001dcc <MX_USART2_UART_Init+0x90>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d54:	4b1d      	ldr	r3, [pc, #116]	; (8001dcc <MX_USART2_UART_Init+0x90>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d5a:	4b1c      	ldr	r3, [pc, #112]	; (8001dcc <MX_USART2_UART_Init+0x90>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d60:	4b1a      	ldr	r3, [pc, #104]	; (8001dcc <MX_USART2_UART_Init+0x90>)
 8001d62:	220c      	movs	r2, #12
 8001d64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d66:	4b19      	ldr	r3, [pc, #100]	; (8001dcc <MX_USART2_UART_Init+0x90>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d6c:	4b17      	ldr	r3, [pc, #92]	; (8001dcc <MX_USART2_UART_Init+0x90>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d72:	4b16      	ldr	r3, [pc, #88]	; (8001dcc <MX_USART2_UART_Init+0x90>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d78:	4b14      	ldr	r3, [pc, #80]	; (8001dcc <MX_USART2_UART_Init+0x90>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d7e:	4b13      	ldr	r3, [pc, #76]	; (8001dcc <MX_USART2_UART_Init+0x90>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d84:	4811      	ldr	r0, [pc, #68]	; (8001dcc <MX_USART2_UART_Init+0x90>)
 8001d86:	f002 fa97 	bl	80042b8 <HAL_UART_Init>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001d90:	f7ff fe30 	bl	80019f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d94:	2100      	movs	r1, #0
 8001d96:	480d      	ldr	r0, [pc, #52]	; (8001dcc <MX_USART2_UART_Init+0x90>)
 8001d98:	f003 f82e 	bl	8004df8 <HAL_UARTEx_SetTxFifoThreshold>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001da2:	f7ff fe27 	bl	80019f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001da6:	2100      	movs	r1, #0
 8001da8:	4808      	ldr	r0, [pc, #32]	; (8001dcc <MX_USART2_UART_Init+0x90>)
 8001daa:	f003 f863 	bl	8004e74 <HAL_UARTEx_SetRxFifoThreshold>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001db4:	f7ff fe1e 	bl	80019f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001db8:	4804      	ldr	r0, [pc, #16]	; (8001dcc <MX_USART2_UART_Init+0x90>)
 8001dba:	f002 ffe4 	bl	8004d86 <HAL_UARTEx_DisableFifoMode>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001dc4:	f7ff fe16 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dc8:	bf00      	nop
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	200019e0 	.word	0x200019e0
 8001dd0:	40004400 	.word	0x40004400

08001dd4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b09a      	sub	sp, #104	; 0x68
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ddc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dec:	f107 0310 	add.w	r3, r7, #16
 8001df0:	2244      	movs	r2, #68	; 0x44
 8001df2:	2100      	movs	r1, #0
 8001df4:	4618      	mov	r0, r3
 8001df6:	f008 fde5 	bl	800a9c4 <memset>
  if(uartHandle->Instance==USART2)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a1f      	ldr	r2, [pc, #124]	; (8001e7c <HAL_UART_MspInit+0xa8>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d136      	bne.n	8001e72 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e04:	2302      	movs	r3, #2
 8001e06:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e0c:	f107 0310 	add.w	r3, r7, #16
 8001e10:	4618      	mov	r0, r3
 8001e12:	f001 f949 	bl	80030a8 <HAL_RCCEx_PeriphCLKConfig>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e1c:	f7ff fdea 	bl	80019f4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e20:	4b17      	ldr	r3, [pc, #92]	; (8001e80 <HAL_UART_MspInit+0xac>)
 8001e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e24:	4a16      	ldr	r2, [pc, #88]	; (8001e80 <HAL_UART_MspInit+0xac>)
 8001e26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e2a:	6593      	str	r3, [r2, #88]	; 0x58
 8001e2c:	4b14      	ldr	r3, [pc, #80]	; (8001e80 <HAL_UART_MspInit+0xac>)
 8001e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e38:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <HAL_UART_MspInit+0xac>)
 8001e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e3c:	4a10      	ldr	r2, [pc, #64]	; (8001e80 <HAL_UART_MspInit+0xac>)
 8001e3e:	f043 0301 	orr.w	r3, r3, #1
 8001e42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e44:	4b0e      	ldr	r3, [pc, #56]	; (8001e80 <HAL_UART_MspInit+0xac>)
 8001e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	60bb      	str	r3, [r7, #8]
 8001e4e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e50:	230c      	movs	r3, #12
 8001e52:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e54:	2302      	movs	r3, #2
 8001e56:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e60:	2307      	movs	r3, #7
 8001e62:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e64:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e68:	4619      	mov	r1, r3
 8001e6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e6e:	f000 f9a9 	bl	80021c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e72:	bf00      	nop
 8001e74:	3768      	adds	r7, #104	; 0x68
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40004400 	.word	0x40004400
 8001e80:	40021000 	.word	0x40021000

08001e84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e84:	480d      	ldr	r0, [pc, #52]	; (8001ebc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e86:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e88:	480d      	ldr	r0, [pc, #52]	; (8001ec0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e8a:	490e      	ldr	r1, [pc, #56]	; (8001ec4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e8c:	4a0e      	ldr	r2, [pc, #56]	; (8001ec8 <LoopForever+0xe>)
  movs r3, #0
 8001e8e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001e90:	e002      	b.n	8001e98 <LoopCopyDataInit>

08001e92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e96:	3304      	adds	r3, #4

08001e98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e9c:	d3f9      	bcc.n	8001e92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e9e:	4a0b      	ldr	r2, [pc, #44]	; (8001ecc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ea0:	4c0b      	ldr	r4, [pc, #44]	; (8001ed0 <LoopForever+0x16>)
  movs r3, #0
 8001ea2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ea4:	e001      	b.n	8001eaa <LoopFillZerobss>

08001ea6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ea6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ea8:	3204      	adds	r2, #4

08001eaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eac:	d3fb      	bcc.n	8001ea6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001eae:	f7ff ff33 	bl	8001d18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eb2:	f008 fd55 	bl	800a960 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001eb6:	f7ff fb97 	bl	80015e8 <main>

08001eba <LoopForever>:

LoopForever:
    b LoopForever
 8001eba:	e7fe      	b.n	8001eba <LoopForever>
  ldr   r0, =_estack
 8001ebc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001ec0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ec4:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 8001ec8:	0800c618 	.word	0x0800c618
  ldr r2, =_sbss
 8001ecc:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 8001ed0:	20001af4 	.word	0x20001af4

08001ed4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ed4:	e7fe      	b.n	8001ed4 <ADC1_2_IRQHandler>

08001ed6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b082      	sub	sp, #8
 8001eda:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001edc:	2300      	movs	r3, #0
 8001ede:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee0:	2003      	movs	r0, #3
 8001ee2:	f000 f93d 	bl	8002160 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ee6:	200f      	movs	r0, #15
 8001ee8:	f000 f80e 	bl	8001f08 <HAL_InitTick>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d002      	beq.n	8001ef8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	71fb      	strb	r3, [r7, #7]
 8001ef6:	e001      	b.n	8001efc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ef8:	f7ff fe16 	bl	8001b28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001efc:	79fb      	ldrb	r3, [r7, #7]

}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
	...

08001f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f10:	2300      	movs	r3, #0
 8001f12:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001f14:	4b16      	ldr	r3, [pc, #88]	; (8001f70 <HAL_InitTick+0x68>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d022      	beq.n	8001f62 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001f1c:	4b15      	ldr	r3, [pc, #84]	; (8001f74 <HAL_InitTick+0x6c>)
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	4b13      	ldr	r3, [pc, #76]	; (8001f70 <HAL_InitTick+0x68>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f28:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f30:	4618      	mov	r0, r3
 8001f32:	f000 f93a 	bl	80021aa <HAL_SYSTICK_Config>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d10f      	bne.n	8001f5c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b0f      	cmp	r3, #15
 8001f40:	d809      	bhi.n	8001f56 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f42:	2200      	movs	r2, #0
 8001f44:	6879      	ldr	r1, [r7, #4]
 8001f46:	f04f 30ff 	mov.w	r0, #4294967295
 8001f4a:	f000 f914 	bl	8002176 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f4e:	4a0a      	ldr	r2, [pc, #40]	; (8001f78 <HAL_InitTick+0x70>)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6013      	str	r3, [r2, #0]
 8001f54:	e007      	b.n	8001f66 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	73fb      	strb	r3, [r7, #15]
 8001f5a:	e004      	b.n	8001f66 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	73fb      	strb	r3, [r7, #15]
 8001f60:	e001      	b.n	8001f66 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3710      	adds	r7, #16
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	20000064 	.word	0x20000064
 8001f74:	2000005c 	.word	0x2000005c
 8001f78:	20000060 	.word	0x20000060

08001f7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f80:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <HAL_IncTick+0x1c>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <HAL_IncTick+0x20>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4413      	add	r3, r2
 8001f8a:	4a03      	ldr	r2, [pc, #12]	; (8001f98 <HAL_IncTick+0x1c>)
 8001f8c:	6013      	str	r3, [r2, #0]
}
 8001f8e:	bf00      	nop
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	20001a70 	.word	0x20001a70
 8001f9c:	20000064 	.word	0x20000064

08001fa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fa4:	4b03      	ldr	r3, [pc, #12]	; (8001fb4 <HAL_GetTick+0x14>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	20001a70 	.word	0x20001a70

08001fb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fc0:	f7ff ffee 	bl	8001fa0 <HAL_GetTick>
 8001fc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd0:	d004      	beq.n	8001fdc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fd2:	4b09      	ldr	r3, [pc, #36]	; (8001ff8 <HAL_Delay+0x40>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	4413      	add	r3, r2
 8001fda:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fdc:	bf00      	nop
 8001fde:	f7ff ffdf 	bl	8001fa0 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d8f7      	bhi.n	8001fde <HAL_Delay+0x26>
  {
  }
}
 8001fee:	bf00      	nop
 8001ff0:	bf00      	nop
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	20000064 	.word	0x20000064

08001ffc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800200c:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <__NVIC_SetPriorityGrouping+0x44>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002018:	4013      	ands	r3, r2
 800201a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002024:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800202c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800202e:	4a04      	ldr	r2, [pc, #16]	; (8002040 <__NVIC_SetPriorityGrouping+0x44>)
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	60d3      	str	r3, [r2, #12]
}
 8002034:	bf00      	nop
 8002036:	3714      	adds	r7, #20
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	e000ed00 	.word	0xe000ed00

08002044 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002048:	4b04      	ldr	r3, [pc, #16]	; (800205c <__NVIC_GetPriorityGrouping+0x18>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	0a1b      	lsrs	r3, r3, #8
 800204e:	f003 0307 	and.w	r3, r3, #7
}
 8002052:	4618      	mov	r0, r3
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	e000ed00 	.word	0xe000ed00

08002060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	6039      	str	r1, [r7, #0]
 800206a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800206c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002070:	2b00      	cmp	r3, #0
 8002072:	db0a      	blt.n	800208a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	b2da      	uxtb	r2, r3
 8002078:	490c      	ldr	r1, [pc, #48]	; (80020ac <__NVIC_SetPriority+0x4c>)
 800207a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207e:	0112      	lsls	r2, r2, #4
 8002080:	b2d2      	uxtb	r2, r2
 8002082:	440b      	add	r3, r1
 8002084:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002088:	e00a      	b.n	80020a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	b2da      	uxtb	r2, r3
 800208e:	4908      	ldr	r1, [pc, #32]	; (80020b0 <__NVIC_SetPriority+0x50>)
 8002090:	79fb      	ldrb	r3, [r7, #7]
 8002092:	f003 030f 	and.w	r3, r3, #15
 8002096:	3b04      	subs	r3, #4
 8002098:	0112      	lsls	r2, r2, #4
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	440b      	add	r3, r1
 800209e:	761a      	strb	r2, [r3, #24]
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	e000e100 	.word	0xe000e100
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b089      	sub	sp, #36	; 0x24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	f1c3 0307 	rsb	r3, r3, #7
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	bf28      	it	cs
 80020d2:	2304      	movcs	r3, #4
 80020d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	3304      	adds	r3, #4
 80020da:	2b06      	cmp	r3, #6
 80020dc:	d902      	bls.n	80020e4 <NVIC_EncodePriority+0x30>
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	3b03      	subs	r3, #3
 80020e2:	e000      	b.n	80020e6 <NVIC_EncodePriority+0x32>
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e8:	f04f 32ff 	mov.w	r2, #4294967295
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43da      	mvns	r2, r3
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	401a      	ands	r2, r3
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	fa01 f303 	lsl.w	r3, r1, r3
 8002106:	43d9      	mvns	r1, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800210c:	4313      	orrs	r3, r2
         );
}
 800210e:	4618      	mov	r0, r3
 8002110:	3724      	adds	r7, #36	; 0x24
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
	...

0800211c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3b01      	subs	r3, #1
 8002128:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800212c:	d301      	bcc.n	8002132 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800212e:	2301      	movs	r3, #1
 8002130:	e00f      	b.n	8002152 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002132:	4a0a      	ldr	r2, [pc, #40]	; (800215c <SysTick_Config+0x40>)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3b01      	subs	r3, #1
 8002138:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800213a:	210f      	movs	r1, #15
 800213c:	f04f 30ff 	mov.w	r0, #4294967295
 8002140:	f7ff ff8e 	bl	8002060 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002144:	4b05      	ldr	r3, [pc, #20]	; (800215c <SysTick_Config+0x40>)
 8002146:	2200      	movs	r2, #0
 8002148:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800214a:	4b04      	ldr	r3, [pc, #16]	; (800215c <SysTick_Config+0x40>)
 800214c:	2207      	movs	r2, #7
 800214e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	e000e010 	.word	0xe000e010

08002160 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f7ff ff47 	bl	8001ffc <__NVIC_SetPriorityGrouping>
}
 800216e:	bf00      	nop
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b086      	sub	sp, #24
 800217a:	af00      	add	r7, sp, #0
 800217c:	4603      	mov	r3, r0
 800217e:	60b9      	str	r1, [r7, #8]
 8002180:	607a      	str	r2, [r7, #4]
 8002182:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002184:	f7ff ff5e 	bl	8002044 <__NVIC_GetPriorityGrouping>
 8002188:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	68b9      	ldr	r1, [r7, #8]
 800218e:	6978      	ldr	r0, [r7, #20]
 8002190:	f7ff ff90 	bl	80020b4 <NVIC_EncodePriority>
 8002194:	4602      	mov	r2, r0
 8002196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800219a:	4611      	mov	r1, r2
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff ff5f 	bl	8002060 <__NVIC_SetPriority>
}
 80021a2:	bf00      	nop
 80021a4:	3718      	adds	r7, #24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b082      	sub	sp, #8
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7ff ffb2 	bl	800211c <SysTick_Config>
 80021b8:	4603      	mov	r3, r0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
	...

080021c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b087      	sub	sp, #28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80021d2:	e15a      	b.n	800248a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	2101      	movs	r1, #1
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	fa01 f303 	lsl.w	r3, r1, r3
 80021e0:	4013      	ands	r3, r2
 80021e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f000 814c 	beq.w	8002484 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 0303 	and.w	r3, r3, #3
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d005      	beq.n	8002204 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002200:	2b02      	cmp	r3, #2
 8002202:	d130      	bne.n	8002266 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	2203      	movs	r2, #3
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	43db      	mvns	r3, r3
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	4013      	ands	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	68da      	ldr	r2, [r3, #12]
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	4313      	orrs	r3, r2
 800222c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800223a:	2201      	movs	r2, #1
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43db      	mvns	r3, r3
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	4013      	ands	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	091b      	lsrs	r3, r3, #4
 8002250:	f003 0201 	and.w	r2, r3, #1
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	4313      	orrs	r3, r2
 800225e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	2b03      	cmp	r3, #3
 8002270:	d017      	beq.n	80022a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	2203      	movs	r2, #3
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43db      	mvns	r3, r3
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	4013      	ands	r3, r2
 8002288:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	689a      	ldr	r2, [r3, #8]
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	4313      	orrs	r3, r2
 800229a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d123      	bne.n	80022f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	08da      	lsrs	r2, r3, #3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	3208      	adds	r2, #8
 80022b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	220f      	movs	r2, #15
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	43db      	mvns	r3, r3
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	4013      	ands	r3, r2
 80022d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	691a      	ldr	r2, [r3, #16]
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	08da      	lsrs	r2, r3, #3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3208      	adds	r2, #8
 80022f0:	6939      	ldr	r1, [r7, #16]
 80022f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	2203      	movs	r2, #3
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43db      	mvns	r3, r3
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	4013      	ands	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f003 0203 	and.w	r2, r3, #3
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	4313      	orrs	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002332:	2b00      	cmp	r3, #0
 8002334:	f000 80a6 	beq.w	8002484 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002338:	4b5b      	ldr	r3, [pc, #364]	; (80024a8 <HAL_GPIO_Init+0x2e4>)
 800233a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800233c:	4a5a      	ldr	r2, [pc, #360]	; (80024a8 <HAL_GPIO_Init+0x2e4>)
 800233e:	f043 0301 	orr.w	r3, r3, #1
 8002342:	6613      	str	r3, [r2, #96]	; 0x60
 8002344:	4b58      	ldr	r3, [pc, #352]	; (80024a8 <HAL_GPIO_Init+0x2e4>)
 8002346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	60bb      	str	r3, [r7, #8]
 800234e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002350:	4a56      	ldr	r2, [pc, #344]	; (80024ac <HAL_GPIO_Init+0x2e8>)
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	089b      	lsrs	r3, r3, #2
 8002356:	3302      	adds	r3, #2
 8002358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800235c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	f003 0303 	and.w	r3, r3, #3
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	220f      	movs	r2, #15
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	4013      	ands	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800237a:	d01f      	beq.n	80023bc <HAL_GPIO_Init+0x1f8>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a4c      	ldr	r2, [pc, #304]	; (80024b0 <HAL_GPIO_Init+0x2ec>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d019      	beq.n	80023b8 <HAL_GPIO_Init+0x1f4>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a4b      	ldr	r2, [pc, #300]	; (80024b4 <HAL_GPIO_Init+0x2f0>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d013      	beq.n	80023b4 <HAL_GPIO_Init+0x1f0>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a4a      	ldr	r2, [pc, #296]	; (80024b8 <HAL_GPIO_Init+0x2f4>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d00d      	beq.n	80023b0 <HAL_GPIO_Init+0x1ec>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a49      	ldr	r2, [pc, #292]	; (80024bc <HAL_GPIO_Init+0x2f8>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d007      	beq.n	80023ac <HAL_GPIO_Init+0x1e8>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a48      	ldr	r2, [pc, #288]	; (80024c0 <HAL_GPIO_Init+0x2fc>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d101      	bne.n	80023a8 <HAL_GPIO_Init+0x1e4>
 80023a4:	2305      	movs	r3, #5
 80023a6:	e00a      	b.n	80023be <HAL_GPIO_Init+0x1fa>
 80023a8:	2306      	movs	r3, #6
 80023aa:	e008      	b.n	80023be <HAL_GPIO_Init+0x1fa>
 80023ac:	2304      	movs	r3, #4
 80023ae:	e006      	b.n	80023be <HAL_GPIO_Init+0x1fa>
 80023b0:	2303      	movs	r3, #3
 80023b2:	e004      	b.n	80023be <HAL_GPIO_Init+0x1fa>
 80023b4:	2302      	movs	r3, #2
 80023b6:	e002      	b.n	80023be <HAL_GPIO_Init+0x1fa>
 80023b8:	2301      	movs	r3, #1
 80023ba:	e000      	b.n	80023be <HAL_GPIO_Init+0x1fa>
 80023bc:	2300      	movs	r3, #0
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	f002 0203 	and.w	r2, r2, #3
 80023c4:	0092      	lsls	r2, r2, #2
 80023c6:	4093      	lsls	r3, r2
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023ce:	4937      	ldr	r1, [pc, #220]	; (80024ac <HAL_GPIO_Init+0x2e8>)
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	089b      	lsrs	r3, r3, #2
 80023d4:	3302      	adds	r3, #2
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023dc:	4b39      	ldr	r3, [pc, #228]	; (80024c4 <HAL_GPIO_Init+0x300>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	43db      	mvns	r3, r3
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	4013      	ands	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d003      	beq.n	8002400 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002400:	4a30      	ldr	r2, [pc, #192]	; (80024c4 <HAL_GPIO_Init+0x300>)
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002406:	4b2f      	ldr	r3, [pc, #188]	; (80024c4 <HAL_GPIO_Init+0x300>)
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	43db      	mvns	r3, r3
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	4013      	ands	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	4313      	orrs	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800242a:	4a26      	ldr	r2, [pc, #152]	; (80024c4 <HAL_GPIO_Init+0x300>)
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002430:	4b24      	ldr	r3, [pc, #144]	; (80024c4 <HAL_GPIO_Init+0x300>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	43db      	mvns	r3, r3
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	4013      	ands	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d003      	beq.n	8002454 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	4313      	orrs	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002454:	4a1b      	ldr	r2, [pc, #108]	; (80024c4 <HAL_GPIO_Init+0x300>)
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800245a:	4b1a      	ldr	r3, [pc, #104]	; (80024c4 <HAL_GPIO_Init+0x300>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	43db      	mvns	r3, r3
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	4013      	ands	r3, r2
 8002468:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	4313      	orrs	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800247e:	4a11      	ldr	r2, [pc, #68]	; (80024c4 <HAL_GPIO_Init+0x300>)
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	3301      	adds	r3, #1
 8002488:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	fa22 f303 	lsr.w	r3, r2, r3
 8002494:	2b00      	cmp	r3, #0
 8002496:	f47f ae9d 	bne.w	80021d4 <HAL_GPIO_Init+0x10>
  }
}
 800249a:	bf00      	nop
 800249c:	bf00      	nop
 800249e:	371c      	adds	r7, #28
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	40021000 	.word	0x40021000
 80024ac:	40010000 	.word	0x40010000
 80024b0:	48000400 	.word	0x48000400
 80024b4:	48000800 	.word	0x48000800
 80024b8:	48000c00 	.word	0x48000c00
 80024bc:	48001000 	.word	0x48001000
 80024c0:	48001400 	.word	0x48001400
 80024c4:	40010400 	.word	0x40010400

080024c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	807b      	strh	r3, [r7, #2]
 80024d4:	4613      	mov	r3, r2
 80024d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024d8:	787b      	ldrb	r3, [r7, #1]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024de:	887a      	ldrh	r2, [r7, #2]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024e4:	e002      	b.n	80024ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024e6:	887a      	ldrh	r2, [r7, #2]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d141      	bne.n	800258a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002506:	4b4b      	ldr	r3, [pc, #300]	; (8002634 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800250e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002512:	d131      	bne.n	8002578 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002514:	4b47      	ldr	r3, [pc, #284]	; (8002634 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002516:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800251a:	4a46      	ldr	r2, [pc, #280]	; (8002634 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800251c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002520:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002524:	4b43      	ldr	r3, [pc, #268]	; (8002634 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800252c:	4a41      	ldr	r2, [pc, #260]	; (8002634 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800252e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002532:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002534:	4b40      	ldr	r3, [pc, #256]	; (8002638 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2232      	movs	r2, #50	; 0x32
 800253a:	fb02 f303 	mul.w	r3, r2, r3
 800253e:	4a3f      	ldr	r2, [pc, #252]	; (800263c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002540:	fba2 2303 	umull	r2, r3, r2, r3
 8002544:	0c9b      	lsrs	r3, r3, #18
 8002546:	3301      	adds	r3, #1
 8002548:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800254a:	e002      	b.n	8002552 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	3b01      	subs	r3, #1
 8002550:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002552:	4b38      	ldr	r3, [pc, #224]	; (8002634 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800255a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800255e:	d102      	bne.n	8002566 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1f2      	bne.n	800254c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002566:	4b33      	ldr	r3, [pc, #204]	; (8002634 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800256e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002572:	d158      	bne.n	8002626 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e057      	b.n	8002628 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002578:	4b2e      	ldr	r3, [pc, #184]	; (8002634 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800257a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800257e:	4a2d      	ldr	r2, [pc, #180]	; (8002634 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002580:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002584:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002588:	e04d      	b.n	8002626 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002590:	d141      	bne.n	8002616 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002592:	4b28      	ldr	r3, [pc, #160]	; (8002634 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800259a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800259e:	d131      	bne.n	8002604 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025a0:	4b24      	ldr	r3, [pc, #144]	; (8002634 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025a6:	4a23      	ldr	r2, [pc, #140]	; (8002634 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80025b0:	4b20      	ldr	r3, [pc, #128]	; (8002634 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025b8:	4a1e      	ldr	r2, [pc, #120]	; (8002634 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80025c0:	4b1d      	ldr	r3, [pc, #116]	; (8002638 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2232      	movs	r2, #50	; 0x32
 80025c6:	fb02 f303 	mul.w	r3, r2, r3
 80025ca:	4a1c      	ldr	r2, [pc, #112]	; (800263c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80025cc:	fba2 2303 	umull	r2, r3, r2, r3
 80025d0:	0c9b      	lsrs	r3, r3, #18
 80025d2:	3301      	adds	r3, #1
 80025d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025d6:	e002      	b.n	80025de <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	3b01      	subs	r3, #1
 80025dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025de:	4b15      	ldr	r3, [pc, #84]	; (8002634 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ea:	d102      	bne.n	80025f2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1f2      	bne.n	80025d8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025f2:	4b10      	ldr	r3, [pc, #64]	; (8002634 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025fe:	d112      	bne.n	8002626 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e011      	b.n	8002628 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002604:	4b0b      	ldr	r3, [pc, #44]	; (8002634 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002606:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800260a:	4a0a      	ldr	r2, [pc, #40]	; (8002634 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800260c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002610:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002614:	e007      	b.n	8002626 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002616:	4b07      	ldr	r3, [pc, #28]	; (8002634 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800261e:	4a05      	ldr	r2, [pc, #20]	; (8002634 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002620:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002624:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3714      	adds	r7, #20
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	40007000 	.word	0x40007000
 8002638:	2000005c 	.word	0x2000005c
 800263c:	431bde83 	.word	0x431bde83

08002640 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b088      	sub	sp, #32
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e306      	b.n	8002c60 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b00      	cmp	r3, #0
 800265c:	d075      	beq.n	800274a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800265e:	4b97      	ldr	r3, [pc, #604]	; (80028bc <HAL_RCC_OscConfig+0x27c>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 030c 	and.w	r3, r3, #12
 8002666:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002668:	4b94      	ldr	r3, [pc, #592]	; (80028bc <HAL_RCC_OscConfig+0x27c>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	f003 0303 	and.w	r3, r3, #3
 8002670:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	2b0c      	cmp	r3, #12
 8002676:	d102      	bne.n	800267e <HAL_RCC_OscConfig+0x3e>
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	2b03      	cmp	r3, #3
 800267c:	d002      	beq.n	8002684 <HAL_RCC_OscConfig+0x44>
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	2b08      	cmp	r3, #8
 8002682:	d10b      	bne.n	800269c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002684:	4b8d      	ldr	r3, [pc, #564]	; (80028bc <HAL_RCC_OscConfig+0x27c>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d05b      	beq.n	8002748 <HAL_RCC_OscConfig+0x108>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d157      	bne.n	8002748 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e2e1      	b.n	8002c60 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026a4:	d106      	bne.n	80026b4 <HAL_RCC_OscConfig+0x74>
 80026a6:	4b85      	ldr	r3, [pc, #532]	; (80028bc <HAL_RCC_OscConfig+0x27c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a84      	ldr	r2, [pc, #528]	; (80028bc <HAL_RCC_OscConfig+0x27c>)
 80026ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b0:	6013      	str	r3, [r2, #0]
 80026b2:	e01d      	b.n	80026f0 <HAL_RCC_OscConfig+0xb0>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026bc:	d10c      	bne.n	80026d8 <HAL_RCC_OscConfig+0x98>
 80026be:	4b7f      	ldr	r3, [pc, #508]	; (80028bc <HAL_RCC_OscConfig+0x27c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a7e      	ldr	r2, [pc, #504]	; (80028bc <HAL_RCC_OscConfig+0x27c>)
 80026c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	4b7c      	ldr	r3, [pc, #496]	; (80028bc <HAL_RCC_OscConfig+0x27c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a7b      	ldr	r2, [pc, #492]	; (80028bc <HAL_RCC_OscConfig+0x27c>)
 80026d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	e00b      	b.n	80026f0 <HAL_RCC_OscConfig+0xb0>
 80026d8:	4b78      	ldr	r3, [pc, #480]	; (80028bc <HAL_RCC_OscConfig+0x27c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a77      	ldr	r2, [pc, #476]	; (80028bc <HAL_RCC_OscConfig+0x27c>)
 80026de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026e2:	6013      	str	r3, [r2, #0]
 80026e4:	4b75      	ldr	r3, [pc, #468]	; (80028bc <HAL_RCC_OscConfig+0x27c>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a74      	ldr	r2, [pc, #464]	; (80028bc <HAL_RCC_OscConfig+0x27c>)
 80026ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d013      	beq.n	8002720 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f8:	f7ff fc52 	bl	8001fa0 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002700:	f7ff fc4e 	bl	8001fa0 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b64      	cmp	r3, #100	; 0x64
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e2a6      	b.n	8002c60 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002712:	4b6a      	ldr	r3, [pc, #424]	; (80028bc <HAL_RCC_OscConfig+0x27c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d0f0      	beq.n	8002700 <HAL_RCC_OscConfig+0xc0>
 800271e:	e014      	b.n	800274a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002720:	f7ff fc3e 	bl	8001fa0 <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002728:	f7ff fc3a 	bl	8001fa0 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b64      	cmp	r3, #100	; 0x64
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e292      	b.n	8002c60 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800273a:	4b60      	ldr	r3, [pc, #384]	; (80028bc <HAL_RCC_OscConfig+0x27c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1f0      	bne.n	8002728 <HAL_RCC_OscConfig+0xe8>
 8002746:	e000      	b.n	800274a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002748:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d075      	beq.n	8002842 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002756:	4b59      	ldr	r3, [pc, #356]	; (80028bc <HAL_RCC_OscConfig+0x27c>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 030c 	and.w	r3, r3, #12
 800275e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002760:	4b56      	ldr	r3, [pc, #344]	; (80028bc <HAL_RCC_OscConfig+0x27c>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	f003 0303 	and.w	r3, r3, #3
 8002768:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	2b0c      	cmp	r3, #12
 800276e:	d102      	bne.n	8002776 <HAL_RCC_OscConfig+0x136>
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	2b02      	cmp	r3, #2
 8002774:	d002      	beq.n	800277c <HAL_RCC_OscConfig+0x13c>
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	2b04      	cmp	r3, #4
 800277a:	d11f      	bne.n	80027bc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800277c:	4b4f      	ldr	r3, [pc, #316]	; (80028bc <HAL_RCC_OscConfig+0x27c>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002784:	2b00      	cmp	r3, #0
 8002786:	d005      	beq.n	8002794 <HAL_RCC_OscConfig+0x154>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d101      	bne.n	8002794 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e265      	b.n	8002c60 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002794:	4b49      	ldr	r3, [pc, #292]	; (80028bc <HAL_RCC_OscConfig+0x27c>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	061b      	lsls	r3, r3, #24
 80027a2:	4946      	ldr	r1, [pc, #280]	; (80028bc <HAL_RCC_OscConfig+0x27c>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80027a8:	4b45      	ldr	r3, [pc, #276]	; (80028c0 <HAL_RCC_OscConfig+0x280>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff fbab 	bl	8001f08 <HAL_InitTick>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d043      	beq.n	8002840 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e251      	b.n	8002c60 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d023      	beq.n	800280c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027c4:	4b3d      	ldr	r3, [pc, #244]	; (80028bc <HAL_RCC_OscConfig+0x27c>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a3c      	ldr	r2, [pc, #240]	; (80028bc <HAL_RCC_OscConfig+0x27c>)
 80027ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d0:	f7ff fbe6 	bl	8001fa0 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027d8:	f7ff fbe2 	bl	8001fa0 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e23a      	b.n	8002c60 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027ea:	4b34      	ldr	r3, [pc, #208]	; (80028bc <HAL_RCC_OscConfig+0x27c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d0f0      	beq.n	80027d8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f6:	4b31      	ldr	r3, [pc, #196]	; (80028bc <HAL_RCC_OscConfig+0x27c>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	061b      	lsls	r3, r3, #24
 8002804:	492d      	ldr	r1, [pc, #180]	; (80028bc <HAL_RCC_OscConfig+0x27c>)
 8002806:	4313      	orrs	r3, r2
 8002808:	604b      	str	r3, [r1, #4]
 800280a:	e01a      	b.n	8002842 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800280c:	4b2b      	ldr	r3, [pc, #172]	; (80028bc <HAL_RCC_OscConfig+0x27c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a2a      	ldr	r2, [pc, #168]	; (80028bc <HAL_RCC_OscConfig+0x27c>)
 8002812:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002816:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002818:	f7ff fbc2 	bl	8001fa0 <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002820:	f7ff fbbe 	bl	8001fa0 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e216      	b.n	8002c60 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002832:	4b22      	ldr	r3, [pc, #136]	; (80028bc <HAL_RCC_OscConfig+0x27c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1f0      	bne.n	8002820 <HAL_RCC_OscConfig+0x1e0>
 800283e:	e000      	b.n	8002842 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002840:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	2b00      	cmp	r3, #0
 800284c:	d041      	beq.n	80028d2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d01c      	beq.n	8002890 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002856:	4b19      	ldr	r3, [pc, #100]	; (80028bc <HAL_RCC_OscConfig+0x27c>)
 8002858:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800285c:	4a17      	ldr	r2, [pc, #92]	; (80028bc <HAL_RCC_OscConfig+0x27c>)
 800285e:	f043 0301 	orr.w	r3, r3, #1
 8002862:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002866:	f7ff fb9b 	bl	8001fa0 <HAL_GetTick>
 800286a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800286c:	e008      	b.n	8002880 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800286e:	f7ff fb97 	bl	8001fa0 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e1ef      	b.n	8002c60 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002880:	4b0e      	ldr	r3, [pc, #56]	; (80028bc <HAL_RCC_OscConfig+0x27c>)
 8002882:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0ef      	beq.n	800286e <HAL_RCC_OscConfig+0x22e>
 800288e:	e020      	b.n	80028d2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002890:	4b0a      	ldr	r3, [pc, #40]	; (80028bc <HAL_RCC_OscConfig+0x27c>)
 8002892:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002896:	4a09      	ldr	r2, [pc, #36]	; (80028bc <HAL_RCC_OscConfig+0x27c>)
 8002898:	f023 0301 	bic.w	r3, r3, #1
 800289c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a0:	f7ff fb7e 	bl	8001fa0 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028a6:	e00d      	b.n	80028c4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028a8:	f7ff fb7a 	bl	8001fa0 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d906      	bls.n	80028c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e1d2      	b.n	8002c60 <HAL_RCC_OscConfig+0x620>
 80028ba:	bf00      	nop
 80028bc:	40021000 	.word	0x40021000
 80028c0:	20000060 	.word	0x20000060
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028c4:	4b8c      	ldr	r3, [pc, #560]	; (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 80028c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1ea      	bne.n	80028a8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0304 	and.w	r3, r3, #4
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f000 80a6 	beq.w	8002a2c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028e0:	2300      	movs	r3, #0
 80028e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80028e4:	4b84      	ldr	r3, [pc, #528]	; (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 80028e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <HAL_RCC_OscConfig+0x2b4>
 80028f0:	2301      	movs	r3, #1
 80028f2:	e000      	b.n	80028f6 <HAL_RCC_OscConfig+0x2b6>
 80028f4:	2300      	movs	r3, #0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00d      	beq.n	8002916 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028fa:	4b7f      	ldr	r3, [pc, #508]	; (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 80028fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028fe:	4a7e      	ldr	r2, [pc, #504]	; (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 8002900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002904:	6593      	str	r3, [r2, #88]	; 0x58
 8002906:	4b7c      	ldr	r3, [pc, #496]	; (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 8002908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800290a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002912:	2301      	movs	r3, #1
 8002914:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002916:	4b79      	ldr	r3, [pc, #484]	; (8002afc <HAL_RCC_OscConfig+0x4bc>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800291e:	2b00      	cmp	r3, #0
 8002920:	d118      	bne.n	8002954 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002922:	4b76      	ldr	r3, [pc, #472]	; (8002afc <HAL_RCC_OscConfig+0x4bc>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a75      	ldr	r2, [pc, #468]	; (8002afc <HAL_RCC_OscConfig+0x4bc>)
 8002928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800292c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800292e:	f7ff fb37 	bl	8001fa0 <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002936:	f7ff fb33 	bl	8001fa0 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e18b      	b.n	8002c60 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002948:	4b6c      	ldr	r3, [pc, #432]	; (8002afc <HAL_RCC_OscConfig+0x4bc>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0f0      	beq.n	8002936 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d108      	bne.n	800296e <HAL_RCC_OscConfig+0x32e>
 800295c:	4b66      	ldr	r3, [pc, #408]	; (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 800295e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002962:	4a65      	ldr	r2, [pc, #404]	; (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 8002964:	f043 0301 	orr.w	r3, r3, #1
 8002968:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800296c:	e024      	b.n	80029b8 <HAL_RCC_OscConfig+0x378>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	2b05      	cmp	r3, #5
 8002974:	d110      	bne.n	8002998 <HAL_RCC_OscConfig+0x358>
 8002976:	4b60      	ldr	r3, [pc, #384]	; (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 8002978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800297c:	4a5e      	ldr	r2, [pc, #376]	; (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 800297e:	f043 0304 	orr.w	r3, r3, #4
 8002982:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002986:	4b5c      	ldr	r3, [pc, #368]	; (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 8002988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800298c:	4a5a      	ldr	r2, [pc, #360]	; (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 800298e:	f043 0301 	orr.w	r3, r3, #1
 8002992:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002996:	e00f      	b.n	80029b8 <HAL_RCC_OscConfig+0x378>
 8002998:	4b57      	ldr	r3, [pc, #348]	; (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 800299a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800299e:	4a56      	ldr	r2, [pc, #344]	; (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 80029a0:	f023 0301 	bic.w	r3, r3, #1
 80029a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029a8:	4b53      	ldr	r3, [pc, #332]	; (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 80029aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ae:	4a52      	ldr	r2, [pc, #328]	; (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 80029b0:	f023 0304 	bic.w	r3, r3, #4
 80029b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d016      	beq.n	80029ee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c0:	f7ff faee 	bl	8001fa0 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029c6:	e00a      	b.n	80029de <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c8:	f7ff faea 	bl	8001fa0 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e140      	b.n	8002c60 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029de:	4b46      	ldr	r3, [pc, #280]	; (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 80029e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d0ed      	beq.n	80029c8 <HAL_RCC_OscConfig+0x388>
 80029ec:	e015      	b.n	8002a1a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ee:	f7ff fad7 	bl	8001fa0 <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029f4:	e00a      	b.n	8002a0c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f6:	f7ff fad3 	bl	8001fa0 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e129      	b.n	8002c60 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a0c:	4b3a      	ldr	r3, [pc, #232]	; (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 8002a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1ed      	bne.n	80029f6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a1a:	7ffb      	ldrb	r3, [r7, #31]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d105      	bne.n	8002a2c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a20:	4b35      	ldr	r3, [pc, #212]	; (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 8002a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a24:	4a34      	ldr	r2, [pc, #208]	; (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 8002a26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a2a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0320 	and.w	r3, r3, #32
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d03c      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d01c      	beq.n	8002a7a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a40:	4b2d      	ldr	r3, [pc, #180]	; (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 8002a42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a46:	4a2c      	ldr	r2, [pc, #176]	; (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 8002a48:	f043 0301 	orr.w	r3, r3, #1
 8002a4c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a50:	f7ff faa6 	bl	8001fa0 <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a58:	f7ff faa2 	bl	8001fa0 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e0fa      	b.n	8002c60 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a6a:	4b23      	ldr	r3, [pc, #140]	; (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 8002a6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d0ef      	beq.n	8002a58 <HAL_RCC_OscConfig+0x418>
 8002a78:	e01b      	b.n	8002ab2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a7a:	4b1f      	ldr	r3, [pc, #124]	; (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 8002a7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a80:	4a1d      	ldr	r2, [pc, #116]	; (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 8002a82:	f023 0301 	bic.w	r3, r3, #1
 8002a86:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a8a:	f7ff fa89 	bl	8001fa0 <HAL_GetTick>
 8002a8e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a92:	f7ff fa85 	bl	8001fa0 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e0dd      	b.n	8002c60 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002aa4:	4b14      	ldr	r3, [pc, #80]	; (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 8002aa6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1ef      	bne.n	8002a92 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 80d1 	beq.w	8002c5e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002abc:	4b0e      	ldr	r3, [pc, #56]	; (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f003 030c 	and.w	r3, r3, #12
 8002ac4:	2b0c      	cmp	r3, #12
 8002ac6:	f000 808b 	beq.w	8002be0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d15e      	bne.n	8002b90 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad2:	4b09      	ldr	r3, [pc, #36]	; (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a08      	ldr	r2, [pc, #32]	; (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 8002ad8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002adc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ade:	f7ff fa5f 	bl	8001fa0 <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ae4:	e00c      	b.n	8002b00 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae6:	f7ff fa5b 	bl	8001fa0 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d905      	bls.n	8002b00 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e0b3      	b.n	8002c60 <HAL_RCC_OscConfig+0x620>
 8002af8:	40021000 	.word	0x40021000
 8002afc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b00:	4b59      	ldr	r3, [pc, #356]	; (8002c68 <HAL_RCC_OscConfig+0x628>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1ec      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b0c:	4b56      	ldr	r3, [pc, #344]	; (8002c68 <HAL_RCC_OscConfig+0x628>)
 8002b0e:	68da      	ldr	r2, [r3, #12]
 8002b10:	4b56      	ldr	r3, [pc, #344]	; (8002c6c <HAL_RCC_OscConfig+0x62c>)
 8002b12:	4013      	ands	r3, r2
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6a11      	ldr	r1, [r2, #32]
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b1c:	3a01      	subs	r2, #1
 8002b1e:	0112      	lsls	r2, r2, #4
 8002b20:	4311      	orrs	r1, r2
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002b26:	0212      	lsls	r2, r2, #8
 8002b28:	4311      	orrs	r1, r2
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b2e:	0852      	lsrs	r2, r2, #1
 8002b30:	3a01      	subs	r2, #1
 8002b32:	0552      	lsls	r2, r2, #21
 8002b34:	4311      	orrs	r1, r2
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b3a:	0852      	lsrs	r2, r2, #1
 8002b3c:	3a01      	subs	r2, #1
 8002b3e:	0652      	lsls	r2, r2, #25
 8002b40:	4311      	orrs	r1, r2
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002b46:	06d2      	lsls	r2, r2, #27
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	4947      	ldr	r1, [pc, #284]	; (8002c68 <HAL_RCC_OscConfig+0x628>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b50:	4b45      	ldr	r3, [pc, #276]	; (8002c68 <HAL_RCC_OscConfig+0x628>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a44      	ldr	r2, [pc, #272]	; (8002c68 <HAL_RCC_OscConfig+0x628>)
 8002b56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b5a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b5c:	4b42      	ldr	r3, [pc, #264]	; (8002c68 <HAL_RCC_OscConfig+0x628>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	4a41      	ldr	r2, [pc, #260]	; (8002c68 <HAL_RCC_OscConfig+0x628>)
 8002b62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b66:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b68:	f7ff fa1a 	bl	8001fa0 <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b70:	f7ff fa16 	bl	8001fa0 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e06e      	b.n	8002c60 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b82:	4b39      	ldr	r3, [pc, #228]	; (8002c68 <HAL_RCC_OscConfig+0x628>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0f0      	beq.n	8002b70 <HAL_RCC_OscConfig+0x530>
 8002b8e:	e066      	b.n	8002c5e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b90:	4b35      	ldr	r3, [pc, #212]	; (8002c68 <HAL_RCC_OscConfig+0x628>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a34      	ldr	r2, [pc, #208]	; (8002c68 <HAL_RCC_OscConfig+0x628>)
 8002b96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b9a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002b9c:	4b32      	ldr	r3, [pc, #200]	; (8002c68 <HAL_RCC_OscConfig+0x628>)
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	4a31      	ldr	r2, [pc, #196]	; (8002c68 <HAL_RCC_OscConfig+0x628>)
 8002ba2:	f023 0303 	bic.w	r3, r3, #3
 8002ba6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002ba8:	4b2f      	ldr	r3, [pc, #188]	; (8002c68 <HAL_RCC_OscConfig+0x628>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	4a2e      	ldr	r2, [pc, #184]	; (8002c68 <HAL_RCC_OscConfig+0x628>)
 8002bae:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bb6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb8:	f7ff f9f2 	bl	8001fa0 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bc0:	f7ff f9ee 	bl	8001fa0 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e046      	b.n	8002c60 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bd2:	4b25      	ldr	r3, [pc, #148]	; (8002c68 <HAL_RCC_OscConfig+0x628>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1f0      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x580>
 8002bde:	e03e      	b.n	8002c5e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	69db      	ldr	r3, [r3, #28]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d101      	bne.n	8002bec <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e039      	b.n	8002c60 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002bec:	4b1e      	ldr	r3, [pc, #120]	; (8002c68 <HAL_RCC_OscConfig+0x628>)
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f003 0203 	and.w	r2, r3, #3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d12c      	bne.n	8002c5a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d123      	bne.n	8002c5a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d11b      	bne.n	8002c5a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d113      	bne.n	8002c5a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3c:	085b      	lsrs	r3, r3, #1
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d109      	bne.n	8002c5a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c50:	085b      	lsrs	r3, r3, #1
 8002c52:	3b01      	subs	r3, #1
 8002c54:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d001      	beq.n	8002c5e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e000      	b.n	8002c60 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3720      	adds	r7, #32
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	019f800c 	.word	0x019f800c

08002c70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d101      	bne.n	8002c88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e11e      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c88:	4b91      	ldr	r3, [pc, #580]	; (8002ed0 <HAL_RCC_ClockConfig+0x260>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 030f 	and.w	r3, r3, #15
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d910      	bls.n	8002cb8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c96:	4b8e      	ldr	r3, [pc, #568]	; (8002ed0 <HAL_RCC_ClockConfig+0x260>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f023 020f 	bic.w	r2, r3, #15
 8002c9e:	498c      	ldr	r1, [pc, #560]	; (8002ed0 <HAL_RCC_ClockConfig+0x260>)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ca6:	4b8a      	ldr	r3, [pc, #552]	; (8002ed0 <HAL_RCC_ClockConfig+0x260>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 030f 	and.w	r3, r3, #15
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d001      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e106      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d073      	beq.n	8002dac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	2b03      	cmp	r3, #3
 8002cca:	d129      	bne.n	8002d20 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ccc:	4b81      	ldr	r3, [pc, #516]	; (8002ed4 <HAL_RCC_ClockConfig+0x264>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e0f4      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002cdc:	f000 f99e 	bl	800301c <RCC_GetSysClockFreqFromPLLSource>
 8002ce0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	4a7c      	ldr	r2, [pc, #496]	; (8002ed8 <HAL_RCC_ClockConfig+0x268>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d93f      	bls.n	8002d6a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002cea:	4b7a      	ldr	r3, [pc, #488]	; (8002ed4 <HAL_RCC_ClockConfig+0x264>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d009      	beq.n	8002d0a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d033      	beq.n	8002d6a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d12f      	bne.n	8002d6a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d0a:	4b72      	ldr	r3, [pc, #456]	; (8002ed4 <HAL_RCC_ClockConfig+0x264>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d12:	4a70      	ldr	r2, [pc, #448]	; (8002ed4 <HAL_RCC_ClockConfig+0x264>)
 8002d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d18:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002d1a:	2380      	movs	r3, #128	; 0x80
 8002d1c:	617b      	str	r3, [r7, #20]
 8002d1e:	e024      	b.n	8002d6a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d107      	bne.n	8002d38 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d28:	4b6a      	ldr	r3, [pc, #424]	; (8002ed4 <HAL_RCC_ClockConfig+0x264>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d109      	bne.n	8002d48 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e0c6      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d38:	4b66      	ldr	r3, [pc, #408]	; (8002ed4 <HAL_RCC_ClockConfig+0x264>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d101      	bne.n	8002d48 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e0be      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002d48:	f000 f8ce 	bl	8002ee8 <HAL_RCC_GetSysClockFreq>
 8002d4c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	4a61      	ldr	r2, [pc, #388]	; (8002ed8 <HAL_RCC_ClockConfig+0x268>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d909      	bls.n	8002d6a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d56:	4b5f      	ldr	r3, [pc, #380]	; (8002ed4 <HAL_RCC_ClockConfig+0x264>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d5e:	4a5d      	ldr	r2, [pc, #372]	; (8002ed4 <HAL_RCC_ClockConfig+0x264>)
 8002d60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d64:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002d66:	2380      	movs	r3, #128	; 0x80
 8002d68:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d6a:	4b5a      	ldr	r3, [pc, #360]	; (8002ed4 <HAL_RCC_ClockConfig+0x264>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f023 0203 	bic.w	r2, r3, #3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	4957      	ldr	r1, [pc, #348]	; (8002ed4 <HAL_RCC_ClockConfig+0x264>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d7c:	f7ff f910 	bl	8001fa0 <HAL_GetTick>
 8002d80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d82:	e00a      	b.n	8002d9a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d84:	f7ff f90c 	bl	8001fa0 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e095      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d9a:	4b4e      	ldr	r3, [pc, #312]	; (8002ed4 <HAL_RCC_ClockConfig+0x264>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f003 020c 	and.w	r2, r3, #12
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d1eb      	bne.n	8002d84 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d023      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d005      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dc4:	4b43      	ldr	r3, [pc, #268]	; (8002ed4 <HAL_RCC_ClockConfig+0x264>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	4a42      	ldr	r2, [pc, #264]	; (8002ed4 <HAL_RCC_ClockConfig+0x264>)
 8002dca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002dce:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0308 	and.w	r3, r3, #8
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d007      	beq.n	8002dec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002ddc:	4b3d      	ldr	r3, [pc, #244]	; (8002ed4 <HAL_RCC_ClockConfig+0x264>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002de4:	4a3b      	ldr	r2, [pc, #236]	; (8002ed4 <HAL_RCC_ClockConfig+0x264>)
 8002de6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002dea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dec:	4b39      	ldr	r3, [pc, #228]	; (8002ed4 <HAL_RCC_ClockConfig+0x264>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	4936      	ldr	r1, [pc, #216]	; (8002ed4 <HAL_RCC_ClockConfig+0x264>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	608b      	str	r3, [r1, #8]
 8002dfe:	e008      	b.n	8002e12 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	2b80      	cmp	r3, #128	; 0x80
 8002e04:	d105      	bne.n	8002e12 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002e06:	4b33      	ldr	r3, [pc, #204]	; (8002ed4 <HAL_RCC_ClockConfig+0x264>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	4a32      	ldr	r2, [pc, #200]	; (8002ed4 <HAL_RCC_ClockConfig+0x264>)
 8002e0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e10:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e12:	4b2f      	ldr	r3, [pc, #188]	; (8002ed0 <HAL_RCC_ClockConfig+0x260>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d21d      	bcs.n	8002e5c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e20:	4b2b      	ldr	r3, [pc, #172]	; (8002ed0 <HAL_RCC_ClockConfig+0x260>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f023 020f 	bic.w	r2, r3, #15
 8002e28:	4929      	ldr	r1, [pc, #164]	; (8002ed0 <HAL_RCC_ClockConfig+0x260>)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e30:	f7ff f8b6 	bl	8001fa0 <HAL_GetTick>
 8002e34:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e36:	e00a      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e38:	f7ff f8b2 	bl	8001fa0 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e03b      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e4e:	4b20      	ldr	r3, [pc, #128]	; (8002ed0 <HAL_RCC_ClockConfig+0x260>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d1ed      	bne.n	8002e38 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d008      	beq.n	8002e7a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e68:	4b1a      	ldr	r3, [pc, #104]	; (8002ed4 <HAL_RCC_ClockConfig+0x264>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	4917      	ldr	r1, [pc, #92]	; (8002ed4 <HAL_RCC_ClockConfig+0x264>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0308 	and.w	r3, r3, #8
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d009      	beq.n	8002e9a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e86:	4b13      	ldr	r3, [pc, #76]	; (8002ed4 <HAL_RCC_ClockConfig+0x264>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	490f      	ldr	r1, [pc, #60]	; (8002ed4 <HAL_RCC_ClockConfig+0x264>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e9a:	f000 f825 	bl	8002ee8 <HAL_RCC_GetSysClockFreq>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	4b0c      	ldr	r3, [pc, #48]	; (8002ed4 <HAL_RCC_ClockConfig+0x264>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	091b      	lsrs	r3, r3, #4
 8002ea6:	f003 030f 	and.w	r3, r3, #15
 8002eaa:	490c      	ldr	r1, [pc, #48]	; (8002edc <HAL_RCC_ClockConfig+0x26c>)
 8002eac:	5ccb      	ldrb	r3, [r1, r3]
 8002eae:	f003 031f 	and.w	r3, r3, #31
 8002eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb6:	4a0a      	ldr	r2, [pc, #40]	; (8002ee0 <HAL_RCC_ClockConfig+0x270>)
 8002eb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002eba:	4b0a      	ldr	r3, [pc, #40]	; (8002ee4 <HAL_RCC_ClockConfig+0x274>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7ff f822 	bl	8001f08 <HAL_InitTick>
 8002ec4:	4603      	mov	r3, r0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3718      	adds	r7, #24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	40022000 	.word	0x40022000
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	04c4b400 	.word	0x04c4b400
 8002edc:	0800c408 	.word	0x0800c408
 8002ee0:	2000005c 	.word	0x2000005c
 8002ee4:	20000060 	.word	0x20000060

08002ee8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b087      	sub	sp, #28
 8002eec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002eee:	4b2c      	ldr	r3, [pc, #176]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f003 030c 	and.w	r3, r3, #12
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	d102      	bne.n	8002f00 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002efa:	4b2a      	ldr	r3, [pc, #168]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002efc:	613b      	str	r3, [r7, #16]
 8002efe:	e047      	b.n	8002f90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002f00:	4b27      	ldr	r3, [pc, #156]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f003 030c 	and.w	r3, r3, #12
 8002f08:	2b08      	cmp	r3, #8
 8002f0a:	d102      	bne.n	8002f12 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f0c:	4b26      	ldr	r3, [pc, #152]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f0e:	613b      	str	r3, [r7, #16]
 8002f10:	e03e      	b.n	8002f90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002f12:	4b23      	ldr	r3, [pc, #140]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f003 030c 	and.w	r3, r3, #12
 8002f1a:	2b0c      	cmp	r3, #12
 8002f1c:	d136      	bne.n	8002f8c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f1e:	4b20      	ldr	r3, [pc, #128]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	f003 0303 	and.w	r3, r3, #3
 8002f26:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f28:	4b1d      	ldr	r3, [pc, #116]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	091b      	lsrs	r3, r3, #4
 8002f2e:	f003 030f 	and.w	r3, r3, #15
 8002f32:	3301      	adds	r3, #1
 8002f34:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2b03      	cmp	r3, #3
 8002f3a:	d10c      	bne.n	8002f56 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f3c:	4a1a      	ldr	r2, [pc, #104]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f44:	4a16      	ldr	r2, [pc, #88]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f46:	68d2      	ldr	r2, [r2, #12]
 8002f48:	0a12      	lsrs	r2, r2, #8
 8002f4a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002f4e:	fb02 f303 	mul.w	r3, r2, r3
 8002f52:	617b      	str	r3, [r7, #20]
      break;
 8002f54:	e00c      	b.n	8002f70 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f56:	4a13      	ldr	r2, [pc, #76]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f5e:	4a10      	ldr	r2, [pc, #64]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f60:	68d2      	ldr	r2, [r2, #12]
 8002f62:	0a12      	lsrs	r2, r2, #8
 8002f64:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002f68:	fb02 f303 	mul.w	r3, r2, r3
 8002f6c:	617b      	str	r3, [r7, #20]
      break;
 8002f6e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f70:	4b0b      	ldr	r3, [pc, #44]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	0e5b      	lsrs	r3, r3, #25
 8002f76:	f003 0303 	and.w	r3, r3, #3
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f88:	613b      	str	r3, [r7, #16]
 8002f8a:	e001      	b.n	8002f90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002f90:	693b      	ldr	r3, [r7, #16]
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	371c      	adds	r7, #28
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	00f42400 	.word	0x00f42400
 8002fa8:	007a1200 	.word	0x007a1200

08002fac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fb0:	4b03      	ldr	r3, [pc, #12]	; (8002fc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	2000005c 	.word	0x2000005c

08002fc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002fc8:	f7ff fff0 	bl	8002fac <HAL_RCC_GetHCLKFreq>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	4b06      	ldr	r3, [pc, #24]	; (8002fe8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	0a1b      	lsrs	r3, r3, #8
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	4904      	ldr	r1, [pc, #16]	; (8002fec <HAL_RCC_GetPCLK1Freq+0x28>)
 8002fda:	5ccb      	ldrb	r3, [r1, r3]
 8002fdc:	f003 031f 	and.w	r3, r3, #31
 8002fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	0800c418 	.word	0x0800c418

08002ff0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ff4:	f7ff ffda 	bl	8002fac <HAL_RCC_GetHCLKFreq>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	4b06      	ldr	r3, [pc, #24]	; (8003014 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	0adb      	lsrs	r3, r3, #11
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	4904      	ldr	r1, [pc, #16]	; (8003018 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003006:	5ccb      	ldrb	r3, [r1, r3]
 8003008:	f003 031f 	and.w	r3, r3, #31
 800300c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003010:	4618      	mov	r0, r3
 8003012:	bd80      	pop	{r7, pc}
 8003014:	40021000 	.word	0x40021000
 8003018:	0800c418 	.word	0x0800c418

0800301c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800301c:	b480      	push	{r7}
 800301e:	b087      	sub	sp, #28
 8003020:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003022:	4b1e      	ldr	r3, [pc, #120]	; (800309c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800302c:	4b1b      	ldr	r3, [pc, #108]	; (800309c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	091b      	lsrs	r3, r3, #4
 8003032:	f003 030f 	and.w	r3, r3, #15
 8003036:	3301      	adds	r3, #1
 8003038:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	2b03      	cmp	r3, #3
 800303e:	d10c      	bne.n	800305a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003040:	4a17      	ldr	r2, [pc, #92]	; (80030a0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	fbb2 f3f3 	udiv	r3, r2, r3
 8003048:	4a14      	ldr	r2, [pc, #80]	; (800309c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800304a:	68d2      	ldr	r2, [r2, #12]
 800304c:	0a12      	lsrs	r2, r2, #8
 800304e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003052:	fb02 f303 	mul.w	r3, r2, r3
 8003056:	617b      	str	r3, [r7, #20]
    break;
 8003058:	e00c      	b.n	8003074 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800305a:	4a12      	ldr	r2, [pc, #72]	; (80030a4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003062:	4a0e      	ldr	r2, [pc, #56]	; (800309c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003064:	68d2      	ldr	r2, [r2, #12]
 8003066:	0a12      	lsrs	r2, r2, #8
 8003068:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800306c:	fb02 f303 	mul.w	r3, r2, r3
 8003070:	617b      	str	r3, [r7, #20]
    break;
 8003072:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003074:	4b09      	ldr	r3, [pc, #36]	; (800309c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	0e5b      	lsrs	r3, r3, #25
 800307a:	f003 0303 	and.w	r3, r3, #3
 800307e:	3301      	adds	r3, #1
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	fbb2 f3f3 	udiv	r3, r2, r3
 800308c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800308e:	687b      	ldr	r3, [r7, #4]
}
 8003090:	4618      	mov	r0, r3
 8003092:	371c      	adds	r7, #28
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr
 800309c:	40021000 	.word	0x40021000
 80030a0:	007a1200 	.word	0x007a1200
 80030a4:	00f42400 	.word	0x00f42400

080030a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030b0:	2300      	movs	r3, #0
 80030b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030b4:	2300      	movs	r3, #0
 80030b6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 8098 	beq.w	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030c6:	2300      	movs	r3, #0
 80030c8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ca:	4b43      	ldr	r3, [pc, #268]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10d      	bne.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030d6:	4b40      	ldr	r3, [pc, #256]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030da:	4a3f      	ldr	r2, [pc, #252]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e0:	6593      	str	r3, [r2, #88]	; 0x58
 80030e2:	4b3d      	ldr	r3, [pc, #244]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ea:	60bb      	str	r3, [r7, #8]
 80030ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ee:	2301      	movs	r3, #1
 80030f0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030f2:	4b3a      	ldr	r3, [pc, #232]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a39      	ldr	r2, [pc, #228]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80030f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030fe:	f7fe ff4f 	bl	8001fa0 <HAL_GetTick>
 8003102:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003104:	e009      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003106:	f7fe ff4b 	bl	8001fa0 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d902      	bls.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	74fb      	strb	r3, [r7, #19]
        break;
 8003118:	e005      	b.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800311a:	4b30      	ldr	r3, [pc, #192]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003122:	2b00      	cmp	r3, #0
 8003124:	d0ef      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003126:	7cfb      	ldrb	r3, [r7, #19]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d159      	bne.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800312c:	4b2a      	ldr	r3, [pc, #168]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800312e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003136:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d01e      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	429a      	cmp	r2, r3
 8003146:	d019      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003148:	4b23      	ldr	r3, [pc, #140]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800314a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800314e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003152:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003154:	4b20      	ldr	r3, [pc, #128]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315a:	4a1f      	ldr	r2, [pc, #124]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800315c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003160:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003164:	4b1c      	ldr	r3, [pc, #112]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800316a:	4a1b      	ldr	r2, [pc, #108]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800316c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003170:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003174:	4a18      	ldr	r2, [pc, #96]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d016      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003186:	f7fe ff0b 	bl	8001fa0 <HAL_GetTick>
 800318a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800318c:	e00b      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800318e:	f7fe ff07 	bl	8001fa0 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	f241 3288 	movw	r2, #5000	; 0x1388
 800319c:	4293      	cmp	r3, r2
 800319e:	d902      	bls.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	74fb      	strb	r3, [r7, #19]
            break;
 80031a4:	e006      	b.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031a6:	4b0c      	ldr	r3, [pc, #48]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d0ec      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80031b4:	7cfb      	ldrb	r3, [r7, #19]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10b      	bne.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031ba:	4b07      	ldr	r3, [pc, #28]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c8:	4903      	ldr	r1, [pc, #12]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80031d0:	e008      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031d2:	7cfb      	ldrb	r3, [r7, #19]
 80031d4:	74bb      	strb	r3, [r7, #18]
 80031d6:	e005      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80031d8:	40021000 	.word	0x40021000
 80031dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031e0:	7cfb      	ldrb	r3, [r7, #19]
 80031e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031e4:	7c7b      	ldrb	r3, [r7, #17]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d105      	bne.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ea:	4ba6      	ldr	r3, [pc, #664]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ee:	4aa5      	ldr	r2, [pc, #660]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00a      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003202:	4ba0      	ldr	r3, [pc, #640]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003208:	f023 0203 	bic.w	r2, r3, #3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	499c      	ldr	r1, [pc, #624]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003212:	4313      	orrs	r3, r2
 8003214:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00a      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003224:	4b97      	ldr	r3, [pc, #604]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322a:	f023 020c 	bic.w	r2, r3, #12
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	4994      	ldr	r1, [pc, #592]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003234:	4313      	orrs	r3, r2
 8003236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0304 	and.w	r3, r3, #4
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00a      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003246:	4b8f      	ldr	r3, [pc, #572]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	498b      	ldr	r1, [pc, #556]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003256:	4313      	orrs	r3, r2
 8003258:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0308 	and.w	r3, r3, #8
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00a      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003268:	4b86      	ldr	r3, [pc, #536]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800326a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	4983      	ldr	r1, [pc, #524]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003278:	4313      	orrs	r3, r2
 800327a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0320 	and.w	r3, r3, #32
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00a      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800328a:	4b7e      	ldr	r3, [pc, #504]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800328c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003290:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	497a      	ldr	r1, [pc, #488]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800329a:	4313      	orrs	r3, r2
 800329c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00a      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032ac:	4b75      	ldr	r3, [pc, #468]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	4972      	ldr	r1, [pc, #456]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00a      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032ce:	4b6d      	ldr	r3, [pc, #436]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	69db      	ldr	r3, [r3, #28]
 80032dc:	4969      	ldr	r1, [pc, #420]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00a      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032f0:	4b64      	ldr	r3, [pc, #400]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a1b      	ldr	r3, [r3, #32]
 80032fe:	4961      	ldr	r1, [pc, #388]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003300:	4313      	orrs	r3, r2
 8003302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00a      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003312:	4b5c      	ldr	r3, [pc, #368]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003318:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003320:	4958      	ldr	r1, [pc, #352]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003322:	4313      	orrs	r3, r2
 8003324:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003330:	2b00      	cmp	r3, #0
 8003332:	d015      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003334:	4b53      	ldr	r3, [pc, #332]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003342:	4950      	ldr	r1, [pc, #320]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003344:	4313      	orrs	r3, r2
 8003346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003352:	d105      	bne.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003354:	4b4b      	ldr	r3, [pc, #300]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	4a4a      	ldr	r2, [pc, #296]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800335a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800335e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003368:	2b00      	cmp	r3, #0
 800336a:	d015      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800336c:	4b45      	ldr	r3, [pc, #276]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800336e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003372:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337a:	4942      	ldr	r1, [pc, #264]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800337c:	4313      	orrs	r3, r2
 800337e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003386:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800338a:	d105      	bne.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800338c:	4b3d      	ldr	r3, [pc, #244]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	4a3c      	ldr	r2, [pc, #240]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003392:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003396:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d015      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80033a4:	4b37      	ldr	r3, [pc, #220]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033aa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b2:	4934      	ldr	r1, [pc, #208]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033c2:	d105      	bne.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033c4:	4b2f      	ldr	r3, [pc, #188]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	4a2e      	ldr	r2, [pc, #184]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033ce:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d015      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033dc:	4b29      	ldr	r3, [pc, #164]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ea:	4926      	ldr	r1, [pc, #152]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033fa:	d105      	bne.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033fc:	4b21      	ldr	r3, [pc, #132]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	4a20      	ldr	r2, [pc, #128]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003402:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003406:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d015      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003414:	4b1b      	ldr	r3, [pc, #108]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800341a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003422:	4918      	ldr	r1, [pc, #96]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003424:	4313      	orrs	r3, r2
 8003426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003432:	d105      	bne.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003434:	4b13      	ldr	r3, [pc, #76]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	4a12      	ldr	r2, [pc, #72]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800343a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800343e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d015      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800344c:	4b0d      	ldr	r3, [pc, #52]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800344e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003452:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800345a:	490a      	ldr	r1, [pc, #40]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800345c:	4313      	orrs	r3, r2
 800345e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003466:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800346a:	d105      	bne.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800346c:	4b05      	ldr	r3, [pc, #20]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	4a04      	ldr	r2, [pc, #16]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003472:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003476:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003478:	7cbb      	ldrb	r3, [r7, #18]
}
 800347a:	4618      	mov	r0, r3
 800347c:	3718      	adds	r7, #24
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	40021000 	.word	0x40021000

08003488 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e09d      	b.n	80035d6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d108      	bne.n	80034b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034aa:	d009      	beq.n	80034c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	61da      	str	r2, [r3, #28]
 80034b2:	e005      	b.n	80034c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d106      	bne.n	80034e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7fe fae2 	bl	8001aa4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2202      	movs	r2, #2
 80034e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034f6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003500:	d902      	bls.n	8003508 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003502:	2300      	movs	r3, #0
 8003504:	60fb      	str	r3, [r7, #12]
 8003506:	e002      	b.n	800350e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003508:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800350c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003516:	d007      	beq.n	8003528 <HAL_SPI_Init+0xa0>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003520:	d002      	beq.n	8003528 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003538:	431a      	orrs	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	431a      	orrs	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	431a      	orrs	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003556:	431a      	orrs	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	69db      	ldr	r3, [r3, #28]
 800355c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003560:	431a      	orrs	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800356a:	ea42 0103 	orr.w	r1, r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003572:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	430a      	orrs	r2, r1
 800357c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	0c1b      	lsrs	r3, r3, #16
 8003584:	f003 0204 	and.w	r2, r3, #4
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358c:	f003 0310 	and.w	r3, r3, #16
 8003590:	431a      	orrs	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	431a      	orrs	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80035a4:	ea42 0103 	orr.w	r1, r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	69da      	ldr	r2, [r3, #28]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b088      	sub	sp, #32
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	60f8      	str	r0, [r7, #12]
 80035e6:	60b9      	str	r1, [r7, #8]
 80035e8:	603b      	str	r3, [r7, #0]
 80035ea:	4613      	mov	r3, r2
 80035ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80035ee:	2300      	movs	r3, #0
 80035f0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d101      	bne.n	8003600 <HAL_SPI_Transmit+0x22>
 80035fc:	2302      	movs	r3, #2
 80035fe:	e158      	b.n	80038b2 <HAL_SPI_Transmit+0x2d4>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003608:	f7fe fcca 	bl	8001fa0 <HAL_GetTick>
 800360c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800360e:	88fb      	ldrh	r3, [r7, #6]
 8003610:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b01      	cmp	r3, #1
 800361c:	d002      	beq.n	8003624 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800361e:	2302      	movs	r3, #2
 8003620:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003622:	e13d      	b.n	80038a0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d002      	beq.n	8003630 <HAL_SPI_Transmit+0x52>
 800362a:	88fb      	ldrh	r3, [r7, #6]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d102      	bne.n	8003636 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003634:	e134      	b.n	80038a0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2203      	movs	r2, #3
 800363a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	88fa      	ldrh	r2, [r7, #6]
 800364e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	88fa      	ldrh	r2, [r7, #6]
 8003654:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003680:	d10f      	bne.n	80036a2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003690:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036a0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ac:	2b40      	cmp	r3, #64	; 0x40
 80036ae:	d007      	beq.n	80036c0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036c8:	d94b      	bls.n	8003762 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d002      	beq.n	80036d8 <HAL_SPI_Transmit+0xfa>
 80036d2:	8afb      	ldrh	r3, [r7, #22]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d13e      	bne.n	8003756 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036dc:	881a      	ldrh	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e8:	1c9a      	adds	r2, r3, #2
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	3b01      	subs	r3, #1
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80036fc:	e02b      	b.n	8003756 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b02      	cmp	r3, #2
 800370a:	d112      	bne.n	8003732 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003710:	881a      	ldrh	r2, [r3, #0]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371c:	1c9a      	adds	r2, r3, #2
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003726:	b29b      	uxth	r3, r3
 8003728:	3b01      	subs	r3, #1
 800372a:	b29a      	uxth	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003730:	e011      	b.n	8003756 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003732:	f7fe fc35 	bl	8001fa0 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	429a      	cmp	r2, r3
 8003740:	d803      	bhi.n	800374a <HAL_SPI_Transmit+0x16c>
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003748:	d102      	bne.n	8003750 <HAL_SPI_Transmit+0x172>
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d102      	bne.n	8003756 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003754:	e0a4      	b.n	80038a0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800375a:	b29b      	uxth	r3, r3
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1ce      	bne.n	80036fe <HAL_SPI_Transmit+0x120>
 8003760:	e07c      	b.n	800385c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d002      	beq.n	8003770 <HAL_SPI_Transmit+0x192>
 800376a:	8afb      	ldrh	r3, [r7, #22]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d170      	bne.n	8003852 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003774:	b29b      	uxth	r3, r3
 8003776:	2b01      	cmp	r3, #1
 8003778:	d912      	bls.n	80037a0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377e:	881a      	ldrh	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378a:	1c9a      	adds	r2, r3, #2
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003794:	b29b      	uxth	r3, r3
 8003796:	3b02      	subs	r3, #2
 8003798:	b29a      	uxth	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800379e:	e058      	b.n	8003852 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	330c      	adds	r3, #12
 80037aa:	7812      	ldrb	r2, [r2, #0]
 80037ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b2:	1c5a      	adds	r2, r3, #1
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037bc:	b29b      	uxth	r3, r3
 80037be:	3b01      	subs	r3, #1
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80037c6:	e044      	b.n	8003852 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d12b      	bne.n	800382e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037da:	b29b      	uxth	r3, r3
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d912      	bls.n	8003806 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e4:	881a      	ldrh	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f0:	1c9a      	adds	r2, r3, #2
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	3b02      	subs	r3, #2
 80037fe:	b29a      	uxth	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003804:	e025      	b.n	8003852 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	330c      	adds	r3, #12
 8003810:	7812      	ldrb	r2, [r2, #0]
 8003812:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003818:	1c5a      	adds	r2, r3, #1
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003822:	b29b      	uxth	r3, r3
 8003824:	3b01      	subs	r3, #1
 8003826:	b29a      	uxth	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800382c:	e011      	b.n	8003852 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800382e:	f7fe fbb7 	bl	8001fa0 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	429a      	cmp	r2, r3
 800383c:	d803      	bhi.n	8003846 <HAL_SPI_Transmit+0x268>
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003844:	d102      	bne.n	800384c <HAL_SPI_Transmit+0x26e>
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d102      	bne.n	8003852 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003850:	e026      	b.n	80038a0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003856:	b29b      	uxth	r3, r3
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1b5      	bne.n	80037c8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	6839      	ldr	r1, [r7, #0]
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	f000 fce3 	bl	800422c <SPI_EndRxTxTransaction>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d002      	beq.n	8003872 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2220      	movs	r2, #32
 8003870:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10a      	bne.n	8003890 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800387a:	2300      	movs	r3, #0
 800387c:	613b      	str	r3, [r7, #16]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	613b      	str	r3, [r7, #16]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	613b      	str	r3, [r7, #16]
 800388e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003894:	2b00      	cmp	r3, #0
 8003896:	d002      	beq.n	800389e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	77fb      	strb	r3, [r7, #31]
 800389c:	e000      	b.n	80038a0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800389e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80038b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3720      	adds	r7, #32
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b088      	sub	sp, #32
 80038be:	af02      	add	r7, sp, #8
 80038c0:	60f8      	str	r0, [r7, #12]
 80038c2:	60b9      	str	r1, [r7, #8]
 80038c4:	603b      	str	r3, [r7, #0]
 80038c6:	4613      	mov	r3, r2
 80038c8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038ca:	2300      	movs	r3, #0
 80038cc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038d6:	d112      	bne.n	80038fe <HAL_SPI_Receive+0x44>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d10e      	bne.n	80038fe <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2204      	movs	r2, #4
 80038e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80038e8:	88fa      	ldrh	r2, [r7, #6]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	4613      	mov	r3, r2
 80038f0:	68ba      	ldr	r2, [r7, #8]
 80038f2:	68b9      	ldr	r1, [r7, #8]
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f000 f910 	bl	8003b1a <HAL_SPI_TransmitReceive>
 80038fa:	4603      	mov	r3, r0
 80038fc:	e109      	b.n	8003b12 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003904:	2b01      	cmp	r3, #1
 8003906:	d101      	bne.n	800390c <HAL_SPI_Receive+0x52>
 8003908:	2302      	movs	r3, #2
 800390a:	e102      	b.n	8003b12 <HAL_SPI_Receive+0x258>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003914:	f7fe fb44 	bl	8001fa0 <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b01      	cmp	r3, #1
 8003924:	d002      	beq.n	800392c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003926:	2302      	movs	r3, #2
 8003928:	75fb      	strb	r3, [r7, #23]
    goto error;
 800392a:	e0e9      	b.n	8003b00 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d002      	beq.n	8003938 <HAL_SPI_Receive+0x7e>
 8003932:	88fb      	ldrh	r3, [r7, #6]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d102      	bne.n	800393e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800393c:	e0e0      	b.n	8003b00 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2204      	movs	r2, #4
 8003942:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	88fa      	ldrh	r2, [r7, #6]
 8003956:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	88fa      	ldrh	r2, [r7, #6]
 800395e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003988:	d908      	bls.n	800399c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003998:	605a      	str	r2, [r3, #4]
 800399a:	e007      	b.n	80039ac <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685a      	ldr	r2, [r3, #4]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80039aa:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039b4:	d10f      	bne.n	80039d6 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80039d4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e0:	2b40      	cmp	r3, #64	; 0x40
 80039e2:	d007      	beq.n	80039f4 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039f2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039fc:	d867      	bhi.n	8003ace <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80039fe:	e030      	b.n	8003a62 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d117      	bne.n	8003a3e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f103 020c 	add.w	r2, r3, #12
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	7812      	ldrb	r2, [r2, #0]
 8003a1c:	b2d2      	uxtb	r2, r2
 8003a1e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a24:	1c5a      	adds	r2, r3, #1
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	3b01      	subs	r3, #1
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003a3c:	e011      	b.n	8003a62 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a3e:	f7fe faaf 	bl	8001fa0 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d803      	bhi.n	8003a56 <HAL_SPI_Receive+0x19c>
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a54:	d102      	bne.n	8003a5c <HAL_SPI_Receive+0x1a2>
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d102      	bne.n	8003a62 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003a60:	e04e      	b.n	8003b00 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1c8      	bne.n	8003a00 <HAL_SPI_Receive+0x146>
 8003a6e:	e034      	b.n	8003ada <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d115      	bne.n	8003aaa <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68da      	ldr	r2, [r3, #12]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a88:	b292      	uxth	r2, r2
 8003a8a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a90:	1c9a      	adds	r2, r3, #2
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003aa8:	e011      	b.n	8003ace <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003aaa:	f7fe fa79 	bl	8001fa0 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d803      	bhi.n	8003ac2 <HAL_SPI_Receive+0x208>
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac0:	d102      	bne.n	8003ac8 <HAL_SPI_Receive+0x20e>
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d102      	bne.n	8003ace <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003acc:	e018      	b.n	8003b00 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1ca      	bne.n	8003a70 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	6839      	ldr	r1, [r7, #0]
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f000 fb4c 	bl	800417c <SPI_EndRxTransaction>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d002      	beq.n	8003af0 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2220      	movs	r2, #32
 8003aee:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d002      	beq.n	8003afe <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	75fb      	strb	r3, [r7, #23]
 8003afc:	e000      	b.n	8003b00 <HAL_SPI_Receive+0x246>
  }

error :
 8003afe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003b10:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3718      	adds	r7, #24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b08a      	sub	sp, #40	; 0x28
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	60f8      	str	r0, [r7, #12]
 8003b22:	60b9      	str	r1, [r7, #8]
 8003b24:	607a      	str	r2, [r7, #4]
 8003b26:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d101      	bne.n	8003b40 <HAL_SPI_TransmitReceive+0x26>
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	e1fb      	b.n	8003f38 <HAL_SPI_TransmitReceive+0x41e>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b48:	f7fe fa2a 	bl	8001fa0 <HAL_GetTick>
 8003b4c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b54:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003b5c:	887b      	ldrh	r3, [r7, #2]
 8003b5e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003b60:	887b      	ldrh	r3, [r7, #2]
 8003b62:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003b64:	7efb      	ldrb	r3, [r7, #27]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d00e      	beq.n	8003b88 <HAL_SPI_TransmitReceive+0x6e>
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b70:	d106      	bne.n	8003b80 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d102      	bne.n	8003b80 <HAL_SPI_TransmitReceive+0x66>
 8003b7a:	7efb      	ldrb	r3, [r7, #27]
 8003b7c:	2b04      	cmp	r3, #4
 8003b7e:	d003      	beq.n	8003b88 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003b80:	2302      	movs	r3, #2
 8003b82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003b86:	e1cd      	b.n	8003f24 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d005      	beq.n	8003b9a <HAL_SPI_TransmitReceive+0x80>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d002      	beq.n	8003b9a <HAL_SPI_TransmitReceive+0x80>
 8003b94:	887b      	ldrh	r3, [r7, #2]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d103      	bne.n	8003ba2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003ba0:	e1c0      	b.n	8003f24 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b04      	cmp	r3, #4
 8003bac:	d003      	beq.n	8003bb6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2205      	movs	r2, #5
 8003bb2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	887a      	ldrh	r2, [r7, #2]
 8003bc6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	887a      	ldrh	r2, [r7, #2]
 8003bce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	887a      	ldrh	r2, [r7, #2]
 8003bdc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	887a      	ldrh	r2, [r7, #2]
 8003be2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bf8:	d802      	bhi.n	8003c00 <HAL_SPI_TransmitReceive+0xe6>
 8003bfa:	8a3b      	ldrh	r3, [r7, #16]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d908      	bls.n	8003c12 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c0e:	605a      	str	r2, [r3, #4]
 8003c10:	e007      	b.n	8003c22 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c20:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c2c:	2b40      	cmp	r3, #64	; 0x40
 8003c2e:	d007      	beq.n	8003c40 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c48:	d97c      	bls.n	8003d44 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d002      	beq.n	8003c58 <HAL_SPI_TransmitReceive+0x13e>
 8003c52:	8a7b      	ldrh	r3, [r7, #18]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d169      	bne.n	8003d2c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5c:	881a      	ldrh	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c68:	1c9a      	adds	r2, r3, #2
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	3b01      	subs	r3, #1
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c7c:	e056      	b.n	8003d2c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d11b      	bne.n	8003cc4 <HAL_SPI_TransmitReceive+0x1aa>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d016      	beq.n	8003cc4 <HAL_SPI_TransmitReceive+0x1aa>
 8003c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d113      	bne.n	8003cc4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca0:	881a      	ldrh	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cac:	1c9a      	adds	r2, r3, #2
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d11c      	bne.n	8003d0c <HAL_SPI_TransmitReceive+0x1f2>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d016      	beq.n	8003d0c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68da      	ldr	r2, [r3, #12]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce8:	b292      	uxth	r2, r2
 8003cea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf0:	1c9a      	adds	r2, r3, #2
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003d0c:	f7fe f948 	bl	8001fa0 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d807      	bhi.n	8003d2c <HAL_SPI_TransmitReceive+0x212>
 8003d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d22:	d003      	beq.n	8003d2c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003d2a:	e0fb      	b.n	8003f24 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1a3      	bne.n	8003c7e <HAL_SPI_TransmitReceive+0x164>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d19d      	bne.n	8003c7e <HAL_SPI_TransmitReceive+0x164>
 8003d42:	e0df      	b.n	8003f04 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d003      	beq.n	8003d54 <HAL_SPI_TransmitReceive+0x23a>
 8003d4c:	8a7b      	ldrh	r3, [r7, #18]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	f040 80cb 	bne.w	8003eea <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d912      	bls.n	8003d84 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d62:	881a      	ldrh	r2, [r3, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6e:	1c9a      	adds	r2, r3, #2
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	3b02      	subs	r3, #2
 8003d7c:	b29a      	uxth	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d82:	e0b2      	b.n	8003eea <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	330c      	adds	r3, #12
 8003d8e:	7812      	ldrb	r2, [r2, #0]
 8003d90:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d96:	1c5a      	adds	r2, r3, #1
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	3b01      	subs	r3, #1
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003daa:	e09e      	b.n	8003eea <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d134      	bne.n	8003e24 <HAL_SPI_TransmitReceive+0x30a>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d02f      	beq.n	8003e24 <HAL_SPI_TransmitReceive+0x30a>
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d12c      	bne.n	8003e24 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d912      	bls.n	8003dfa <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd8:	881a      	ldrh	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de4:	1c9a      	adds	r2, r3, #2
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	3b02      	subs	r3, #2
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003df8:	e012      	b.n	8003e20 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	330c      	adds	r3, #12
 8003e04:	7812      	ldrb	r2, [r2, #0]
 8003e06:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0c:	1c5a      	adds	r2, r3, #1
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e20:	2300      	movs	r3, #0
 8003e22:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d148      	bne.n	8003ec4 <HAL_SPI_TransmitReceive+0x3aa>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d042      	beq.n	8003ec4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d923      	bls.n	8003e92 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68da      	ldr	r2, [r3, #12]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e54:	b292      	uxth	r2, r2
 8003e56:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5c:	1c9a      	adds	r2, r3, #2
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	3b02      	subs	r3, #2
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d81f      	bhi.n	8003ec0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	685a      	ldr	r2, [r3, #4]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e8e:	605a      	str	r2, [r3, #4]
 8003e90:	e016      	b.n	8003ec0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f103 020c 	add.w	r2, r3, #12
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	7812      	ldrb	r2, [r2, #0]
 8003ea0:	b2d2      	uxtb	r2, r2
 8003ea2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea8:	1c5a      	adds	r2, r3, #1
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ec4:	f7fe f86c 	bl	8001fa0 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d803      	bhi.n	8003edc <HAL_SPI_TransmitReceive+0x3c2>
 8003ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eda:	d102      	bne.n	8003ee2 <HAL_SPI_TransmitReceive+0x3c8>
 8003edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d103      	bne.n	8003eea <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003ee8:	e01c      	b.n	8003f24 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f47f af5b 	bne.w	8003dac <HAL_SPI_TransmitReceive+0x292>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f47f af54 	bne.w	8003dac <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f04:	69fa      	ldr	r2, [r7, #28]
 8003f06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f000 f98f 	bl	800422c <SPI_EndRxTxTransaction>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d006      	beq.n	8003f22 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2220      	movs	r2, #32
 8003f1e:	661a      	str	r2, [r3, #96]	; 0x60
 8003f20:	e000      	b.n	8003f24 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003f22:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003f34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3728      	adds	r7, #40	; 0x28
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b088      	sub	sp, #32
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	603b      	str	r3, [r7, #0]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f50:	f7fe f826 	bl	8001fa0 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f58:	1a9b      	subs	r3, r3, r2
 8003f5a:	683a      	ldr	r2, [r7, #0]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f60:	f7fe f81e 	bl	8001fa0 <HAL_GetTick>
 8003f64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f66:	4b39      	ldr	r3, [pc, #228]	; (800404c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	015b      	lsls	r3, r3, #5
 8003f6c:	0d1b      	lsrs	r3, r3, #20
 8003f6e:	69fa      	ldr	r2, [r7, #28]
 8003f70:	fb02 f303 	mul.w	r3, r2, r3
 8003f74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f76:	e054      	b.n	8004022 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7e:	d050      	beq.n	8004022 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f80:	f7fe f80e 	bl	8001fa0 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	69fa      	ldr	r2, [r7, #28]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d902      	bls.n	8003f96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d13d      	bne.n	8004012 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003fa4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fae:	d111      	bne.n	8003fd4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fb8:	d004      	beq.n	8003fc4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fc2:	d107      	bne.n	8003fd4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fd2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fdc:	d10f      	bne.n	8003ffe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fec:	601a      	str	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ffc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e017      	b.n	8004042 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d101      	bne.n	800401c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004018:	2300      	movs	r3, #0
 800401a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	3b01      	subs	r3, #1
 8004020:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	4013      	ands	r3, r2
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	429a      	cmp	r2, r3
 8004030:	bf0c      	ite	eq
 8004032:	2301      	moveq	r3, #1
 8004034:	2300      	movne	r3, #0
 8004036:	b2db      	uxtb	r3, r3
 8004038:	461a      	mov	r2, r3
 800403a:	79fb      	ldrb	r3, [r7, #7]
 800403c:	429a      	cmp	r2, r3
 800403e:	d19b      	bne.n	8003f78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3720      	adds	r7, #32
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	2000005c 	.word	0x2000005c

08004050 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b08a      	sub	sp, #40	; 0x28
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
 800405c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800405e:	2300      	movs	r3, #0
 8004060:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004062:	f7fd ff9d 	bl	8001fa0 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800406a:	1a9b      	subs	r3, r3, r2
 800406c:	683a      	ldr	r2, [r7, #0]
 800406e:	4413      	add	r3, r2
 8004070:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004072:	f7fd ff95 	bl	8001fa0 <HAL_GetTick>
 8004076:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	330c      	adds	r3, #12
 800407e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004080:	4b3d      	ldr	r3, [pc, #244]	; (8004178 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	4613      	mov	r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4413      	add	r3, r2
 800408a:	00da      	lsls	r2, r3, #3
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	0d1b      	lsrs	r3, r3, #20
 8004090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004092:	fb02 f303 	mul.w	r3, r2, r3
 8004096:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004098:	e060      	b.n	800415c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80040a0:	d107      	bne.n	80040b2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d104      	bne.n	80040b2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80040b0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b8:	d050      	beq.n	800415c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80040ba:	f7fd ff71 	bl	8001fa0 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	6a3b      	ldr	r3, [r7, #32]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d902      	bls.n	80040d0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d13d      	bne.n	800414c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80040de:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040e8:	d111      	bne.n	800410e <SPI_WaitFifoStateUntilTimeout+0xbe>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040f2:	d004      	beq.n	80040fe <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040fc:	d107      	bne.n	800410e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800410c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004112:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004116:	d10f      	bne.n	8004138 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004136:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e010      	b.n	800416e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d101      	bne.n	8004156 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004152:	2300      	movs	r3, #0
 8004154:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	3b01      	subs	r3, #1
 800415a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689a      	ldr	r2, [r3, #8]
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	4013      	ands	r3, r2
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	429a      	cmp	r2, r3
 800416a:	d196      	bne.n	800409a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3728      	adds	r7, #40	; 0x28
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	2000005c 	.word	0x2000005c

0800417c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af02      	add	r7, sp, #8
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004190:	d111      	bne.n	80041b6 <SPI_EndRxTransaction+0x3a>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800419a:	d004      	beq.n	80041a6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a4:	d107      	bne.n	80041b6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041b4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	9300      	str	r3, [sp, #0]
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	2200      	movs	r2, #0
 80041be:	2180      	movs	r1, #128	; 0x80
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	f7ff febd 	bl	8003f40 <SPI_WaitFlagStateUntilTimeout>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d007      	beq.n	80041dc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041d0:	f043 0220 	orr.w	r2, r3, #32
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e023      	b.n	8004224 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041e4:	d11d      	bne.n	8004222 <SPI_EndRxTransaction+0xa6>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041ee:	d004      	beq.n	80041fa <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041f8:	d113      	bne.n	8004222 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	2200      	movs	r2, #0
 8004202:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f7ff ff22 	bl	8004050 <SPI_WaitFifoStateUntilTimeout>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d007      	beq.n	8004222 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004216:	f043 0220 	orr.w	r2, r3, #32
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e000      	b.n	8004224 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af02      	add	r7, sp, #8
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	9300      	str	r3, [sp, #0]
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	2200      	movs	r2, #0
 8004240:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	f7ff ff03 	bl	8004050 <SPI_WaitFifoStateUntilTimeout>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d007      	beq.n	8004260 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004254:	f043 0220 	orr.w	r2, r3, #32
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e027      	b.n	80042b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	9300      	str	r3, [sp, #0]
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	2200      	movs	r2, #0
 8004268:	2180      	movs	r1, #128	; 0x80
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f7ff fe68 	bl	8003f40 <SPI_WaitFlagStateUntilTimeout>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d007      	beq.n	8004286 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800427a:	f043 0220 	orr.w	r2, r3, #32
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e014      	b.n	80042b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	2200      	movs	r2, #0
 800428e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f7ff fedc 	bl	8004050 <SPI_WaitFifoStateUntilTimeout>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d007      	beq.n	80042ae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042a2:	f043 0220 	orr.w	r2, r3, #32
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e000      	b.n	80042b0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3710      	adds	r7, #16
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e042      	b.n	8004350 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d106      	bne.n	80042e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f7fd fd79 	bl	8001dd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2224      	movs	r2, #36	; 0x24
 80042e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 0201 	bic.w	r2, r2, #1
 80042f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f8c2 	bl	8004484 <UART_SetConfig>
 8004300:	4603      	mov	r3, r0
 8004302:	2b01      	cmp	r3, #1
 8004304:	d101      	bne.n	800430a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e022      	b.n	8004350 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430e:	2b00      	cmp	r3, #0
 8004310:	d002      	beq.n	8004318 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 fb82 	bl	8004a1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004326:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	689a      	ldr	r2, [r3, #8]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004336:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f042 0201 	orr.w	r2, r2, #1
 8004346:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 fc09 	bl	8004b60 <UART_CheckIdleState>
 800434e:	4603      	mov	r3, r0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3708      	adds	r7, #8
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b08a      	sub	sp, #40	; 0x28
 800435c:	af02      	add	r7, sp, #8
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	603b      	str	r3, [r7, #0]
 8004364:	4613      	mov	r3, r2
 8004366:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800436e:	2b20      	cmp	r3, #32
 8004370:	f040 8083 	bne.w	800447a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d002      	beq.n	8004380 <HAL_UART_Transmit+0x28>
 800437a:	88fb      	ldrh	r3, [r7, #6]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d101      	bne.n	8004384 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e07b      	b.n	800447c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800438a:	2b01      	cmp	r3, #1
 800438c:	d101      	bne.n	8004392 <HAL_UART_Transmit+0x3a>
 800438e:	2302      	movs	r3, #2
 8004390:	e074      	b.n	800447c <HAL_UART_Transmit+0x124>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2221      	movs	r2, #33	; 0x21
 80043a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043aa:	f7fd fdf9 	bl	8001fa0 <HAL_GetTick>
 80043ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	88fa      	ldrh	r2, [r7, #6]
 80043b4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	88fa      	ldrh	r2, [r7, #6]
 80043bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043c8:	d108      	bne.n	80043dc <HAL_UART_Transmit+0x84>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d104      	bne.n	80043dc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80043d2:	2300      	movs	r3, #0
 80043d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	61bb      	str	r3, [r7, #24]
 80043da:	e003      	b.n	80043e4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043e0:	2300      	movs	r3, #0
 80043e2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80043ec:	e02c      	b.n	8004448 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	9300      	str	r3, [sp, #0]
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	2200      	movs	r2, #0
 80043f6:	2180      	movs	r1, #128	; 0x80
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f000 fbfc 	bl	8004bf6 <UART_WaitOnFlagUntilTimeout>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d001      	beq.n	8004408 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e039      	b.n	800447c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10b      	bne.n	8004426 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	881b      	ldrh	r3, [r3, #0]
 8004412:	461a      	mov	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800441c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	3302      	adds	r3, #2
 8004422:	61bb      	str	r3, [r7, #24]
 8004424:	e007      	b.n	8004436 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	781a      	ldrb	r2, [r3, #0]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	3301      	adds	r3, #1
 8004434:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800443c:	b29b      	uxth	r3, r3
 800443e:	3b01      	subs	r3, #1
 8004440:	b29a      	uxth	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800444e:	b29b      	uxth	r3, r3
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1cc      	bne.n	80043ee <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	9300      	str	r3, [sp, #0]
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	2200      	movs	r2, #0
 800445c:	2140      	movs	r1, #64	; 0x40
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f000 fbc9 	bl	8004bf6 <UART_WaitOnFlagUntilTimeout>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e006      	b.n	800447c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2220      	movs	r2, #32
 8004472:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004476:	2300      	movs	r3, #0
 8004478:	e000      	b.n	800447c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800447a:	2302      	movs	r3, #2
  }
}
 800447c:	4618      	mov	r0, r3
 800447e:	3720      	adds	r7, #32
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004488:	b08c      	sub	sp, #48	; 0x30
 800448a:	af00      	add	r7, sp, #0
 800448c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800448e:	2300      	movs	r3, #0
 8004490:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	689a      	ldr	r2, [r3, #8]
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	431a      	orrs	r2, r3
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	431a      	orrs	r2, r3
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	69db      	ldr	r3, [r3, #28]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	4bab      	ldr	r3, [pc, #684]	; (8004760 <UART_SetConfig+0x2dc>)
 80044b4:	4013      	ands	r3, r2
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	6812      	ldr	r2, [r2, #0]
 80044ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044bc:	430b      	orrs	r3, r1
 80044be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	68da      	ldr	r2, [r3, #12]
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	430a      	orrs	r2, r1
 80044d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4aa0      	ldr	r2, [pc, #640]	; (8004764 <UART_SetConfig+0x2e0>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d004      	beq.n	80044f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044ec:	4313      	orrs	r3, r2
 80044ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80044fa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	6812      	ldr	r2, [r2, #0]
 8004502:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004504:	430b      	orrs	r3, r1
 8004506:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450e:	f023 010f 	bic.w	r1, r3, #15
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	430a      	orrs	r2, r1
 800451c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a91      	ldr	r2, [pc, #580]	; (8004768 <UART_SetConfig+0x2e4>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d125      	bne.n	8004574 <UART_SetConfig+0xf0>
 8004528:	4b90      	ldr	r3, [pc, #576]	; (800476c <UART_SetConfig+0x2e8>)
 800452a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800452e:	f003 0303 	and.w	r3, r3, #3
 8004532:	2b03      	cmp	r3, #3
 8004534:	d81a      	bhi.n	800456c <UART_SetConfig+0xe8>
 8004536:	a201      	add	r2, pc, #4	; (adr r2, 800453c <UART_SetConfig+0xb8>)
 8004538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800453c:	0800454d 	.word	0x0800454d
 8004540:	0800455d 	.word	0x0800455d
 8004544:	08004555 	.word	0x08004555
 8004548:	08004565 	.word	0x08004565
 800454c:	2301      	movs	r3, #1
 800454e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004552:	e0d6      	b.n	8004702 <UART_SetConfig+0x27e>
 8004554:	2302      	movs	r3, #2
 8004556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800455a:	e0d2      	b.n	8004702 <UART_SetConfig+0x27e>
 800455c:	2304      	movs	r3, #4
 800455e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004562:	e0ce      	b.n	8004702 <UART_SetConfig+0x27e>
 8004564:	2308      	movs	r3, #8
 8004566:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800456a:	e0ca      	b.n	8004702 <UART_SetConfig+0x27e>
 800456c:	2310      	movs	r3, #16
 800456e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004572:	e0c6      	b.n	8004702 <UART_SetConfig+0x27e>
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a7d      	ldr	r2, [pc, #500]	; (8004770 <UART_SetConfig+0x2ec>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d138      	bne.n	80045f0 <UART_SetConfig+0x16c>
 800457e:	4b7b      	ldr	r3, [pc, #492]	; (800476c <UART_SetConfig+0x2e8>)
 8004580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004584:	f003 030c 	and.w	r3, r3, #12
 8004588:	2b0c      	cmp	r3, #12
 800458a:	d82d      	bhi.n	80045e8 <UART_SetConfig+0x164>
 800458c:	a201      	add	r2, pc, #4	; (adr r2, 8004594 <UART_SetConfig+0x110>)
 800458e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004592:	bf00      	nop
 8004594:	080045c9 	.word	0x080045c9
 8004598:	080045e9 	.word	0x080045e9
 800459c:	080045e9 	.word	0x080045e9
 80045a0:	080045e9 	.word	0x080045e9
 80045a4:	080045d9 	.word	0x080045d9
 80045a8:	080045e9 	.word	0x080045e9
 80045ac:	080045e9 	.word	0x080045e9
 80045b0:	080045e9 	.word	0x080045e9
 80045b4:	080045d1 	.word	0x080045d1
 80045b8:	080045e9 	.word	0x080045e9
 80045bc:	080045e9 	.word	0x080045e9
 80045c0:	080045e9 	.word	0x080045e9
 80045c4:	080045e1 	.word	0x080045e1
 80045c8:	2300      	movs	r3, #0
 80045ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045ce:	e098      	b.n	8004702 <UART_SetConfig+0x27e>
 80045d0:	2302      	movs	r3, #2
 80045d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045d6:	e094      	b.n	8004702 <UART_SetConfig+0x27e>
 80045d8:	2304      	movs	r3, #4
 80045da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045de:	e090      	b.n	8004702 <UART_SetConfig+0x27e>
 80045e0:	2308      	movs	r3, #8
 80045e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045e6:	e08c      	b.n	8004702 <UART_SetConfig+0x27e>
 80045e8:	2310      	movs	r3, #16
 80045ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045ee:	e088      	b.n	8004702 <UART_SetConfig+0x27e>
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a5f      	ldr	r2, [pc, #380]	; (8004774 <UART_SetConfig+0x2f0>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d125      	bne.n	8004646 <UART_SetConfig+0x1c2>
 80045fa:	4b5c      	ldr	r3, [pc, #368]	; (800476c <UART_SetConfig+0x2e8>)
 80045fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004600:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004604:	2b30      	cmp	r3, #48	; 0x30
 8004606:	d016      	beq.n	8004636 <UART_SetConfig+0x1b2>
 8004608:	2b30      	cmp	r3, #48	; 0x30
 800460a:	d818      	bhi.n	800463e <UART_SetConfig+0x1ba>
 800460c:	2b20      	cmp	r3, #32
 800460e:	d00a      	beq.n	8004626 <UART_SetConfig+0x1a2>
 8004610:	2b20      	cmp	r3, #32
 8004612:	d814      	bhi.n	800463e <UART_SetConfig+0x1ba>
 8004614:	2b00      	cmp	r3, #0
 8004616:	d002      	beq.n	800461e <UART_SetConfig+0x19a>
 8004618:	2b10      	cmp	r3, #16
 800461a:	d008      	beq.n	800462e <UART_SetConfig+0x1aa>
 800461c:	e00f      	b.n	800463e <UART_SetConfig+0x1ba>
 800461e:	2300      	movs	r3, #0
 8004620:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004624:	e06d      	b.n	8004702 <UART_SetConfig+0x27e>
 8004626:	2302      	movs	r3, #2
 8004628:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800462c:	e069      	b.n	8004702 <UART_SetConfig+0x27e>
 800462e:	2304      	movs	r3, #4
 8004630:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004634:	e065      	b.n	8004702 <UART_SetConfig+0x27e>
 8004636:	2308      	movs	r3, #8
 8004638:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800463c:	e061      	b.n	8004702 <UART_SetConfig+0x27e>
 800463e:	2310      	movs	r3, #16
 8004640:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004644:	e05d      	b.n	8004702 <UART_SetConfig+0x27e>
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a4b      	ldr	r2, [pc, #300]	; (8004778 <UART_SetConfig+0x2f4>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d125      	bne.n	800469c <UART_SetConfig+0x218>
 8004650:	4b46      	ldr	r3, [pc, #280]	; (800476c <UART_SetConfig+0x2e8>)
 8004652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004656:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800465a:	2bc0      	cmp	r3, #192	; 0xc0
 800465c:	d016      	beq.n	800468c <UART_SetConfig+0x208>
 800465e:	2bc0      	cmp	r3, #192	; 0xc0
 8004660:	d818      	bhi.n	8004694 <UART_SetConfig+0x210>
 8004662:	2b80      	cmp	r3, #128	; 0x80
 8004664:	d00a      	beq.n	800467c <UART_SetConfig+0x1f8>
 8004666:	2b80      	cmp	r3, #128	; 0x80
 8004668:	d814      	bhi.n	8004694 <UART_SetConfig+0x210>
 800466a:	2b00      	cmp	r3, #0
 800466c:	d002      	beq.n	8004674 <UART_SetConfig+0x1f0>
 800466e:	2b40      	cmp	r3, #64	; 0x40
 8004670:	d008      	beq.n	8004684 <UART_SetConfig+0x200>
 8004672:	e00f      	b.n	8004694 <UART_SetConfig+0x210>
 8004674:	2300      	movs	r3, #0
 8004676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800467a:	e042      	b.n	8004702 <UART_SetConfig+0x27e>
 800467c:	2302      	movs	r3, #2
 800467e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004682:	e03e      	b.n	8004702 <UART_SetConfig+0x27e>
 8004684:	2304      	movs	r3, #4
 8004686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800468a:	e03a      	b.n	8004702 <UART_SetConfig+0x27e>
 800468c:	2308      	movs	r3, #8
 800468e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004692:	e036      	b.n	8004702 <UART_SetConfig+0x27e>
 8004694:	2310      	movs	r3, #16
 8004696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800469a:	e032      	b.n	8004702 <UART_SetConfig+0x27e>
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a30      	ldr	r2, [pc, #192]	; (8004764 <UART_SetConfig+0x2e0>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d12a      	bne.n	80046fc <UART_SetConfig+0x278>
 80046a6:	4b31      	ldr	r3, [pc, #196]	; (800476c <UART_SetConfig+0x2e8>)
 80046a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80046b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046b4:	d01a      	beq.n	80046ec <UART_SetConfig+0x268>
 80046b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046ba:	d81b      	bhi.n	80046f4 <UART_SetConfig+0x270>
 80046bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046c0:	d00c      	beq.n	80046dc <UART_SetConfig+0x258>
 80046c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046c6:	d815      	bhi.n	80046f4 <UART_SetConfig+0x270>
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d003      	beq.n	80046d4 <UART_SetConfig+0x250>
 80046cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046d0:	d008      	beq.n	80046e4 <UART_SetConfig+0x260>
 80046d2:	e00f      	b.n	80046f4 <UART_SetConfig+0x270>
 80046d4:	2300      	movs	r3, #0
 80046d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046da:	e012      	b.n	8004702 <UART_SetConfig+0x27e>
 80046dc:	2302      	movs	r3, #2
 80046de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046e2:	e00e      	b.n	8004702 <UART_SetConfig+0x27e>
 80046e4:	2304      	movs	r3, #4
 80046e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046ea:	e00a      	b.n	8004702 <UART_SetConfig+0x27e>
 80046ec:	2308      	movs	r3, #8
 80046ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046f2:	e006      	b.n	8004702 <UART_SetConfig+0x27e>
 80046f4:	2310      	movs	r3, #16
 80046f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046fa:	e002      	b.n	8004702 <UART_SetConfig+0x27e>
 80046fc:	2310      	movs	r3, #16
 80046fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a17      	ldr	r2, [pc, #92]	; (8004764 <UART_SetConfig+0x2e0>)
 8004708:	4293      	cmp	r3, r2
 800470a:	f040 80a8 	bne.w	800485e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800470e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004712:	2b08      	cmp	r3, #8
 8004714:	d834      	bhi.n	8004780 <UART_SetConfig+0x2fc>
 8004716:	a201      	add	r2, pc, #4	; (adr r2, 800471c <UART_SetConfig+0x298>)
 8004718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800471c:	08004741 	.word	0x08004741
 8004720:	08004781 	.word	0x08004781
 8004724:	08004749 	.word	0x08004749
 8004728:	08004781 	.word	0x08004781
 800472c:	0800474f 	.word	0x0800474f
 8004730:	08004781 	.word	0x08004781
 8004734:	08004781 	.word	0x08004781
 8004738:	08004781 	.word	0x08004781
 800473c:	08004757 	.word	0x08004757
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004740:	f7fe fc40 	bl	8002fc4 <HAL_RCC_GetPCLK1Freq>
 8004744:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004746:	e021      	b.n	800478c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004748:	4b0c      	ldr	r3, [pc, #48]	; (800477c <UART_SetConfig+0x2f8>)
 800474a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800474c:	e01e      	b.n	800478c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800474e:	f7fe fbcb 	bl	8002ee8 <HAL_RCC_GetSysClockFreq>
 8004752:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004754:	e01a      	b.n	800478c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800475a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800475c:	e016      	b.n	800478c <UART_SetConfig+0x308>
 800475e:	bf00      	nop
 8004760:	cfff69f3 	.word	0xcfff69f3
 8004764:	40008000 	.word	0x40008000
 8004768:	40013800 	.word	0x40013800
 800476c:	40021000 	.word	0x40021000
 8004770:	40004400 	.word	0x40004400
 8004774:	40004800 	.word	0x40004800
 8004778:	40004c00 	.word	0x40004c00
 800477c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004780:	2300      	movs	r3, #0
 8004782:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800478a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	2b00      	cmp	r3, #0
 8004790:	f000 812a 	beq.w	80049e8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004798:	4a9e      	ldr	r2, [pc, #632]	; (8004a14 <UART_SetConfig+0x590>)
 800479a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800479e:	461a      	mov	r2, r3
 80047a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80047a6:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	4613      	mov	r3, r2
 80047ae:	005b      	lsls	r3, r3, #1
 80047b0:	4413      	add	r3, r2
 80047b2:	69ba      	ldr	r2, [r7, #24]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d305      	bcc.n	80047c4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d903      	bls.n	80047cc <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80047ca:	e10d      	b.n	80049e8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ce:	2200      	movs	r2, #0
 80047d0:	60bb      	str	r3, [r7, #8]
 80047d2:	60fa      	str	r2, [r7, #12]
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d8:	4a8e      	ldr	r2, [pc, #568]	; (8004a14 <UART_SetConfig+0x590>)
 80047da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047de:	b29b      	uxth	r3, r3
 80047e0:	2200      	movs	r2, #0
 80047e2:	603b      	str	r3, [r7, #0]
 80047e4:	607a      	str	r2, [r7, #4]
 80047e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80047ee:	f7fb fd6f 	bl	80002d0 <__aeabi_uldivmod>
 80047f2:	4602      	mov	r2, r0
 80047f4:	460b      	mov	r3, r1
 80047f6:	4610      	mov	r0, r2
 80047f8:	4619      	mov	r1, r3
 80047fa:	f04f 0200 	mov.w	r2, #0
 80047fe:	f04f 0300 	mov.w	r3, #0
 8004802:	020b      	lsls	r3, r1, #8
 8004804:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004808:	0202      	lsls	r2, r0, #8
 800480a:	6979      	ldr	r1, [r7, #20]
 800480c:	6849      	ldr	r1, [r1, #4]
 800480e:	0849      	lsrs	r1, r1, #1
 8004810:	2000      	movs	r0, #0
 8004812:	460c      	mov	r4, r1
 8004814:	4605      	mov	r5, r0
 8004816:	eb12 0804 	adds.w	r8, r2, r4
 800481a:	eb43 0905 	adc.w	r9, r3, r5
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	469a      	mov	sl, r3
 8004826:	4693      	mov	fp, r2
 8004828:	4652      	mov	r2, sl
 800482a:	465b      	mov	r3, fp
 800482c:	4640      	mov	r0, r8
 800482e:	4649      	mov	r1, r9
 8004830:	f7fb fd4e 	bl	80002d0 <__aeabi_uldivmod>
 8004834:	4602      	mov	r2, r0
 8004836:	460b      	mov	r3, r1
 8004838:	4613      	mov	r3, r2
 800483a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800483c:	6a3b      	ldr	r3, [r7, #32]
 800483e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004842:	d308      	bcc.n	8004856 <UART_SetConfig+0x3d2>
 8004844:	6a3b      	ldr	r3, [r7, #32]
 8004846:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800484a:	d204      	bcs.n	8004856 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6a3a      	ldr	r2, [r7, #32]
 8004852:	60da      	str	r2, [r3, #12]
 8004854:	e0c8      	b.n	80049e8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800485c:	e0c4      	b.n	80049e8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	69db      	ldr	r3, [r3, #28]
 8004862:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004866:	d167      	bne.n	8004938 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004868:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800486c:	2b08      	cmp	r3, #8
 800486e:	d828      	bhi.n	80048c2 <UART_SetConfig+0x43e>
 8004870:	a201      	add	r2, pc, #4	; (adr r2, 8004878 <UART_SetConfig+0x3f4>)
 8004872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004876:	bf00      	nop
 8004878:	0800489d 	.word	0x0800489d
 800487c:	080048a5 	.word	0x080048a5
 8004880:	080048ad 	.word	0x080048ad
 8004884:	080048c3 	.word	0x080048c3
 8004888:	080048b3 	.word	0x080048b3
 800488c:	080048c3 	.word	0x080048c3
 8004890:	080048c3 	.word	0x080048c3
 8004894:	080048c3 	.word	0x080048c3
 8004898:	080048bb 	.word	0x080048bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800489c:	f7fe fb92 	bl	8002fc4 <HAL_RCC_GetPCLK1Freq>
 80048a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80048a2:	e014      	b.n	80048ce <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048a4:	f7fe fba4 	bl	8002ff0 <HAL_RCC_GetPCLK2Freq>
 80048a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80048aa:	e010      	b.n	80048ce <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048ac:	4b5a      	ldr	r3, [pc, #360]	; (8004a18 <UART_SetConfig+0x594>)
 80048ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80048b0:	e00d      	b.n	80048ce <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048b2:	f7fe fb19 	bl	8002ee8 <HAL_RCC_GetSysClockFreq>
 80048b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80048b8:	e009      	b.n	80048ce <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80048c0:	e005      	b.n	80048ce <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80048c2:	2300      	movs	r3, #0
 80048c4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80048cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f000 8089 	beq.w	80049e8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048da:	4a4e      	ldr	r2, [pc, #312]	; (8004a14 <UART_SetConfig+0x590>)
 80048dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048e0:	461a      	mov	r2, r3
 80048e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80048e8:	005a      	lsls	r2, r3, #1
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	085b      	lsrs	r3, r3, #1
 80048f0:	441a      	add	r2, r3
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048fa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048fc:	6a3b      	ldr	r3, [r7, #32]
 80048fe:	2b0f      	cmp	r3, #15
 8004900:	d916      	bls.n	8004930 <UART_SetConfig+0x4ac>
 8004902:	6a3b      	ldr	r3, [r7, #32]
 8004904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004908:	d212      	bcs.n	8004930 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800490a:	6a3b      	ldr	r3, [r7, #32]
 800490c:	b29b      	uxth	r3, r3
 800490e:	f023 030f 	bic.w	r3, r3, #15
 8004912:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004914:	6a3b      	ldr	r3, [r7, #32]
 8004916:	085b      	lsrs	r3, r3, #1
 8004918:	b29b      	uxth	r3, r3
 800491a:	f003 0307 	and.w	r3, r3, #7
 800491e:	b29a      	uxth	r2, r3
 8004920:	8bfb      	ldrh	r3, [r7, #30]
 8004922:	4313      	orrs	r3, r2
 8004924:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	8bfa      	ldrh	r2, [r7, #30]
 800492c:	60da      	str	r2, [r3, #12]
 800492e:	e05b      	b.n	80049e8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004936:	e057      	b.n	80049e8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004938:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800493c:	2b08      	cmp	r3, #8
 800493e:	d828      	bhi.n	8004992 <UART_SetConfig+0x50e>
 8004940:	a201      	add	r2, pc, #4	; (adr r2, 8004948 <UART_SetConfig+0x4c4>)
 8004942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004946:	bf00      	nop
 8004948:	0800496d 	.word	0x0800496d
 800494c:	08004975 	.word	0x08004975
 8004950:	0800497d 	.word	0x0800497d
 8004954:	08004993 	.word	0x08004993
 8004958:	08004983 	.word	0x08004983
 800495c:	08004993 	.word	0x08004993
 8004960:	08004993 	.word	0x08004993
 8004964:	08004993 	.word	0x08004993
 8004968:	0800498b 	.word	0x0800498b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800496c:	f7fe fb2a 	bl	8002fc4 <HAL_RCC_GetPCLK1Freq>
 8004970:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004972:	e014      	b.n	800499e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004974:	f7fe fb3c 	bl	8002ff0 <HAL_RCC_GetPCLK2Freq>
 8004978:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800497a:	e010      	b.n	800499e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800497c:	4b26      	ldr	r3, [pc, #152]	; (8004a18 <UART_SetConfig+0x594>)
 800497e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004980:	e00d      	b.n	800499e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004982:	f7fe fab1 	bl	8002ee8 <HAL_RCC_GetSysClockFreq>
 8004986:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004988:	e009      	b.n	800499e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800498a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800498e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004990:	e005      	b.n	800499e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004992:	2300      	movs	r3, #0
 8004994:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800499c:	bf00      	nop
    }

    if (pclk != 0U)
 800499e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d021      	beq.n	80049e8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a8:	4a1a      	ldr	r2, [pc, #104]	; (8004a14 <UART_SetConfig+0x590>)
 80049aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049ae:	461a      	mov	r2, r3
 80049b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	085b      	lsrs	r3, r3, #1
 80049bc:	441a      	add	r2, r3
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049c8:	6a3b      	ldr	r3, [r7, #32]
 80049ca:	2b0f      	cmp	r3, #15
 80049cc:	d909      	bls.n	80049e2 <UART_SetConfig+0x55e>
 80049ce:	6a3b      	ldr	r3, [r7, #32]
 80049d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049d4:	d205      	bcs.n	80049e2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049d6:	6a3b      	ldr	r3, [r7, #32]
 80049d8:	b29a      	uxth	r2, r3
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	60da      	str	r2, [r3, #12]
 80049e0:	e002      	b.n	80049e8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	2200      	movs	r2, #0
 80049fc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	2200      	movs	r2, #0
 8004a02:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004a04:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3730      	adds	r7, #48	; 0x30
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a12:	bf00      	nop
 8004a14:	0800c420 	.word	0x0800c420
 8004a18:	00f42400 	.word	0x00f42400

08004a1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a28:	f003 0301 	and.w	r3, r3, #1
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00a      	beq.n	8004a46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4a:	f003 0302 	and.w	r3, r3, #2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00a      	beq.n	8004a68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	430a      	orrs	r2, r1
 8004a66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6c:	f003 0304 	and.w	r3, r3, #4
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00a      	beq.n	8004a8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8e:	f003 0308 	and.w	r3, r3, #8
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00a      	beq.n	8004aac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab0:	f003 0310 	and.w	r3, r3, #16
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00a      	beq.n	8004ace <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad2:	f003 0320 	and.w	r3, r3, #32
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00a      	beq.n	8004af0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	430a      	orrs	r2, r1
 8004aee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d01a      	beq.n	8004b32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b1a:	d10a      	bne.n	8004b32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00a      	beq.n	8004b54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	430a      	orrs	r2, r1
 8004b52:	605a      	str	r2, [r3, #4]
  }
}
 8004b54:	bf00      	nop
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af02      	add	r7, sp, #8
 8004b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b70:	f7fd fa16 	bl	8001fa0 <HAL_GetTick>
 8004b74:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0308 	and.w	r3, r3, #8
 8004b80:	2b08      	cmp	r3, #8
 8004b82:	d10e      	bne.n	8004ba2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b88:	9300      	str	r3, [sp, #0]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f82f 	bl	8004bf6 <UART_WaitOnFlagUntilTimeout>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d001      	beq.n	8004ba2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e025      	b.n	8004bee <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0304 	and.w	r3, r3, #4
 8004bac:	2b04      	cmp	r3, #4
 8004bae:	d10e      	bne.n	8004bce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bb4:	9300      	str	r3, [sp, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f819 	bl	8004bf6 <UART_WaitOnFlagUntilTimeout>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d001      	beq.n	8004bce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e00f      	b.n	8004bee <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2220      	movs	r2, #32
 8004bd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2220      	movs	r2, #32
 8004bda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}

08004bf6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bf6:	b580      	push	{r7, lr}
 8004bf8:	b09c      	sub	sp, #112	; 0x70
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	60f8      	str	r0, [r7, #12]
 8004bfe:	60b9      	str	r1, [r7, #8]
 8004c00:	603b      	str	r3, [r7, #0]
 8004c02:	4613      	mov	r3, r2
 8004c04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c06:	e0a9      	b.n	8004d5c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0e:	f000 80a5 	beq.w	8004d5c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c12:	f7fd f9c5 	bl	8001fa0 <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d302      	bcc.n	8004c28 <UART_WaitOnFlagUntilTimeout+0x32>
 8004c22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d140      	bne.n	8004caa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c30:	e853 3f00 	ldrex	r3, [r3]
 8004c34:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004c36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c3c:	667b      	str	r3, [r7, #100]	; 0x64
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	461a      	mov	r2, r3
 8004c44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c48:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004c4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c4e:	e841 2300 	strex	r3, r2, [r1]
 8004c52:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004c54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1e6      	bne.n	8004c28 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	3308      	adds	r3, #8
 8004c60:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c64:	e853 3f00 	ldrex	r3, [r3]
 8004c68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c6c:	f023 0301 	bic.w	r3, r3, #1
 8004c70:	663b      	str	r3, [r7, #96]	; 0x60
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	3308      	adds	r3, #8
 8004c78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c7a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004c7c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c82:	e841 2300 	strex	r3, r2, [r1]
 8004c86:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004c88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1e5      	bne.n	8004c5a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2220      	movs	r2, #32
 8004c92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2220      	movs	r2, #32
 8004c9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e069      	b.n	8004d7e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0304 	and.w	r3, r3, #4
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d051      	beq.n	8004d5c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cc6:	d149      	bne.n	8004d5c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cd0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cda:	e853 3f00 	ldrex	r3, [r3]
 8004cde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ce6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	461a      	mov	r2, r3
 8004cee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cf0:	637b      	str	r3, [r7, #52]	; 0x34
 8004cf2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cf8:	e841 2300 	strex	r3, r2, [r1]
 8004cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d1e6      	bne.n	8004cd2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	3308      	adds	r3, #8
 8004d0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	e853 3f00 	ldrex	r3, [r3]
 8004d12:	613b      	str	r3, [r7, #16]
   return(result);
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	f023 0301 	bic.w	r3, r3, #1
 8004d1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	3308      	adds	r3, #8
 8004d22:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004d24:	623a      	str	r2, [r7, #32]
 8004d26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d28:	69f9      	ldr	r1, [r7, #28]
 8004d2a:	6a3a      	ldr	r2, [r7, #32]
 8004d2c:	e841 2300 	strex	r3, r2, [r1]
 8004d30:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1e5      	bne.n	8004d04 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2220      	movs	r2, #32
 8004d44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2220      	movs	r2, #32
 8004d4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e010      	b.n	8004d7e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	69da      	ldr	r2, [r3, #28]
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	4013      	ands	r3, r2
 8004d66:	68ba      	ldr	r2, [r7, #8]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	bf0c      	ite	eq
 8004d6c:	2301      	moveq	r3, #1
 8004d6e:	2300      	movne	r3, #0
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	461a      	mov	r2, r3
 8004d74:	79fb      	ldrb	r3, [r7, #7]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	f43f af46 	beq.w	8004c08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3770      	adds	r7, #112	; 0x70
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004d86:	b480      	push	{r7}
 8004d88:	b085      	sub	sp, #20
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d101      	bne.n	8004d9c <HAL_UARTEx_DisableFifoMode+0x16>
 8004d98:	2302      	movs	r3, #2
 8004d9a:	e027      	b.n	8004dec <HAL_UARTEx_DisableFifoMode+0x66>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2224      	movs	r2, #36	; 0x24
 8004da8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f022 0201 	bic.w	r2, r2, #1
 8004dc2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004dca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2220      	movs	r2, #32
 8004dde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3714      	adds	r7, #20
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d101      	bne.n	8004e10 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	e02d      	b.n	8004e6c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2224      	movs	r2, #36	; 0x24
 8004e1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f022 0201 	bic.w	r2, r2, #1
 8004e36:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	683a      	ldr	r2, [r7, #0]
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 f84f 	bl	8004ef0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2220      	movs	r2, #32
 8004e5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d101      	bne.n	8004e8c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004e88:	2302      	movs	r3, #2
 8004e8a:	e02d      	b.n	8004ee8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2224      	movs	r2, #36	; 0x24
 8004e98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f022 0201 	bic.w	r2, r2, #1
 8004eb2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	683a      	ldr	r2, [r7, #0]
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 f811 	bl	8004ef0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2220      	movs	r2, #32
 8004eda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3710      	adds	r7, #16
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d108      	bne.n	8004f12 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004f10:	e031      	b.n	8004f76 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004f12:	2308      	movs	r3, #8
 8004f14:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004f16:	2308      	movs	r3, #8
 8004f18:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	0e5b      	lsrs	r3, r3, #25
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	f003 0307 	and.w	r3, r3, #7
 8004f28:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	0f5b      	lsrs	r3, r3, #29
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	f003 0307 	and.w	r3, r3, #7
 8004f38:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004f3a:	7bbb      	ldrb	r3, [r7, #14]
 8004f3c:	7b3a      	ldrb	r2, [r7, #12]
 8004f3e:	4911      	ldr	r1, [pc, #68]	; (8004f84 <UARTEx_SetNbDataToProcess+0x94>)
 8004f40:	5c8a      	ldrb	r2, [r1, r2]
 8004f42:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004f46:	7b3a      	ldrb	r2, [r7, #12]
 8004f48:	490f      	ldr	r1, [pc, #60]	; (8004f88 <UARTEx_SetNbDataToProcess+0x98>)
 8004f4a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004f4c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004f58:	7bfb      	ldrb	r3, [r7, #15]
 8004f5a:	7b7a      	ldrb	r2, [r7, #13]
 8004f5c:	4909      	ldr	r1, [pc, #36]	; (8004f84 <UARTEx_SetNbDataToProcess+0x94>)
 8004f5e:	5c8a      	ldrb	r2, [r1, r2]
 8004f60:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004f64:	7b7a      	ldrb	r2, [r7, #13]
 8004f66:	4908      	ldr	r1, [pc, #32]	; (8004f88 <UARTEx_SetNbDataToProcess+0x98>)
 8004f68:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004f6a:	fb93 f3f2 	sdiv	r3, r3, r2
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004f76:	bf00      	nop
 8004f78:	3714      	adds	r7, #20
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	0800c438 	.word	0x0800c438
 8004f88:	0800c440 	.word	0x0800c440

08004f8c <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8004f94:	4b22      	ldr	r3, [pc, #136]	; (8005020 <WIZCHIP_READ+0x94>)
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004f9a:	4b21      	ldr	r3, [pc, #132]	; (8005020 <WIZCHIP_READ+0x94>)
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004fa0:	4b1f      	ldr	r3, [pc, #124]	; (8005020 <WIZCHIP_READ+0x94>)
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d003      	beq.n	8004fb0 <WIZCHIP_READ+0x24>
 8004fa8:	4b1d      	ldr	r3, [pc, #116]	; (8005020 <WIZCHIP_READ+0x94>)
 8004faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d114      	bne.n	8004fda <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8004fb0:	4b1b      	ldr	r3, [pc, #108]	; (8005020 <WIZCHIP_READ+0x94>)
 8004fb2:	6a1b      	ldr	r3, [r3, #32]
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	0c12      	lsrs	r2, r2, #16
 8004fb8:	b2d2      	uxtb	r2, r2
 8004fba:	4610      	mov	r0, r2
 8004fbc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8004fbe:	4b18      	ldr	r3, [pc, #96]	; (8005020 <WIZCHIP_READ+0x94>)
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	0a12      	lsrs	r2, r2, #8
 8004fc6:	b2d2      	uxtb	r2, r2
 8004fc8:	4610      	mov	r0, r2
 8004fca:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004fcc:	4b14      	ldr	r3, [pc, #80]	; (8005020 <WIZCHIP_READ+0x94>)
 8004fce:	6a1b      	ldr	r3, [r3, #32]
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	b2d2      	uxtb	r2, r2
 8004fd4:	4610      	mov	r0, r2
 8004fd6:	4798      	blx	r3
 8004fd8:	e011      	b.n	8004ffe <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	0c1b      	lsrs	r3, r3, #16
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	0a1b      	lsrs	r3, r3, #8
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8004ff0:	4b0b      	ldr	r3, [pc, #44]	; (8005020 <WIZCHIP_READ+0x94>)
 8004ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff4:	f107 020c 	add.w	r2, r7, #12
 8004ff8:	2103      	movs	r1, #3
 8004ffa:	4610      	mov	r0, r2
 8004ffc:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8004ffe:	4b08      	ldr	r3, [pc, #32]	; (8005020 <WIZCHIP_READ+0x94>)
 8005000:	69db      	ldr	r3, [r3, #28]
 8005002:	4798      	blx	r3
 8005004:	4603      	mov	r3, r0
 8005006:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8005008:	4b05      	ldr	r3, [pc, #20]	; (8005020 <WIZCHIP_READ+0x94>)
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800500e:	4b04      	ldr	r3, [pc, #16]	; (8005020 <WIZCHIP_READ+0x94>)
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	4798      	blx	r3
   return ret;
 8005014:	7bfb      	ldrb	r3, [r7, #15]
}
 8005016:	4618      	mov	r0, r3
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	2000006c 	.word	0x2000006c

08005024 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	460b      	mov	r3, r1
 800502e:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8005030:	4b22      	ldr	r3, [pc, #136]	; (80050bc <WIZCHIP_WRITE+0x98>)
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	4798      	blx	r3
   WIZCHIP.CS._select();
 8005036:	4b21      	ldr	r3, [pc, #132]	; (80050bc <WIZCHIP_WRITE+0x98>)
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f043 0304 	orr.w	r3, r3, #4
 8005042:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8005044:	4b1d      	ldr	r3, [pc, #116]	; (80050bc <WIZCHIP_WRITE+0x98>)
 8005046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005048:	2b00      	cmp	r3, #0
 800504a:	d119      	bne.n	8005080 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800504c:	4b1b      	ldr	r3, [pc, #108]	; (80050bc <WIZCHIP_WRITE+0x98>)
 800504e:	6a1b      	ldr	r3, [r3, #32]
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	0c12      	lsrs	r2, r2, #16
 8005054:	b2d2      	uxtb	r2, r2
 8005056:	4610      	mov	r0, r2
 8005058:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800505a:	4b18      	ldr	r3, [pc, #96]	; (80050bc <WIZCHIP_WRITE+0x98>)
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	0a12      	lsrs	r2, r2, #8
 8005062:	b2d2      	uxtb	r2, r2
 8005064:	4610      	mov	r0, r2
 8005066:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8005068:	4b14      	ldr	r3, [pc, #80]	; (80050bc <WIZCHIP_WRITE+0x98>)
 800506a:	6a1b      	ldr	r3, [r3, #32]
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	b2d2      	uxtb	r2, r2
 8005070:	4610      	mov	r0, r2
 8005072:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8005074:	4b11      	ldr	r3, [pc, #68]	; (80050bc <WIZCHIP_WRITE+0x98>)
 8005076:	6a1b      	ldr	r3, [r3, #32]
 8005078:	78fa      	ldrb	r2, [r7, #3]
 800507a:	4610      	mov	r0, r2
 800507c:	4798      	blx	r3
 800507e:	e013      	b.n	80050a8 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	0c1b      	lsrs	r3, r3, #16
 8005084:	b2db      	uxtb	r3, r3
 8005086:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	0a1b      	lsrs	r3, r3, #8
 800508c:	b2db      	uxtb	r3, r3
 800508e:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	b2db      	uxtb	r3, r3
 8005094:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8005096:	78fb      	ldrb	r3, [r7, #3]
 8005098:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 800509a:	4b08      	ldr	r3, [pc, #32]	; (80050bc <WIZCHIP_WRITE+0x98>)
 800509c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509e:	f107 020c 	add.w	r2, r7, #12
 80050a2:	2104      	movs	r1, #4
 80050a4:	4610      	mov	r0, r2
 80050a6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80050a8:	4b04      	ldr	r3, [pc, #16]	; (80050bc <WIZCHIP_WRITE+0x98>)
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80050ae:	4b03      	ldr	r3, [pc, #12]	; (80050bc <WIZCHIP_WRITE+0x98>)
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	4798      	blx	r3
}
 80050b4:	bf00      	nop
 80050b6:	3710      	adds	r7, #16
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	2000006c 	.word	0x2000006c

080050c0 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80050c0:	b590      	push	{r4, r7, lr}
 80050c2:	b087      	sub	sp, #28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	4613      	mov	r3, r2
 80050cc:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80050ce:	4b2b      	ldr	r3, [pc, #172]	; (800517c <WIZCHIP_READ_BUF+0xbc>)
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	4798      	blx	r3
   WIZCHIP.CS._select();
 80050d4:	4b29      	ldr	r3, [pc, #164]	; (800517c <WIZCHIP_READ_BUF+0xbc>)
 80050d6:	695b      	ldr	r3, [r3, #20]
 80050d8:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80050da:	4b28      	ldr	r3, [pc, #160]	; (800517c <WIZCHIP_READ_BUF+0xbc>)
 80050dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d003      	beq.n	80050ea <WIZCHIP_READ_BUF+0x2a>
 80050e2:	4b26      	ldr	r3, [pc, #152]	; (800517c <WIZCHIP_READ_BUF+0xbc>)
 80050e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d126      	bne.n	8005138 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80050ea:	4b24      	ldr	r3, [pc, #144]	; (800517c <WIZCHIP_READ_BUF+0xbc>)
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	0c12      	lsrs	r2, r2, #16
 80050f2:	b2d2      	uxtb	r2, r2
 80050f4:	4610      	mov	r0, r2
 80050f6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80050f8:	4b20      	ldr	r3, [pc, #128]	; (800517c <WIZCHIP_READ_BUF+0xbc>)
 80050fa:	6a1b      	ldr	r3, [r3, #32]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	0a12      	lsrs	r2, r2, #8
 8005100:	b2d2      	uxtb	r2, r2
 8005102:	4610      	mov	r0, r2
 8005104:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8005106:	4b1d      	ldr	r3, [pc, #116]	; (800517c <WIZCHIP_READ_BUF+0xbc>)
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	b2d2      	uxtb	r2, r2
 800510e:	4610      	mov	r0, r2
 8005110:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8005112:	2300      	movs	r3, #0
 8005114:	82fb      	strh	r3, [r7, #22]
 8005116:	e00a      	b.n	800512e <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8005118:	4b18      	ldr	r3, [pc, #96]	; (800517c <WIZCHIP_READ_BUF+0xbc>)
 800511a:	69db      	ldr	r3, [r3, #28]
 800511c:	8afa      	ldrh	r2, [r7, #22]
 800511e:	68b9      	ldr	r1, [r7, #8]
 8005120:	188c      	adds	r4, r1, r2
 8005122:	4798      	blx	r3
 8005124:	4603      	mov	r3, r0
 8005126:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8005128:	8afb      	ldrh	r3, [r7, #22]
 800512a:	3301      	adds	r3, #1
 800512c:	82fb      	strh	r3, [r7, #22]
 800512e:	8afa      	ldrh	r2, [r7, #22]
 8005130:	88fb      	ldrh	r3, [r7, #6]
 8005132:	429a      	cmp	r2, r3
 8005134:	d3f0      	bcc.n	8005118 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8005136:	e017      	b.n	8005168 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	0c1b      	lsrs	r3, r3, #16
 800513c:	b2db      	uxtb	r3, r3
 800513e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	0a1b      	lsrs	r3, r3, #8
 8005144:	b2db      	uxtb	r3, r3
 8005146:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	b2db      	uxtb	r3, r3
 800514c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800514e:	4b0b      	ldr	r3, [pc, #44]	; (800517c <WIZCHIP_READ_BUF+0xbc>)
 8005150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005152:	f107 0210 	add.w	r2, r7, #16
 8005156:	2103      	movs	r1, #3
 8005158:	4610      	mov	r0, r2
 800515a:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 800515c:	4b07      	ldr	r3, [pc, #28]	; (800517c <WIZCHIP_READ_BUF+0xbc>)
 800515e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005160:	88fa      	ldrh	r2, [r7, #6]
 8005162:	4611      	mov	r1, r2
 8005164:	68b8      	ldr	r0, [r7, #8]
 8005166:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8005168:	4b04      	ldr	r3, [pc, #16]	; (800517c <WIZCHIP_READ_BUF+0xbc>)
 800516a:	699b      	ldr	r3, [r3, #24]
 800516c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800516e:	4b03      	ldr	r3, [pc, #12]	; (800517c <WIZCHIP_READ_BUF+0xbc>)
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	4798      	blx	r3
}
 8005174:	bf00      	nop
 8005176:	371c      	adds	r7, #28
 8005178:	46bd      	mov	sp, r7
 800517a:	bd90      	pop	{r4, r7, pc}
 800517c:	2000006c 	.word	0x2000006c

08005180 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	4613      	mov	r3, r2
 800518c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800518e:	4b2b      	ldr	r3, [pc, #172]	; (800523c <WIZCHIP_WRITE_BUF+0xbc>)
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	4798      	blx	r3
   WIZCHIP.CS._select();
 8005194:	4b29      	ldr	r3, [pc, #164]	; (800523c <WIZCHIP_WRITE_BUF+0xbc>)
 8005196:	695b      	ldr	r3, [r3, #20]
 8005198:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f043 0304 	orr.w	r3, r3, #4
 80051a0:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80051a2:	4b26      	ldr	r3, [pc, #152]	; (800523c <WIZCHIP_WRITE_BUF+0xbc>)
 80051a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d126      	bne.n	80051f8 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80051aa:	4b24      	ldr	r3, [pc, #144]	; (800523c <WIZCHIP_WRITE_BUF+0xbc>)
 80051ac:	6a1b      	ldr	r3, [r3, #32]
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	0c12      	lsrs	r2, r2, #16
 80051b2:	b2d2      	uxtb	r2, r2
 80051b4:	4610      	mov	r0, r2
 80051b6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80051b8:	4b20      	ldr	r3, [pc, #128]	; (800523c <WIZCHIP_WRITE_BUF+0xbc>)
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	0a12      	lsrs	r2, r2, #8
 80051c0:	b2d2      	uxtb	r2, r2
 80051c2:	4610      	mov	r0, r2
 80051c4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80051c6:	4b1d      	ldr	r3, [pc, #116]	; (800523c <WIZCHIP_WRITE_BUF+0xbc>)
 80051c8:	6a1b      	ldr	r3, [r3, #32]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	b2d2      	uxtb	r2, r2
 80051ce:	4610      	mov	r0, r2
 80051d0:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80051d2:	2300      	movs	r3, #0
 80051d4:	82fb      	strh	r3, [r7, #22]
 80051d6:	e00a      	b.n	80051ee <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80051d8:	4b18      	ldr	r3, [pc, #96]	; (800523c <WIZCHIP_WRITE_BUF+0xbc>)
 80051da:	6a1b      	ldr	r3, [r3, #32]
 80051dc:	8afa      	ldrh	r2, [r7, #22]
 80051de:	68b9      	ldr	r1, [r7, #8]
 80051e0:	440a      	add	r2, r1
 80051e2:	7812      	ldrb	r2, [r2, #0]
 80051e4:	4610      	mov	r0, r2
 80051e6:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80051e8:	8afb      	ldrh	r3, [r7, #22]
 80051ea:	3301      	adds	r3, #1
 80051ec:	82fb      	strh	r3, [r7, #22]
 80051ee:	8afa      	ldrh	r2, [r7, #22]
 80051f0:	88fb      	ldrh	r3, [r7, #6]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d3f0      	bcc.n	80051d8 <WIZCHIP_WRITE_BUF+0x58>
 80051f6:	e017      	b.n	8005228 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	0c1b      	lsrs	r3, r3, #16
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	0a1b      	lsrs	r3, r3, #8
 8005204:	b2db      	uxtb	r3, r3
 8005206:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	b2db      	uxtb	r3, r3
 800520c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800520e:	4b0b      	ldr	r3, [pc, #44]	; (800523c <WIZCHIP_WRITE_BUF+0xbc>)
 8005210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005212:	f107 0210 	add.w	r2, r7, #16
 8005216:	2103      	movs	r1, #3
 8005218:	4610      	mov	r0, r2
 800521a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 800521c:	4b07      	ldr	r3, [pc, #28]	; (800523c <WIZCHIP_WRITE_BUF+0xbc>)
 800521e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005220:	88fa      	ldrh	r2, [r7, #6]
 8005222:	4611      	mov	r1, r2
 8005224:	68b8      	ldr	r0, [r7, #8]
 8005226:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8005228:	4b04      	ldr	r3, [pc, #16]	; (800523c <WIZCHIP_WRITE_BUF+0xbc>)
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800522e:	4b03      	ldr	r3, [pc, #12]	; (800523c <WIZCHIP_WRITE_BUF+0xbc>)
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	4798      	blx	r3
}
 8005234:	bf00      	nop
 8005236:	3718      	adds	r7, #24
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	2000006c 	.word	0x2000006c

08005240 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8005240:	b590      	push	{r4, r7, lr}
 8005242:	b085      	sub	sp, #20
 8005244:	af00      	add	r7, sp, #0
 8005246:	4603      	mov	r3, r0
 8005248:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800524a:	2300      	movs	r3, #0
 800524c:	81fb      	strh	r3, [r7, #14]
 800524e:	2300      	movs	r3, #0
 8005250:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8005252:	79fb      	ldrb	r3, [r7, #7]
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	3301      	adds	r3, #1
 8005258:	00db      	lsls	r3, r3, #3
 800525a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800525e:	4618      	mov	r0, r3
 8005260:	f7ff fe94 	bl	8004f8c <WIZCHIP_READ>
 8005264:	4603      	mov	r3, r0
 8005266:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8005268:	89bb      	ldrh	r3, [r7, #12]
 800526a:	021b      	lsls	r3, r3, #8
 800526c:	b29c      	uxth	r4, r3
 800526e:	79fb      	ldrb	r3, [r7, #7]
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	3301      	adds	r3, #1
 8005274:	00db      	lsls	r3, r3, #3
 8005276:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800527a:	4618      	mov	r0, r3
 800527c:	f7ff fe86 	bl	8004f8c <WIZCHIP_READ>
 8005280:	4603      	mov	r3, r0
 8005282:	b29b      	uxth	r3, r3
 8005284:	4423      	add	r3, r4
 8005286:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8005288:	89bb      	ldrh	r3, [r7, #12]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d01a      	beq.n	80052c4 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 800528e:	79fb      	ldrb	r3, [r7, #7]
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	3301      	adds	r3, #1
 8005294:	00db      	lsls	r3, r3, #3
 8005296:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800529a:	4618      	mov	r0, r3
 800529c:	f7ff fe76 	bl	8004f8c <WIZCHIP_READ>
 80052a0:	4603      	mov	r3, r0
 80052a2:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80052a4:	89fb      	ldrh	r3, [r7, #14]
 80052a6:	021b      	lsls	r3, r3, #8
 80052a8:	b29c      	uxth	r4, r3
 80052aa:	79fb      	ldrb	r3, [r7, #7]
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	3301      	adds	r3, #1
 80052b0:	00db      	lsls	r3, r3, #3
 80052b2:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80052b6:	4618      	mov	r0, r3
 80052b8:	f7ff fe68 	bl	8004f8c <WIZCHIP_READ>
 80052bc:	4603      	mov	r3, r0
 80052be:	b29b      	uxth	r3, r3
 80052c0:	4423      	add	r3, r4
 80052c2:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80052c4:	89fa      	ldrh	r2, [r7, #14]
 80052c6:	89bb      	ldrh	r3, [r7, #12]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d1c2      	bne.n	8005252 <getSn_TX_FSR+0x12>
   return val;
 80052cc:	89fb      	ldrh	r3, [r7, #14]
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd90      	pop	{r4, r7, pc}

080052d6 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80052d6:	b590      	push	{r4, r7, lr}
 80052d8:	b085      	sub	sp, #20
 80052da:	af00      	add	r7, sp, #0
 80052dc:	4603      	mov	r3, r0
 80052de:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80052e0:	2300      	movs	r3, #0
 80052e2:	81fb      	strh	r3, [r7, #14]
 80052e4:	2300      	movs	r3, #0
 80052e6:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80052e8:	79fb      	ldrb	r3, [r7, #7]
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	3301      	adds	r3, #1
 80052ee:	00db      	lsls	r3, r3, #3
 80052f0:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80052f4:	4618      	mov	r0, r3
 80052f6:	f7ff fe49 	bl	8004f8c <WIZCHIP_READ>
 80052fa:	4603      	mov	r3, r0
 80052fc:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80052fe:	89bb      	ldrh	r3, [r7, #12]
 8005300:	021b      	lsls	r3, r3, #8
 8005302:	b29c      	uxth	r4, r3
 8005304:	79fb      	ldrb	r3, [r7, #7]
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	3301      	adds	r3, #1
 800530a:	00db      	lsls	r3, r3, #3
 800530c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8005310:	4618      	mov	r0, r3
 8005312:	f7ff fe3b 	bl	8004f8c <WIZCHIP_READ>
 8005316:	4603      	mov	r3, r0
 8005318:	b29b      	uxth	r3, r3
 800531a:	4423      	add	r3, r4
 800531c:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800531e:	89bb      	ldrh	r3, [r7, #12]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d01a      	beq.n	800535a <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8005324:	79fb      	ldrb	r3, [r7, #7]
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	3301      	adds	r3, #1
 800532a:	00db      	lsls	r3, r3, #3
 800532c:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8005330:	4618      	mov	r0, r3
 8005332:	f7ff fe2b 	bl	8004f8c <WIZCHIP_READ>
 8005336:	4603      	mov	r3, r0
 8005338:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800533a:	89fb      	ldrh	r3, [r7, #14]
 800533c:	021b      	lsls	r3, r3, #8
 800533e:	b29c      	uxth	r4, r3
 8005340:	79fb      	ldrb	r3, [r7, #7]
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	3301      	adds	r3, #1
 8005346:	00db      	lsls	r3, r3, #3
 8005348:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800534c:	4618      	mov	r0, r3
 800534e:	f7ff fe1d 	bl	8004f8c <WIZCHIP_READ>
 8005352:	4603      	mov	r3, r0
 8005354:	b29b      	uxth	r3, r3
 8005356:	4423      	add	r3, r4
 8005358:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800535a:	89fa      	ldrh	r2, [r7, #14]
 800535c:	89bb      	ldrh	r3, [r7, #12]
 800535e:	429a      	cmp	r2, r3
 8005360:	d1c2      	bne.n	80052e8 <getSn_RX_RSR+0x12>
   return val;
 8005362:	89fb      	ldrh	r3, [r7, #14]
}
 8005364:	4618      	mov	r0, r3
 8005366:	3714      	adds	r7, #20
 8005368:	46bd      	mov	sp, r7
 800536a:	bd90      	pop	{r4, r7, pc}

0800536c <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800536c:	b590      	push	{r4, r7, lr}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	4603      	mov	r3, r0
 8005374:	6039      	str	r1, [r7, #0]
 8005376:	71fb      	strb	r3, [r7, #7]
 8005378:	4613      	mov	r3, r2
 800537a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800537c:	2300      	movs	r3, #0
 800537e:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8005380:	2300      	movs	r3, #0
 8005382:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8005384:	88bb      	ldrh	r3, [r7, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d048      	beq.n	800541c <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 800538a:	79fb      	ldrb	r3, [r7, #7]
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	3301      	adds	r3, #1
 8005390:	00db      	lsls	r3, r3, #3
 8005392:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005396:	4618      	mov	r0, r3
 8005398:	f7ff fdf8 	bl	8004f8c <WIZCHIP_READ>
 800539c:	4603      	mov	r3, r0
 800539e:	b29b      	uxth	r3, r3
 80053a0:	021b      	lsls	r3, r3, #8
 80053a2:	b29c      	uxth	r4, r3
 80053a4:	79fb      	ldrb	r3, [r7, #7]
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	3301      	adds	r3, #1
 80053aa:	00db      	lsls	r3, r3, #3
 80053ac:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80053b0:	4618      	mov	r0, r3
 80053b2:	f7ff fdeb 	bl	8004f8c <WIZCHIP_READ>
 80053b6:	4603      	mov	r3, r0
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	4423      	add	r3, r4
 80053bc:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 80053be:	89fb      	ldrh	r3, [r7, #14]
 80053c0:	021b      	lsls	r3, r3, #8
 80053c2:	79fa      	ldrb	r2, [r7, #7]
 80053c4:	0092      	lsls	r2, r2, #2
 80053c6:	3202      	adds	r2, #2
 80053c8:	00d2      	lsls	r2, r2, #3
 80053ca:	4413      	add	r3, r2
 80053cc:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80053ce:	88bb      	ldrh	r3, [r7, #4]
 80053d0:	461a      	mov	r2, r3
 80053d2:	6839      	ldr	r1, [r7, #0]
 80053d4:	68b8      	ldr	r0, [r7, #8]
 80053d6:	f7ff fed3 	bl	8005180 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 80053da:	89fa      	ldrh	r2, [r7, #14]
 80053dc:	88bb      	ldrh	r3, [r7, #4]
 80053de:	4413      	add	r3, r2
 80053e0:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 80053e2:	79fb      	ldrb	r3, [r7, #7]
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	3301      	adds	r3, #1
 80053e8:	00db      	lsls	r3, r3, #3
 80053ea:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80053ee:	461a      	mov	r2, r3
 80053f0:	89fb      	ldrh	r3, [r7, #14]
 80053f2:	0a1b      	lsrs	r3, r3, #8
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	4619      	mov	r1, r3
 80053fa:	4610      	mov	r0, r2
 80053fc:	f7ff fe12 	bl	8005024 <WIZCHIP_WRITE>
 8005400:	79fb      	ldrb	r3, [r7, #7]
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	3301      	adds	r3, #1
 8005406:	00db      	lsls	r3, r3, #3
 8005408:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 800540c:	461a      	mov	r2, r3
 800540e:	89fb      	ldrh	r3, [r7, #14]
 8005410:	b2db      	uxtb	r3, r3
 8005412:	4619      	mov	r1, r3
 8005414:	4610      	mov	r0, r2
 8005416:	f7ff fe05 	bl	8005024 <WIZCHIP_WRITE>
 800541a:	e000      	b.n	800541e <wiz_send_data+0xb2>
   if(len == 0)  return;
 800541c:	bf00      	nop
}
 800541e:	3714      	adds	r7, #20
 8005420:	46bd      	mov	sp, r7
 8005422:	bd90      	pop	{r4, r7, pc}

08005424 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8005424:	b590      	push	{r4, r7, lr}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	4603      	mov	r3, r0
 800542c:	6039      	str	r1, [r7, #0]
 800542e:	71fb      	strb	r3, [r7, #7]
 8005430:	4613      	mov	r3, r2
 8005432:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8005434:	2300      	movs	r3, #0
 8005436:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8005438:	2300      	movs	r3, #0
 800543a:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 800543c:	88bb      	ldrh	r3, [r7, #4]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d048      	beq.n	80054d4 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8005442:	79fb      	ldrb	r3, [r7, #7]
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	3301      	adds	r3, #1
 8005448:	00db      	lsls	r3, r3, #3
 800544a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800544e:	4618      	mov	r0, r3
 8005450:	f7ff fd9c 	bl	8004f8c <WIZCHIP_READ>
 8005454:	4603      	mov	r3, r0
 8005456:	b29b      	uxth	r3, r3
 8005458:	021b      	lsls	r3, r3, #8
 800545a:	b29c      	uxth	r4, r3
 800545c:	79fb      	ldrb	r3, [r7, #7]
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	3301      	adds	r3, #1
 8005462:	00db      	lsls	r3, r3, #3
 8005464:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8005468:	4618      	mov	r0, r3
 800546a:	f7ff fd8f 	bl	8004f8c <WIZCHIP_READ>
 800546e:	4603      	mov	r3, r0
 8005470:	b29b      	uxth	r3, r3
 8005472:	4423      	add	r3, r4
 8005474:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8005476:	89fb      	ldrh	r3, [r7, #14]
 8005478:	021b      	lsls	r3, r3, #8
 800547a:	79fa      	ldrb	r2, [r7, #7]
 800547c:	0092      	lsls	r2, r2, #2
 800547e:	3203      	adds	r2, #3
 8005480:	00d2      	lsls	r2, r2, #3
 8005482:	4413      	add	r3, r2
 8005484:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8005486:	88bb      	ldrh	r3, [r7, #4]
 8005488:	461a      	mov	r2, r3
 800548a:	6839      	ldr	r1, [r7, #0]
 800548c:	68b8      	ldr	r0, [r7, #8]
 800548e:	f7ff fe17 	bl	80050c0 <WIZCHIP_READ_BUF>
   ptr += len;
 8005492:	89fa      	ldrh	r2, [r7, #14]
 8005494:	88bb      	ldrh	r3, [r7, #4]
 8005496:	4413      	add	r3, r2
 8005498:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 800549a:	79fb      	ldrb	r3, [r7, #7]
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	3301      	adds	r3, #1
 80054a0:	00db      	lsls	r3, r3, #3
 80054a2:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80054a6:	461a      	mov	r2, r3
 80054a8:	89fb      	ldrh	r3, [r7, #14]
 80054aa:	0a1b      	lsrs	r3, r3, #8
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	4619      	mov	r1, r3
 80054b2:	4610      	mov	r0, r2
 80054b4:	f7ff fdb6 	bl	8005024 <WIZCHIP_WRITE>
 80054b8:	79fb      	ldrb	r3, [r7, #7]
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	3301      	adds	r3, #1
 80054be:	00db      	lsls	r3, r3, #3
 80054c0:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80054c4:	461a      	mov	r2, r3
 80054c6:	89fb      	ldrh	r3, [r7, #14]
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	4619      	mov	r1, r3
 80054cc:	4610      	mov	r0, r2
 80054ce:	f7ff fda9 	bl	8005024 <WIZCHIP_WRITE>
 80054d2:	e000      	b.n	80054d6 <wiz_recv_data+0xb2>
   if(len == 0) return;
 80054d4:	bf00      	nop
}
 80054d6:	3714      	adds	r7, #20
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd90      	pop	{r4, r7, pc}

080054dc <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 80054dc:	b590      	push	{r4, r7, lr}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	4603      	mov	r3, r0
 80054e4:	460a      	mov	r2, r1
 80054e6:	71fb      	strb	r3, [r7, #7]
 80054e8:	4613      	mov	r3, r2
 80054ea:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80054ec:	2300      	movs	r3, #0
 80054ee:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 80054f0:	79fb      	ldrb	r3, [r7, #7]
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	3301      	adds	r3, #1
 80054f6:	00db      	lsls	r3, r3, #3
 80054f8:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80054fc:	4618      	mov	r0, r3
 80054fe:	f7ff fd45 	bl	8004f8c <WIZCHIP_READ>
 8005502:	4603      	mov	r3, r0
 8005504:	b29b      	uxth	r3, r3
 8005506:	021b      	lsls	r3, r3, #8
 8005508:	b29c      	uxth	r4, r3
 800550a:	79fb      	ldrb	r3, [r7, #7]
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	3301      	adds	r3, #1
 8005510:	00db      	lsls	r3, r3, #3
 8005512:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8005516:	4618      	mov	r0, r3
 8005518:	f7ff fd38 	bl	8004f8c <WIZCHIP_READ>
 800551c:	4603      	mov	r3, r0
 800551e:	b29b      	uxth	r3, r3
 8005520:	4423      	add	r3, r4
 8005522:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8005524:	89fa      	ldrh	r2, [r7, #14]
 8005526:	88bb      	ldrh	r3, [r7, #4]
 8005528:	4413      	add	r3, r2
 800552a:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 800552c:	79fb      	ldrb	r3, [r7, #7]
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	3301      	adds	r3, #1
 8005532:	00db      	lsls	r3, r3, #3
 8005534:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8005538:	461a      	mov	r2, r3
 800553a:	89fb      	ldrh	r3, [r7, #14]
 800553c:	0a1b      	lsrs	r3, r3, #8
 800553e:	b29b      	uxth	r3, r3
 8005540:	b2db      	uxtb	r3, r3
 8005542:	4619      	mov	r1, r3
 8005544:	4610      	mov	r0, r2
 8005546:	f7ff fd6d 	bl	8005024 <WIZCHIP_WRITE>
 800554a:	79fb      	ldrb	r3, [r7, #7]
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	3301      	adds	r3, #1
 8005550:	00db      	lsls	r3, r3, #3
 8005552:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8005556:	461a      	mov	r2, r3
 8005558:	89fb      	ldrh	r3, [r7, #14]
 800555a:	b2db      	uxtb	r3, r3
 800555c:	4619      	mov	r1, r3
 800555e:	4610      	mov	r0, r2
 8005560:	f7ff fd60 	bl	8005024 <WIZCHIP_WRITE>
}
 8005564:	bf00      	nop
 8005566:	3714      	adds	r7, #20
 8005568:	46bd      	mov	sp, r7
 800556a:	bd90      	pop	{r4, r7, pc}

0800556c <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 800556c:	b590      	push	{r4, r7, lr}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
 8005572:	4604      	mov	r4, r0
 8005574:	4608      	mov	r0, r1
 8005576:	4611      	mov	r1, r2
 8005578:	461a      	mov	r2, r3
 800557a:	4623      	mov	r3, r4
 800557c:	71fb      	strb	r3, [r7, #7]
 800557e:	4603      	mov	r3, r0
 8005580:	71bb      	strb	r3, [r7, #6]
 8005582:	460b      	mov	r3, r1
 8005584:	80bb      	strh	r3, [r7, #4]
 8005586:	4613      	mov	r3, r2
 8005588:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 800558a:	79fb      	ldrb	r3, [r7, #7]
 800558c:	2b08      	cmp	r3, #8
 800558e:	d902      	bls.n	8005596 <socket+0x2a>
 8005590:	f04f 33ff 	mov.w	r3, #4294967295
 8005594:	e0f2      	b.n	800577c <socket+0x210>
	switch(protocol)
 8005596:	79bb      	ldrb	r3, [r7, #6]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d005      	beq.n	80055a8 <socket+0x3c>
 800559c:	2b00      	cmp	r3, #0
 800559e:	dd11      	ble.n	80055c4 <socket+0x58>
 80055a0:	3b02      	subs	r3, #2
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d80e      	bhi.n	80055c4 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 80055a6:	e011      	b.n	80055cc <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 80055a8:	f107 030c 	add.w	r3, r7, #12
 80055ac:	2204      	movs	r2, #4
 80055ae:	4619      	mov	r1, r3
 80055b0:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80055b4:	f7ff fd84 	bl	80050c0 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d105      	bne.n	80055ca <socket+0x5e>
 80055be:	f06f 0302 	mvn.w	r3, #2
 80055c2:	e0db      	b.n	800577c <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 80055c4:	f06f 0304 	mvn.w	r3, #4
 80055c8:	e0d8      	b.n	800577c <socket+0x210>
	    break;
 80055ca:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 80055cc:	78fb      	ldrb	r3, [r7, #3]
 80055ce:	f003 0304 	and.w	r3, r3, #4
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d002      	beq.n	80055dc <socket+0x70>
 80055d6:	f06f 0305 	mvn.w	r3, #5
 80055da:	e0cf      	b.n	800577c <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 80055dc:	78fb      	ldrb	r3, [r7, #3]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d025      	beq.n	800562e <socket+0xc2>
	{
   	switch(protocol)
 80055e2:	79bb      	ldrb	r3, [r7, #6]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d002      	beq.n	80055ee <socket+0x82>
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d008      	beq.n	80055fe <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 80055ec:	e024      	b.n	8005638 <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 80055ee:	78fb      	ldrb	r3, [r7, #3]
 80055f0:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d11c      	bne.n	8005632 <socket+0xc6>
 80055f8:	f06f 0305 	mvn.w	r3, #5
 80055fc:	e0be      	b.n	800577c <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 80055fe:	78fb      	ldrb	r3, [r7, #3]
 8005600:	f003 0320 	and.w	r3, r3, #32
 8005604:	2b00      	cmp	r3, #0
 8005606:	d006      	beq.n	8005616 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8005608:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800560c:	2b00      	cmp	r3, #0
 800560e:	db02      	blt.n	8005616 <socket+0xaa>
 8005610:	f06f 0305 	mvn.w	r3, #5
 8005614:	e0b2      	b.n	800577c <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 8005616:	78fb      	ldrb	r3, [r7, #3]
 8005618:	f003 0310 	and.w	r3, r3, #16
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00a      	beq.n	8005636 <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8005620:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005624:	2b00      	cmp	r3, #0
 8005626:	db06      	blt.n	8005636 <socket+0xca>
 8005628:	f06f 0305 	mvn.w	r3, #5
 800562c:	e0a6      	b.n	800577c <socket+0x210>
   	}
   }
 800562e:	bf00      	nop
 8005630:	e002      	b.n	8005638 <socket+0xcc>
   	      break;
 8005632:	bf00      	nop
 8005634:	e000      	b.n	8005638 <socket+0xcc>
   	      break;
 8005636:	bf00      	nop
	close(sn);
 8005638:	79fb      	ldrb	r3, [r7, #7]
 800563a:	4618      	mov	r0, r3
 800563c:	f000 f8ac 	bl	8005798 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8005640:	79fb      	ldrb	r3, [r7, #7]
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	3301      	adds	r3, #1
 8005646:	00db      	lsls	r3, r3, #3
 8005648:	4618      	mov	r0, r3
 800564a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800564e:	f023 030f 	bic.w	r3, r3, #15
 8005652:	b25a      	sxtb	r2, r3
 8005654:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005658:	4313      	orrs	r3, r2
 800565a:	b25b      	sxtb	r3, r3
 800565c:	b2db      	uxtb	r3, r3
 800565e:	4619      	mov	r1, r3
 8005660:	f7ff fce0 	bl	8005024 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8005664:	88bb      	ldrh	r3, [r7, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d110      	bne.n	800568c <socket+0x120>
	{
	   port = sock_any_port++;
 800566a:	4b46      	ldr	r3, [pc, #280]	; (8005784 <socket+0x218>)
 800566c:	881b      	ldrh	r3, [r3, #0]
 800566e:	1c5a      	adds	r2, r3, #1
 8005670:	b291      	uxth	r1, r2
 8005672:	4a44      	ldr	r2, [pc, #272]	; (8005784 <socket+0x218>)
 8005674:	8011      	strh	r1, [r2, #0]
 8005676:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8005678:	4b42      	ldr	r3, [pc, #264]	; (8005784 <socket+0x218>)
 800567a:	881b      	ldrh	r3, [r3, #0]
 800567c:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8005680:	4293      	cmp	r3, r2
 8005682:	d103      	bne.n	800568c <socket+0x120>
 8005684:	4b3f      	ldr	r3, [pc, #252]	; (8005784 <socket+0x218>)
 8005686:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800568a:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 800568c:	79fb      	ldrb	r3, [r7, #7]
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	3301      	adds	r3, #1
 8005692:	00db      	lsls	r3, r3, #3
 8005694:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005698:	461a      	mov	r2, r3
 800569a:	88bb      	ldrh	r3, [r7, #4]
 800569c:	0a1b      	lsrs	r3, r3, #8
 800569e:	b29b      	uxth	r3, r3
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	4619      	mov	r1, r3
 80056a4:	4610      	mov	r0, r2
 80056a6:	f7ff fcbd 	bl	8005024 <WIZCHIP_WRITE>
 80056aa:	79fb      	ldrb	r3, [r7, #7]
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	3301      	adds	r3, #1
 80056b0:	00db      	lsls	r3, r3, #3
 80056b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056b6:	461a      	mov	r2, r3
 80056b8:	88bb      	ldrh	r3, [r7, #4]
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	4619      	mov	r1, r3
 80056be:	4610      	mov	r0, r2
 80056c0:	f7ff fcb0 	bl	8005024 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 80056c4:	79fb      	ldrb	r3, [r7, #7]
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	3301      	adds	r3, #1
 80056ca:	00db      	lsls	r3, r3, #3
 80056cc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80056d0:	2101      	movs	r1, #1
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7ff fca6 	bl	8005024 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80056d8:	bf00      	nop
 80056da:	79fb      	ldrb	r3, [r7, #7]
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	3301      	adds	r3, #1
 80056e0:	00db      	lsls	r3, r3, #3
 80056e2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7ff fc50 	bl	8004f8c <WIZCHIP_READ>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1f3      	bne.n	80056da <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 80056f2:	79fb      	ldrb	r3, [r7, #7]
 80056f4:	2201      	movs	r2, #1
 80056f6:	fa02 f303 	lsl.w	r3, r2, r3
 80056fa:	b21b      	sxth	r3, r3
 80056fc:	43db      	mvns	r3, r3
 80056fe:	b21a      	sxth	r2, r3
 8005700:	4b21      	ldr	r3, [pc, #132]	; (8005788 <socket+0x21c>)
 8005702:	881b      	ldrh	r3, [r3, #0]
 8005704:	b21b      	sxth	r3, r3
 8005706:	4013      	ands	r3, r2
 8005708:	b21b      	sxth	r3, r3
 800570a:	b29a      	uxth	r2, r3
 800570c:	4b1e      	ldr	r3, [pc, #120]	; (8005788 <socket+0x21c>)
 800570e:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8005710:	78fb      	ldrb	r3, [r7, #3]
 8005712:	f003 0201 	and.w	r2, r3, #1
 8005716:	79fb      	ldrb	r3, [r7, #7]
 8005718:	fa02 f303 	lsl.w	r3, r2, r3
 800571c:	b21a      	sxth	r2, r3
 800571e:	4b1a      	ldr	r3, [pc, #104]	; (8005788 <socket+0x21c>)
 8005720:	881b      	ldrh	r3, [r3, #0]
 8005722:	b21b      	sxth	r3, r3
 8005724:	4313      	orrs	r3, r2
 8005726:	b21b      	sxth	r3, r3
 8005728:	b29a      	uxth	r2, r3
 800572a:	4b17      	ldr	r3, [pc, #92]	; (8005788 <socket+0x21c>)
 800572c:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 800572e:	79fb      	ldrb	r3, [r7, #7]
 8005730:	2201      	movs	r2, #1
 8005732:	fa02 f303 	lsl.w	r3, r2, r3
 8005736:	b21b      	sxth	r3, r3
 8005738:	43db      	mvns	r3, r3
 800573a:	b21a      	sxth	r2, r3
 800573c:	4b13      	ldr	r3, [pc, #76]	; (800578c <socket+0x220>)
 800573e:	881b      	ldrh	r3, [r3, #0]
 8005740:	b21b      	sxth	r3, r3
 8005742:	4013      	ands	r3, r2
 8005744:	b21b      	sxth	r3, r3
 8005746:	b29a      	uxth	r2, r3
 8005748:	4b10      	ldr	r3, [pc, #64]	; (800578c <socket+0x220>)
 800574a:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 800574c:	79fb      	ldrb	r3, [r7, #7]
 800574e:	4a10      	ldr	r2, [pc, #64]	; (8005790 <socket+0x224>)
 8005750:	2100      	movs	r1, #0
 8005752:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8005756:	79fb      	ldrb	r3, [r7, #7]
 8005758:	4a0e      	ldr	r2, [pc, #56]	; (8005794 <socket+0x228>)
 800575a:	2100      	movs	r1, #0
 800575c:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 800575e:	bf00      	nop
 8005760:	79fb      	ldrb	r3, [r7, #7]
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	3301      	adds	r3, #1
 8005766:	00db      	lsls	r3, r3, #3
 8005768:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800576c:	4618      	mov	r0, r3
 800576e:	f7ff fc0d 	bl	8004f8c <WIZCHIP_READ>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d0f3      	beq.n	8005760 <socket+0x1f4>
   return (int8_t)sn;
 8005778:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 800577c:	4618      	mov	r0, r3
 800577e:	3714      	adds	r7, #20
 8005780:	46bd      	mov	sp, r7
 8005782:	bd90      	pop	{r4, r7, pc}
 8005784:	20000068 	.word	0x20000068
 8005788:	20001a74 	.word	0x20001a74
 800578c:	20001a76 	.word	0x20001a76
 8005790:	20001a78 	.word	0x20001a78
 8005794:	20001a88 	.word	0x20001a88

08005798 <close>:

int8_t close(uint8_t sn)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	4603      	mov	r3, r0
 80057a0:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 80057a2:	79fb      	ldrb	r3, [r7, #7]
 80057a4:	2b08      	cmp	r3, #8
 80057a6:	d902      	bls.n	80057ae <close+0x16>
 80057a8:	f04f 33ff 	mov.w	r3, #4294967295
 80057ac:	e055      	b.n	800585a <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 80057ae:	79fb      	ldrb	r3, [r7, #7]
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	3301      	adds	r3, #1
 80057b4:	00db      	lsls	r3, r3, #3
 80057b6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80057ba:	2110      	movs	r1, #16
 80057bc:	4618      	mov	r0, r3
 80057be:	f7ff fc31 	bl	8005024 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 80057c2:	bf00      	nop
 80057c4:	79fb      	ldrb	r3, [r7, #7]
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	3301      	adds	r3, #1
 80057ca:	00db      	lsls	r3, r3, #3
 80057cc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80057d0:	4618      	mov	r0, r3
 80057d2:	f7ff fbdb 	bl	8004f8c <WIZCHIP_READ>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1f3      	bne.n	80057c4 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 80057dc:	79fb      	ldrb	r3, [r7, #7]
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	3301      	adds	r3, #1
 80057e2:	00db      	lsls	r3, r3, #3
 80057e4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80057e8:	211f      	movs	r1, #31
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7ff fc1a 	bl	8005024 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 80057f0:	79fb      	ldrb	r3, [r7, #7]
 80057f2:	2201      	movs	r2, #1
 80057f4:	fa02 f303 	lsl.w	r3, r2, r3
 80057f8:	b21b      	sxth	r3, r3
 80057fa:	43db      	mvns	r3, r3
 80057fc:	b21a      	sxth	r2, r3
 80057fe:	4b19      	ldr	r3, [pc, #100]	; (8005864 <close+0xcc>)
 8005800:	881b      	ldrh	r3, [r3, #0]
 8005802:	b21b      	sxth	r3, r3
 8005804:	4013      	ands	r3, r2
 8005806:	b21b      	sxth	r3, r3
 8005808:	b29a      	uxth	r2, r3
 800580a:	4b16      	ldr	r3, [pc, #88]	; (8005864 <close+0xcc>)
 800580c:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 800580e:	79fb      	ldrb	r3, [r7, #7]
 8005810:	2201      	movs	r2, #1
 8005812:	fa02 f303 	lsl.w	r3, r2, r3
 8005816:	b21b      	sxth	r3, r3
 8005818:	43db      	mvns	r3, r3
 800581a:	b21a      	sxth	r2, r3
 800581c:	4b12      	ldr	r3, [pc, #72]	; (8005868 <close+0xd0>)
 800581e:	881b      	ldrh	r3, [r3, #0]
 8005820:	b21b      	sxth	r3, r3
 8005822:	4013      	ands	r3, r2
 8005824:	b21b      	sxth	r3, r3
 8005826:	b29a      	uxth	r2, r3
 8005828:	4b0f      	ldr	r3, [pc, #60]	; (8005868 <close+0xd0>)
 800582a:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 800582c:	79fb      	ldrb	r3, [r7, #7]
 800582e:	4a0f      	ldr	r2, [pc, #60]	; (800586c <close+0xd4>)
 8005830:	2100      	movs	r1, #0
 8005832:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8005836:	79fb      	ldrb	r3, [r7, #7]
 8005838:	4a0d      	ldr	r2, [pc, #52]	; (8005870 <close+0xd8>)
 800583a:	2100      	movs	r1, #0
 800583c:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 800583e:	bf00      	nop
 8005840:	79fb      	ldrb	r3, [r7, #7]
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	3301      	adds	r3, #1
 8005846:	00db      	lsls	r3, r3, #3
 8005848:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800584c:	4618      	mov	r0, r3
 800584e:	f7ff fb9d 	bl	8004f8c <WIZCHIP_READ>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1f3      	bne.n	8005840 <close+0xa8>
	return SOCK_OK;
 8005858:	2301      	movs	r3, #1
}
 800585a:	4618      	mov	r0, r3
 800585c:	3708      	adds	r7, #8
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	20001a74 	.word	0x20001a74
 8005868:	20001a76 	.word	0x20001a76
 800586c:	20001a78 	.word	0x20001a78
 8005870:	20001a88 	.word	0x20001a88

08005874 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	4603      	mov	r3, r0
 800587c:	6039      	str	r1, [r7, #0]
 800587e:	71fb      	strb	r3, [r7, #7]
 8005880:	4613      	mov	r3, r2
 8005882:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8005884:	79fb      	ldrb	r3, [r7, #7]
 8005886:	2b08      	cmp	r3, #8
 8005888:	d902      	bls.n	8005890 <connect+0x1c>
 800588a:	f04f 33ff 	mov.w	r3, #4294967295
 800588e:	e0c6      	b.n	8005a1e <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8005890:	79fb      	ldrb	r3, [r7, #7]
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	3301      	adds	r3, #1
 8005896:	00db      	lsls	r3, r3, #3
 8005898:	4618      	mov	r0, r3
 800589a:	f7ff fb77 	bl	8004f8c <WIZCHIP_READ>
 800589e:	4603      	mov	r3, r0
 80058a0:	f003 030f 	and.w	r3, r3, #15
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d002      	beq.n	80058ae <connect+0x3a>
 80058a8:	f06f 0304 	mvn.w	r3, #4
 80058ac:	e0b7      	b.n	8005a1e <connect+0x1aa>
   CHECK_SOCKINIT();
 80058ae:	79fb      	ldrb	r3, [r7, #7]
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	3301      	adds	r3, #1
 80058b4:	00db      	lsls	r3, r3, #3
 80058b6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7ff fb66 	bl	8004f8c <WIZCHIP_READ>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b13      	cmp	r3, #19
 80058c4:	d002      	beq.n	80058cc <connect+0x58>
 80058c6:	f06f 0302 	mvn.w	r3, #2
 80058ca:	e0a8      	b.n	8005a1e <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	021b      	lsls	r3, r3, #8
 80058d6:	683a      	ldr	r2, [r7, #0]
 80058d8:	3201      	adds	r2, #1
 80058da:	7812      	ldrb	r2, [r2, #0]
 80058dc:	4413      	add	r3, r2
 80058de:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	021b      	lsls	r3, r3, #8
 80058e4:	683a      	ldr	r2, [r7, #0]
 80058e6:	3202      	adds	r2, #2
 80058e8:	7812      	ldrb	r2, [r2, #0]
 80058ea:	4413      	add	r3, r2
 80058ec:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	021b      	lsls	r3, r3, #8
 80058f2:	683a      	ldr	r2, [r7, #0]
 80058f4:	3203      	adds	r2, #3
 80058f6:	7812      	ldrb	r2, [r2, #0]
 80058f8:	4413      	add	r3, r2
 80058fa:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005902:	d002      	beq.n	800590a <connect+0x96>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d102      	bne.n	8005910 <connect+0x9c>
 800590a:	f06f 030b 	mvn.w	r3, #11
 800590e:	e086      	b.n	8005a1e <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8005910:	88bb      	ldrh	r3, [r7, #4]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d102      	bne.n	800591c <connect+0xa8>
 8005916:	f06f 030a 	mvn.w	r3, #10
 800591a:	e080      	b.n	8005a1e <connect+0x1aa>
	setSn_DIPR(sn,addr);
 800591c:	79fb      	ldrb	r3, [r7, #7]
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	3301      	adds	r3, #1
 8005922:	00db      	lsls	r3, r3, #3
 8005924:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8005928:	2204      	movs	r2, #4
 800592a:	6839      	ldr	r1, [r7, #0]
 800592c:	4618      	mov	r0, r3
 800592e:	f7ff fc27 	bl	8005180 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 8005932:	79fb      	ldrb	r3, [r7, #7]
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	3301      	adds	r3, #1
 8005938:	00db      	lsls	r3, r3, #3
 800593a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800593e:	461a      	mov	r2, r3
 8005940:	88bb      	ldrh	r3, [r7, #4]
 8005942:	0a1b      	lsrs	r3, r3, #8
 8005944:	b29b      	uxth	r3, r3
 8005946:	b2db      	uxtb	r3, r3
 8005948:	4619      	mov	r1, r3
 800594a:	4610      	mov	r0, r2
 800594c:	f7ff fb6a 	bl	8005024 <WIZCHIP_WRITE>
 8005950:	79fb      	ldrb	r3, [r7, #7]
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	3301      	adds	r3, #1
 8005956:	00db      	lsls	r3, r3, #3
 8005958:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800595c:	461a      	mov	r2, r3
 800595e:	88bb      	ldrh	r3, [r7, #4]
 8005960:	b2db      	uxtb	r3, r3
 8005962:	4619      	mov	r1, r3
 8005964:	4610      	mov	r0, r2
 8005966:	f7ff fb5d 	bl	8005024 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 800596a:	79fb      	ldrb	r3, [r7, #7]
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	3301      	adds	r3, #1
 8005970:	00db      	lsls	r3, r3, #3
 8005972:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005976:	2104      	movs	r1, #4
 8005978:	4618      	mov	r0, r3
 800597a:	f7ff fb53 	bl	8005024 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800597e:	bf00      	nop
 8005980:	79fb      	ldrb	r3, [r7, #7]
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	3301      	adds	r3, #1
 8005986:	00db      	lsls	r3, r3, #3
 8005988:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800598c:	4618      	mov	r0, r3
 800598e:	f7ff fafd 	bl	8004f8c <WIZCHIP_READ>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1f3      	bne.n	8005980 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8005998:	4b23      	ldr	r3, [pc, #140]	; (8005a28 <connect+0x1b4>)
 800599a:	881b      	ldrh	r3, [r3, #0]
 800599c:	461a      	mov	r2, r3
 800599e:	79fb      	ldrb	r3, [r7, #7]
 80059a0:	fa42 f303 	asr.w	r3, r2, r3
 80059a4:	f003 0301 	and.w	r3, r3, #1
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d02b      	beq.n	8005a04 <connect+0x190>
 80059ac:	2300      	movs	r3, #0
 80059ae:	e036      	b.n	8005a1e <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 80059b0:	79fb      	ldrb	r3, [r7, #7]
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	3301      	adds	r3, #1
 80059b6:	00db      	lsls	r3, r3, #3
 80059b8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80059bc:	4618      	mov	r0, r3
 80059be:	f7ff fae5 	bl	8004f8c <WIZCHIP_READ>
 80059c2:	4603      	mov	r3, r0
 80059c4:	f003 0308 	and.w	r3, r3, #8
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00c      	beq.n	80059e6 <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 80059cc:	79fb      	ldrb	r3, [r7, #7]
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	3301      	adds	r3, #1
 80059d2:	00db      	lsls	r3, r3, #3
 80059d4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80059d8:	2108      	movs	r1, #8
 80059da:	4618      	mov	r0, r3
 80059dc:	f7ff fb22 	bl	8005024 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 80059e0:	f06f 030c 	mvn.w	r3, #12
 80059e4:	e01b      	b.n	8005a1e <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 80059e6:	79fb      	ldrb	r3, [r7, #7]
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	3301      	adds	r3, #1
 80059ec:	00db      	lsls	r3, r3, #3
 80059ee:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80059f2:	4618      	mov	r0, r3
 80059f4:	f7ff faca 	bl	8004f8c <WIZCHIP_READ>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d102      	bne.n	8005a04 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 80059fe:	f06f 0303 	mvn.w	r3, #3
 8005a02:	e00c      	b.n	8005a1e <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8005a04:	79fb      	ldrb	r3, [r7, #7]
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	3301      	adds	r3, #1
 8005a0a:	00db      	lsls	r3, r3, #3
 8005a0c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005a10:	4618      	mov	r0, r3
 8005a12:	f7ff fabb 	bl	8004f8c <WIZCHIP_READ>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b17      	cmp	r3, #23
 8005a1a:	d1c9      	bne.n	80059b0 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 8005a1c:	2301      	movs	r3, #1
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3710      	adds	r7, #16
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	20001a74 	.word	0x20001a74

08005a2c <disconnect>:

int8_t disconnect(uint8_t sn)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	4603      	mov	r3, r0
 8005a34:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8005a36:	79fb      	ldrb	r3, [r7, #7]
 8005a38:	2b08      	cmp	r3, #8
 8005a3a:	d902      	bls.n	8005a42 <disconnect+0x16>
 8005a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8005a40:	e062      	b.n	8005b08 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8005a42:	79fb      	ldrb	r3, [r7, #7]
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	3301      	adds	r3, #1
 8005a48:	00db      	lsls	r3, r3, #3
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7ff fa9e 	bl	8004f8c <WIZCHIP_READ>
 8005a50:	4603      	mov	r3, r0
 8005a52:	f003 030f 	and.w	r3, r3, #15
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d002      	beq.n	8005a60 <disconnect+0x34>
 8005a5a:	f06f 0304 	mvn.w	r3, #4
 8005a5e:	e053      	b.n	8005b08 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8005a60:	79fb      	ldrb	r3, [r7, #7]
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	3301      	adds	r3, #1
 8005a66:	00db      	lsls	r3, r3, #3
 8005a68:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005a6c:	2108      	movs	r1, #8
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7ff fad8 	bl	8005024 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8005a74:	bf00      	nop
 8005a76:	79fb      	ldrb	r3, [r7, #7]
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	00db      	lsls	r3, r3, #3
 8005a7e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7ff fa82 	bl	8004f8c <WIZCHIP_READ>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1f3      	bne.n	8005a76 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 8005a8e:	79fb      	ldrb	r3, [r7, #7]
 8005a90:	2201      	movs	r2, #1
 8005a92:	fa02 f303 	lsl.w	r3, r2, r3
 8005a96:	b21b      	sxth	r3, r3
 8005a98:	43db      	mvns	r3, r3
 8005a9a:	b21a      	sxth	r2, r3
 8005a9c:	4b1c      	ldr	r3, [pc, #112]	; (8005b10 <disconnect+0xe4>)
 8005a9e:	881b      	ldrh	r3, [r3, #0]
 8005aa0:	b21b      	sxth	r3, r3
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	b21b      	sxth	r3, r3
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	4b19      	ldr	r3, [pc, #100]	; (8005b10 <disconnect+0xe4>)
 8005aaa:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8005aac:	4b19      	ldr	r3, [pc, #100]	; (8005b14 <disconnect+0xe8>)
 8005aae:	881b      	ldrh	r3, [r3, #0]
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	79fb      	ldrb	r3, [r7, #7]
 8005ab4:	fa42 f303 	asr.w	r3, r2, r3
 8005ab8:	f003 0301 	and.w	r3, r3, #1
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d016      	beq.n	8005aee <disconnect+0xc2>
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	e021      	b.n	8005b08 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8005ac4:	79fb      	ldrb	r3, [r7, #7]
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	3301      	adds	r3, #1
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f7ff fa5b 	bl	8004f8c <WIZCHIP_READ>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	f003 0308 	and.w	r3, r3, #8
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d006      	beq.n	8005aee <disconnect+0xc2>
	   {
	      close(sn);
 8005ae0:	79fb      	ldrb	r3, [r7, #7]
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7ff fe58 	bl	8005798 <close>
	      return SOCKERR_TIMEOUT;
 8005ae8:	f06f 030c 	mvn.w	r3, #12
 8005aec:	e00c      	b.n	8005b08 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8005aee:	79fb      	ldrb	r3, [r7, #7]
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	3301      	adds	r3, #1
 8005af4:	00db      	lsls	r3, r3, #3
 8005af6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7ff fa46 	bl	8004f8c <WIZCHIP_READ>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d1de      	bne.n	8005ac4 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 8005b06:	2301      	movs	r3, #1
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3708      	adds	r7, #8
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	20001a76 	.word	0x20001a76
 8005b14:	20001a74 	.word	0x20001a74

08005b18 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	4603      	mov	r3, r0
 8005b20:	6039      	str	r1, [r7, #0]
 8005b22:	71fb      	strb	r3, [r7, #7]
 8005b24:	4613      	mov	r3, r2
 8005b26:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8005b30:	79fb      	ldrb	r3, [r7, #7]
 8005b32:	2b08      	cmp	r3, #8
 8005b34:	d902      	bls.n	8005b3c <send+0x24>
 8005b36:	f04f 33ff 	mov.w	r3, #4294967295
 8005b3a:	e0de      	b.n	8005cfa <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8005b3c:	79fb      	ldrb	r3, [r7, #7]
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	3301      	adds	r3, #1
 8005b42:	00db      	lsls	r3, r3, #3
 8005b44:	4618      	mov	r0, r3
 8005b46:	f7ff fa21 	bl	8004f8c <WIZCHIP_READ>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	f003 030f 	and.w	r3, r3, #15
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d002      	beq.n	8005b5a <send+0x42>
 8005b54:	f06f 0304 	mvn.w	r3, #4
 8005b58:	e0cf      	b.n	8005cfa <send+0x1e2>
   CHECK_SOCKDATA();
 8005b5a:	88bb      	ldrh	r3, [r7, #4]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d102      	bne.n	8005b66 <send+0x4e>
 8005b60:	f06f 030d 	mvn.w	r3, #13
 8005b64:	e0c9      	b.n	8005cfa <send+0x1e2>
   tmp = getSn_SR(sn);
 8005b66:	79fb      	ldrb	r3, [r7, #7]
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	00db      	lsls	r3, r3, #3
 8005b6e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7ff fa0a 	bl	8004f8c <WIZCHIP_READ>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8005b7c:	7bfb      	ldrb	r3, [r7, #15]
 8005b7e:	2b17      	cmp	r3, #23
 8005b80:	d005      	beq.n	8005b8e <send+0x76>
 8005b82:	7bfb      	ldrb	r3, [r7, #15]
 8005b84:	2b1c      	cmp	r3, #28
 8005b86:	d002      	beq.n	8005b8e <send+0x76>
 8005b88:	f06f 0306 	mvn.w	r3, #6
 8005b8c:	e0b5      	b.n	8005cfa <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8005b8e:	4b5d      	ldr	r3, [pc, #372]	; (8005d04 <send+0x1ec>)
 8005b90:	881b      	ldrh	r3, [r3, #0]
 8005b92:	461a      	mov	r2, r3
 8005b94:	79fb      	ldrb	r3, [r7, #7]
 8005b96:	fa42 f303 	asr.w	r3, r2, r3
 8005b9a:	f003 0301 	and.w	r3, r3, #1
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d039      	beq.n	8005c16 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8005ba2:	79fb      	ldrb	r3, [r7, #7]
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	00db      	lsls	r3, r3, #3
 8005baa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7ff f9ec 	bl	8004f8c <WIZCHIP_READ>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	f003 031f 	and.w	r3, r3, #31
 8005bba:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8005bbc:	7bfb      	ldrb	r3, [r7, #15]
 8005bbe:	f003 0310 	and.w	r3, r3, #16
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d019      	beq.n	8005bfa <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8005bc6:	79fb      	ldrb	r3, [r7, #7]
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	3301      	adds	r3, #1
 8005bcc:	00db      	lsls	r3, r3, #3
 8005bce:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005bd2:	2110      	movs	r1, #16
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7ff fa25 	bl	8005024 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8005bda:	79fb      	ldrb	r3, [r7, #7]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	fa02 f303 	lsl.w	r3, r2, r3
 8005be2:	b21b      	sxth	r3, r3
 8005be4:	43db      	mvns	r3, r3
 8005be6:	b21a      	sxth	r2, r3
 8005be8:	4b46      	ldr	r3, [pc, #280]	; (8005d04 <send+0x1ec>)
 8005bea:	881b      	ldrh	r3, [r3, #0]
 8005bec:	b21b      	sxth	r3, r3
 8005bee:	4013      	ands	r3, r2
 8005bf0:	b21b      	sxth	r3, r3
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	4b43      	ldr	r3, [pc, #268]	; (8005d04 <send+0x1ec>)
 8005bf6:	801a      	strh	r2, [r3, #0]
 8005bf8:	e00d      	b.n	8005c16 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8005bfa:	7bfb      	ldrb	r3, [r7, #15]
 8005bfc:	f003 0308 	and.w	r3, r3, #8
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d006      	beq.n	8005c12 <send+0xfa>
      {
         close(sn);
 8005c04:	79fb      	ldrb	r3, [r7, #7]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7ff fdc6 	bl	8005798 <close>
         return SOCKERR_TIMEOUT;
 8005c0c:	f06f 030c 	mvn.w	r3, #12
 8005c10:	e073      	b.n	8005cfa <send+0x1e2>
      }
      else return SOCK_BUSY;
 8005c12:	2300      	movs	r3, #0
 8005c14:	e071      	b.n	8005cfa <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 8005c16:	79fb      	ldrb	r3, [r7, #7]
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	00db      	lsls	r3, r3, #3
 8005c1e:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8005c22:	4618      	mov	r0, r3
 8005c24:	f7ff f9b2 	bl	8004f8c <WIZCHIP_READ>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	029b      	lsls	r3, r3, #10
 8005c2e:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8005c30:	88ba      	ldrh	r2, [r7, #4]
 8005c32:	89bb      	ldrh	r3, [r7, #12]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d901      	bls.n	8005c3c <send+0x124>
 8005c38:	89bb      	ldrh	r3, [r7, #12]
 8005c3a:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8005c3c:	79fb      	ldrb	r3, [r7, #7]
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f7ff fafe 	bl	8005240 <getSn_TX_FSR>
 8005c44:	4603      	mov	r3, r0
 8005c46:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8005c48:	79fb      	ldrb	r3, [r7, #7]
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	00db      	lsls	r3, r3, #3
 8005c50:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005c54:	4618      	mov	r0, r3
 8005c56:	f7ff f999 	bl	8004f8c <WIZCHIP_READ>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8005c5e:	7bfb      	ldrb	r3, [r7, #15]
 8005c60:	2b17      	cmp	r3, #23
 8005c62:	d009      	beq.n	8005c78 <send+0x160>
 8005c64:	7bfb      	ldrb	r3, [r7, #15]
 8005c66:	2b1c      	cmp	r3, #28
 8005c68:	d006      	beq.n	8005c78 <send+0x160>
      {
         close(sn);
 8005c6a:	79fb      	ldrb	r3, [r7, #7]
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7ff fd93 	bl	8005798 <close>
         return SOCKERR_SOCKSTATUS;
 8005c72:	f06f 0306 	mvn.w	r3, #6
 8005c76:	e040      	b.n	8005cfa <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8005c78:	4b23      	ldr	r3, [pc, #140]	; (8005d08 <send+0x1f0>)
 8005c7a:	881b      	ldrh	r3, [r3, #0]
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	79fb      	ldrb	r3, [r7, #7]
 8005c80:	fa42 f303 	asr.w	r3, r2, r3
 8005c84:	f003 0301 	and.w	r3, r3, #1
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d005      	beq.n	8005c98 <send+0x180>
 8005c8c:	88ba      	ldrh	r2, [r7, #4]
 8005c8e:	89bb      	ldrh	r3, [r7, #12]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d901      	bls.n	8005c98 <send+0x180>
 8005c94:	2300      	movs	r3, #0
 8005c96:	e030      	b.n	8005cfa <send+0x1e2>
      if(len <= freesize) break;
 8005c98:	88ba      	ldrh	r2, [r7, #4]
 8005c9a:	89bb      	ldrh	r3, [r7, #12]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d900      	bls.n	8005ca2 <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8005ca0:	e7cc      	b.n	8005c3c <send+0x124>
      if(len <= freesize) break;
 8005ca2:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8005ca4:	88ba      	ldrh	r2, [r7, #4]
 8005ca6:	79fb      	ldrb	r3, [r7, #7]
 8005ca8:	6839      	ldr	r1, [r7, #0]
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7ff fb5e 	bl	800536c <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8005cb0:	79fb      	ldrb	r3, [r7, #7]
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	00db      	lsls	r3, r3, #3
 8005cb8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005cbc:	2120      	movs	r1, #32
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7ff f9b0 	bl	8005024 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8005cc4:	bf00      	nop
 8005cc6:	79fb      	ldrb	r3, [r7, #7]
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	3301      	adds	r3, #1
 8005ccc:	00db      	lsls	r3, r3, #3
 8005cce:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f7ff f95a 	bl	8004f8c <WIZCHIP_READ>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1f3      	bne.n	8005cc6 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 8005cde:	79fb      	ldrb	r3, [r7, #7]
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce6:	b21a      	sxth	r2, r3
 8005ce8:	4b06      	ldr	r3, [pc, #24]	; (8005d04 <send+0x1ec>)
 8005cea:	881b      	ldrh	r3, [r3, #0]
 8005cec:	b21b      	sxth	r3, r3
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	b21b      	sxth	r3, r3
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	4b03      	ldr	r3, [pc, #12]	; (8005d04 <send+0x1ec>)
 8005cf6:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8005cf8:	88bb      	ldrh	r3, [r7, #4]
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3710      	adds	r7, #16
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	20001a76 	.word	0x20001a76
 8005d08:	20001a74 	.word	0x20001a74

08005d0c <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8005d0c:	b590      	push	{r4, r7, lr}
 8005d0e:	b085      	sub	sp, #20
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	4603      	mov	r3, r0
 8005d14:	6039      	str	r1, [r7, #0]
 8005d16:	71fb      	strb	r3, [r7, #7]
 8005d18:	4613      	mov	r3, r2
 8005d1a:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8005d20:	2300      	movs	r3, #0
 8005d22:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8005d24:	79fb      	ldrb	r3, [r7, #7]
 8005d26:	2b08      	cmp	r3, #8
 8005d28:	d902      	bls.n	8005d30 <recv+0x24>
 8005d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d2e:	e09c      	b.n	8005e6a <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8005d30:	79fb      	ldrb	r3, [r7, #7]
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	3301      	adds	r3, #1
 8005d36:	00db      	lsls	r3, r3, #3
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f7ff f927 	bl	8004f8c <WIZCHIP_READ>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	f003 030f 	and.w	r3, r3, #15
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d002      	beq.n	8005d4e <recv+0x42>
 8005d48:	f06f 0304 	mvn.w	r3, #4
 8005d4c:	e08d      	b.n	8005e6a <recv+0x15e>
   CHECK_SOCKDATA();
 8005d4e:	88bb      	ldrh	r3, [r7, #4]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d102      	bne.n	8005d5a <recv+0x4e>
 8005d54:	f06f 030d 	mvn.w	r3, #13
 8005d58:	e087      	b.n	8005e6a <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 8005d5a:	79fb      	ldrb	r3, [r7, #7]
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	3301      	adds	r3, #1
 8005d60:	00db      	lsls	r3, r3, #3
 8005d62:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7ff f910 	bl	8004f8c <WIZCHIP_READ>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	029b      	lsls	r3, r3, #10
 8005d72:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8005d74:	89ba      	ldrh	r2, [r7, #12]
 8005d76:	88bb      	ldrh	r3, [r7, #4]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d201      	bcs.n	8005d80 <recv+0x74>
 8005d7c:	89bb      	ldrh	r3, [r7, #12]
 8005d7e:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8005d80:	79fb      	ldrb	r3, [r7, #7]
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7ff faa7 	bl	80052d6 <getSn_RX_RSR>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8005d8c:	79fb      	ldrb	r3, [r7, #7]
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	3301      	adds	r3, #1
 8005d92:	00db      	lsls	r3, r3, #3
 8005d94:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f7ff f8f7 	bl	8004f8c <WIZCHIP_READ>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8005da2:	7bfb      	ldrb	r3, [r7, #15]
 8005da4:	2b17      	cmp	r3, #23
 8005da6:	d026      	beq.n	8005df6 <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8005da8:	7bfb      	ldrb	r3, [r7, #15]
 8005daa:	2b1c      	cmp	r3, #28
 8005dac:	d11c      	bne.n	8005de8 <recv+0xdc>
            {
               if(recvsize != 0) break;
 8005dae:	89bb      	ldrh	r3, [r7, #12]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d133      	bne.n	8005e1c <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8005db4:	79fb      	ldrb	r3, [r7, #7]
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7ff fa42 	bl	8005240 <getSn_TX_FSR>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	461c      	mov	r4, r3
 8005dc0:	79fb      	ldrb	r3, [r7, #7]
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	00db      	lsls	r3, r3, #3
 8005dc8:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f7ff f8dd 	bl	8004f8c <WIZCHIP_READ>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	029b      	lsls	r3, r3, #10
 8005dd6:	429c      	cmp	r4, r3
 8005dd8:	d10d      	bne.n	8005df6 <recv+0xea>
               {
                  close(sn);
 8005dda:	79fb      	ldrb	r3, [r7, #7]
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7ff fcdb 	bl	8005798 <close>
                  return SOCKERR_SOCKSTATUS;
 8005de2:	f06f 0306 	mvn.w	r3, #6
 8005de6:	e040      	b.n	8005e6a <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 8005de8:	79fb      	ldrb	r3, [r7, #7]
 8005dea:	4618      	mov	r0, r3
 8005dec:	f7ff fcd4 	bl	8005798 <close>
               return SOCKERR_SOCKSTATUS;
 8005df0:	f06f 0306 	mvn.w	r3, #6
 8005df4:	e039      	b.n	8005e6a <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8005df6:	4b1f      	ldr	r3, [pc, #124]	; (8005e74 <recv+0x168>)
 8005df8:	881b      	ldrh	r3, [r3, #0]
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	79fb      	ldrb	r3, [r7, #7]
 8005dfe:	fa42 f303 	asr.w	r3, r2, r3
 8005e02:	f003 0301 	and.w	r3, r3, #1
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d004      	beq.n	8005e14 <recv+0x108>
 8005e0a:	89bb      	ldrh	r3, [r7, #12]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d101      	bne.n	8005e14 <recv+0x108>
 8005e10:	2300      	movs	r3, #0
 8005e12:	e02a      	b.n	8005e6a <recv+0x15e>
         if(recvsize != 0) break;
 8005e14:	89bb      	ldrh	r3, [r7, #12]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d102      	bne.n	8005e20 <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 8005e1a:	e7b1      	b.n	8005d80 <recv+0x74>
               if(recvsize != 0) break;
 8005e1c:	bf00      	nop
 8005e1e:	e000      	b.n	8005e22 <recv+0x116>
         if(recvsize != 0) break;
 8005e20:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8005e22:	89ba      	ldrh	r2, [r7, #12]
 8005e24:	88bb      	ldrh	r3, [r7, #4]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d201      	bcs.n	8005e2e <recv+0x122>
 8005e2a:	89bb      	ldrh	r3, [r7, #12]
 8005e2c:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8005e2e:	88ba      	ldrh	r2, [r7, #4]
 8005e30:	79fb      	ldrb	r3, [r7, #7]
 8005e32:	6839      	ldr	r1, [r7, #0]
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7ff faf5 	bl	8005424 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8005e3a:	79fb      	ldrb	r3, [r7, #7]
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	3301      	adds	r3, #1
 8005e40:	00db      	lsls	r3, r3, #3
 8005e42:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005e46:	2140      	movs	r1, #64	; 0x40
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f7ff f8eb 	bl	8005024 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8005e4e:	bf00      	nop
 8005e50:	79fb      	ldrb	r3, [r7, #7]
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	3301      	adds	r3, #1
 8005e56:	00db      	lsls	r3, r3, #3
 8005e58:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f7ff f895 	bl	8004f8c <WIZCHIP_READ>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d1f3      	bne.n	8005e50 <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8005e68:	88bb      	ldrh	r3, [r7, #4]
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3714      	adds	r7, #20
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd90      	pop	{r4, r7, pc}
 8005e72:	bf00      	nop
 8005e74:	20001a74 	.word	0x20001a74

08005e78 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b086      	sub	sp, #24
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60b9      	str	r1, [r7, #8]
 8005e80:	607b      	str	r3, [r7, #4]
 8005e82:	4603      	mov	r3, r0
 8005e84:	73fb      	strb	r3, [r7, #15]
 8005e86:	4613      	mov	r3, r2
 8005e88:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8005e92:	7bfb      	ldrb	r3, [r7, #15]
 8005e94:	2b08      	cmp	r3, #8
 8005e96:	d902      	bls.n	8005e9e <sendto+0x26>
 8005e98:	f04f 33ff 	mov.w	r3, #4294967295
 8005e9c:	e11b      	b.n	80060d6 <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 8005e9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	00db      	lsls	r3, r3, #3
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7ff f870 	bl	8004f8c <WIZCHIP_READ>
 8005eac:	4603      	mov	r3, r0
 8005eae:	f003 030f 	and.w	r3, r3, #15
 8005eb2:	3b02      	subs	r3, #2
 8005eb4:	2b02      	cmp	r3, #2
 8005eb6:	d902      	bls.n	8005ebe <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8005eb8:	f06f 0304 	mvn.w	r3, #4
 8005ebc:	e10b      	b.n	80060d6 <sendto+0x25e>
         break;
 8005ebe:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8005ec0:	89bb      	ldrh	r3, [r7, #12]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d102      	bne.n	8005ecc <sendto+0x54>
 8005ec6:	f06f 030d 	mvn.w	r3, #13
 8005eca:	e104      	b.n	80060d6 <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	021b      	lsls	r3, r3, #8
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	3201      	adds	r2, #1
 8005eda:	7812      	ldrb	r2, [r2, #0]
 8005edc:	4413      	add	r3, r2
 8005ede:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	021b      	lsls	r3, r3, #8
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	3202      	adds	r2, #2
 8005ee8:	7812      	ldrb	r2, [r2, #0]
 8005eea:	4413      	add	r3, r2
 8005eec:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	021b      	lsls	r3, r3, #8
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	3203      	adds	r2, #3
 8005ef6:	7812      	ldrb	r2, [r2, #0]
 8005ef8:	4413      	add	r3, r2
 8005efa:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d10e      	bne.n	8005f20 <sendto+0xa8>
 8005f02:	7bfb      	ldrb	r3, [r7, #15]
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	3301      	adds	r3, #1
 8005f08:	00db      	lsls	r3, r3, #3
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f7ff f83e 	bl	8004f8c <WIZCHIP_READ>
 8005f10:	4603      	mov	r3, r0
 8005f12:	f003 0304 	and.w	r3, r3, #4
 8005f16:	2b04      	cmp	r3, #4
 8005f18:	d002      	beq.n	8005f20 <sendto+0xa8>
 8005f1a:	f06f 030b 	mvn.w	r3, #11
 8005f1e:	e0da      	b.n	80060d6 <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8005f20:	8c3b      	ldrh	r3, [r7, #32]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d10e      	bne.n	8005f44 <sendto+0xcc>
 8005f26:	7bfb      	ldrb	r3, [r7, #15]
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	00db      	lsls	r3, r3, #3
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7ff f82c 	bl	8004f8c <WIZCHIP_READ>
 8005f34:	4603      	mov	r3, r0
 8005f36:	f003 0304 	and.w	r3, r3, #4
 8005f3a:	2b04      	cmp	r3, #4
 8005f3c:	d002      	beq.n	8005f44 <sendto+0xcc>
 8005f3e:	f06f 030a 	mvn.w	r3, #10
 8005f42:	e0c8      	b.n	80060d6 <sendto+0x25e>
   tmp = getSn_SR(sn);
 8005f44:	7bfb      	ldrb	r3, [r7, #15]
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	3301      	adds	r3, #1
 8005f4a:	00db      	lsls	r3, r3, #3
 8005f4c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005f50:	4618      	mov	r0, r3
 8005f52:	f7ff f81b 	bl	8004f8c <WIZCHIP_READ>
 8005f56:	4603      	mov	r3, r0
 8005f58:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8005f5a:	7dfb      	ldrb	r3, [r7, #23]
 8005f5c:	2b42      	cmp	r3, #66	; 0x42
 8005f5e:	d008      	beq.n	8005f72 <sendto+0xfa>
 8005f60:	7dfb      	ldrb	r3, [r7, #23]
 8005f62:	2b22      	cmp	r3, #34	; 0x22
 8005f64:	d005      	beq.n	8005f72 <sendto+0xfa>
 8005f66:	7dfb      	ldrb	r3, [r7, #23]
 8005f68:	2b32      	cmp	r3, #50	; 0x32
 8005f6a:	d002      	beq.n	8005f72 <sendto+0xfa>
 8005f6c:	f06f 0306 	mvn.w	r3, #6
 8005f70:	e0b1      	b.n	80060d6 <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8005f72:	7bfb      	ldrb	r3, [r7, #15]
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	3301      	adds	r3, #1
 8005f78:	00db      	lsls	r3, r3, #3
 8005f7a:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8005f7e:	2204      	movs	r2, #4
 8005f80:	6879      	ldr	r1, [r7, #4]
 8005f82:	4618      	mov	r0, r3
 8005f84:	f7ff f8fc 	bl	8005180 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8005f88:	7bfb      	ldrb	r3, [r7, #15]
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	00db      	lsls	r3, r3, #3
 8005f90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f94:	461a      	mov	r2, r3
 8005f96:	8c3b      	ldrh	r3, [r7, #32]
 8005f98:	0a1b      	lsrs	r3, r3, #8
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	4610      	mov	r0, r2
 8005fa2:	f7ff f83f 	bl	8005024 <WIZCHIP_WRITE>
 8005fa6:	7bfb      	ldrb	r3, [r7, #15]
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	3301      	adds	r3, #1
 8005fac:	00db      	lsls	r3, r3, #3
 8005fae:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	8c3b      	ldrh	r3, [r7, #32]
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	4619      	mov	r1, r3
 8005fba:	4610      	mov	r0, r2
 8005fbc:	f7ff f832 	bl	8005024 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8005fc0:	7bfb      	ldrb	r3, [r7, #15]
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	00db      	lsls	r3, r3, #3
 8005fc8:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f7fe ffdd 	bl	8004f8c <WIZCHIP_READ>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	029b      	lsls	r3, r3, #10
 8005fd8:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8005fda:	89ba      	ldrh	r2, [r7, #12]
 8005fdc:	8abb      	ldrh	r3, [r7, #20]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d901      	bls.n	8005fe6 <sendto+0x16e>
 8005fe2:	8abb      	ldrh	r3, [r7, #20]
 8005fe4:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8005fe6:	7bfb      	ldrb	r3, [r7, #15]
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f7ff f929 	bl	8005240 <getSn_TX_FSR>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8005ff2:	7bfb      	ldrb	r3, [r7, #15]
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	00db      	lsls	r3, r3, #3
 8005ffa:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7fe ffc4 	bl	8004f8c <WIZCHIP_READ>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d102      	bne.n	8006010 <sendto+0x198>
 800600a:	f06f 0303 	mvn.w	r3, #3
 800600e:	e062      	b.n	80060d6 <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8006010:	4b33      	ldr	r3, [pc, #204]	; (80060e0 <sendto+0x268>)
 8006012:	881b      	ldrh	r3, [r3, #0]
 8006014:	461a      	mov	r2, r3
 8006016:	7bfb      	ldrb	r3, [r7, #15]
 8006018:	fa42 f303 	asr.w	r3, r2, r3
 800601c:	f003 0301 	and.w	r3, r3, #1
 8006020:	2b00      	cmp	r3, #0
 8006022:	d005      	beq.n	8006030 <sendto+0x1b8>
 8006024:	89ba      	ldrh	r2, [r7, #12]
 8006026:	8abb      	ldrh	r3, [r7, #20]
 8006028:	429a      	cmp	r2, r3
 800602a:	d901      	bls.n	8006030 <sendto+0x1b8>
 800602c:	2300      	movs	r3, #0
 800602e:	e052      	b.n	80060d6 <sendto+0x25e>
      if(len <= freesize) break;
 8006030:	89ba      	ldrh	r2, [r7, #12]
 8006032:	8abb      	ldrh	r3, [r7, #20]
 8006034:	429a      	cmp	r2, r3
 8006036:	d900      	bls.n	800603a <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 8006038:	e7d5      	b.n	8005fe6 <sendto+0x16e>
      if(len <= freesize) break;
 800603a:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 800603c:	89ba      	ldrh	r2, [r7, #12]
 800603e:	7bfb      	ldrb	r3, [r7, #15]
 8006040:	68b9      	ldr	r1, [r7, #8]
 8006042:	4618      	mov	r0, r3
 8006044:	f7ff f992 	bl	800536c <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8006048:	7bfb      	ldrb	r3, [r7, #15]
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	3301      	adds	r3, #1
 800604e:	00db      	lsls	r3, r3, #3
 8006050:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006054:	2120      	movs	r1, #32
 8006056:	4618      	mov	r0, r3
 8006058:	f7fe ffe4 	bl	8005024 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 800605c:	bf00      	nop
 800605e:	7bfb      	ldrb	r3, [r7, #15]
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	3301      	adds	r3, #1
 8006064:	00db      	lsls	r3, r3, #3
 8006066:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800606a:	4618      	mov	r0, r3
 800606c:	f7fe ff8e 	bl	8004f8c <WIZCHIP_READ>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d1f3      	bne.n	800605e <sendto+0x1e6>
   while(1)
   {
      tmp = getSn_IR(sn);
 8006076:	7bfb      	ldrb	r3, [r7, #15]
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	3301      	adds	r3, #1
 800607c:	00db      	lsls	r3, r3, #3
 800607e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006082:	4618      	mov	r0, r3
 8006084:	f7fe ff82 	bl	8004f8c <WIZCHIP_READ>
 8006088:	4603      	mov	r3, r0
 800608a:	f003 031f 	and.w	r3, r3, #31
 800608e:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8006090:	7dfb      	ldrb	r3, [r7, #23]
 8006092:	f003 0310 	and.w	r3, r3, #16
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00c      	beq.n	80060b4 <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800609a:	7bfb      	ldrb	r3, [r7, #15]
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	3301      	adds	r3, #1
 80060a0:	00db      	lsls	r3, r3, #3
 80060a2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80060a6:	2110      	movs	r1, #16
 80060a8:	4618      	mov	r0, r3
 80060aa:	f7fe ffbb 	bl	8005024 <WIZCHIP_WRITE>
         break;
 80060ae:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80060b0:	89bb      	ldrh	r3, [r7, #12]
 80060b2:	e010      	b.n	80060d6 <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 80060b4:	7dfb      	ldrb	r3, [r7, #23]
 80060b6:	f003 0308 	and.w	r3, r3, #8
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d0db      	beq.n	8006076 <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 80060be:	7bfb      	ldrb	r3, [r7, #15]
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	3301      	adds	r3, #1
 80060c4:	00db      	lsls	r3, r3, #3
 80060c6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80060ca:	2108      	movs	r1, #8
 80060cc:	4618      	mov	r0, r3
 80060ce:	f7fe ffa9 	bl	8005024 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 80060d2:	f06f 030c 	mvn.w	r3, #12
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3718      	adds	r7, #24
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	20001a74 	.word	0x20001a74

080060e4 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b088      	sub	sp, #32
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60b9      	str	r1, [r7, #8]
 80060ec:	607b      	str	r3, [r7, #4]
 80060ee:	4603      	mov	r3, r0
 80060f0:	73fb      	strb	r3, [r7, #15]
 80060f2:	4613      	mov	r3, r2
 80060f4:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 80060f6:	2300      	movs	r3, #0
 80060f8:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 80060fa:	7bfb      	ldrb	r3, [r7, #15]
 80060fc:	2b08      	cmp	r3, #8
 80060fe:	d902      	bls.n	8006106 <recvfrom+0x22>
 8006100:	f04f 33ff 	mov.w	r3, #4294967295
 8006104:	e1d4      	b.n	80064b0 <recvfrom+0x3cc>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 8006106:	7bfb      	ldrb	r3, [r7, #15]
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	3301      	adds	r3, #1
 800610c:	00db      	lsls	r3, r3, #3
 800610e:	4618      	mov	r0, r3
 8006110:	f7fe ff3c 	bl	8004f8c <WIZCHIP_READ>
 8006114:	4603      	mov	r3, r0
 8006116:	777b      	strb	r3, [r7, #29]
 8006118:	7f7b      	ldrb	r3, [r7, #29]
 800611a:	f003 030f 	and.w	r3, r3, #15
 800611e:	3b02      	subs	r3, #2
 8006120:	2b02      	cmp	r3, #2
 8006122:	d902      	bls.n	800612a <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8006124:	f06f 0304 	mvn.w	r3, #4
 8006128:	e1c2      	b.n	80064b0 <recvfrom+0x3cc>
         break;
 800612a:	bf00      	nop
   }
   CHECK_SOCKDATA();
 800612c:	89bb      	ldrh	r3, [r7, #12]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d102      	bne.n	8006138 <recvfrom+0x54>
 8006132:	f06f 030d 	mvn.w	r3, #13
 8006136:	e1bb      	b.n	80064b0 <recvfrom+0x3cc>
   if(sock_remained_size[sn] == 0)
 8006138:	7bfb      	ldrb	r3, [r7, #15]
 800613a:	4a88      	ldr	r2, [pc, #544]	; (800635c <recvfrom+0x278>)
 800613c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d128      	bne.n	8006196 <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8006144:	7bfb      	ldrb	r3, [r7, #15]
 8006146:	4618      	mov	r0, r3
 8006148:	f7ff f8c5 	bl	80052d6 <getSn_RX_RSR>
 800614c:	4603      	mov	r3, r0
 800614e:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8006150:	7bfb      	ldrb	r3, [r7, #15]
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	3301      	adds	r3, #1
 8006156:	00db      	lsls	r3, r3, #3
 8006158:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800615c:	4618      	mov	r0, r3
 800615e:	f7fe ff15 	bl	8004f8c <WIZCHIP_READ>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d102      	bne.n	800616e <recvfrom+0x8a>
 8006168:	f06f 0303 	mvn.w	r3, #3
 800616c:	e1a0      	b.n	80064b0 <recvfrom+0x3cc>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 800616e:	4b7c      	ldr	r3, [pc, #496]	; (8006360 <recvfrom+0x27c>)
 8006170:	881b      	ldrh	r3, [r3, #0]
 8006172:	461a      	mov	r2, r3
 8006174:	7bfb      	ldrb	r3, [r7, #15]
 8006176:	fa42 f303 	asr.w	r3, r2, r3
 800617a:	f003 0301 	and.w	r3, r3, #1
 800617e:	2b00      	cmp	r3, #0
 8006180:	d004      	beq.n	800618c <recvfrom+0xa8>
 8006182:	8bfb      	ldrh	r3, [r7, #30]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d101      	bne.n	800618c <recvfrom+0xa8>
 8006188:	2300      	movs	r3, #0
 800618a:	e191      	b.n	80064b0 <recvfrom+0x3cc>
         if(pack_len != 0) break;
 800618c:	8bfb      	ldrh	r3, [r7, #30]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d100      	bne.n	8006194 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 8006192:	e7d7      	b.n	8006144 <recvfrom+0x60>
         if(pack_len != 0) break;
 8006194:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8006196:	7f7b      	ldrb	r3, [r7, #29]
 8006198:	f003 0307 	and.w	r3, r3, #7
 800619c:	2b04      	cmp	r3, #4
 800619e:	d079      	beq.n	8006294 <recvfrom+0x1b0>
 80061a0:	2b04      	cmp	r3, #4
 80061a2:	f300 8142 	bgt.w	800642a <recvfrom+0x346>
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d003      	beq.n	80061b2 <recvfrom+0xce>
 80061aa:	2b03      	cmp	r3, #3
 80061ac:	f000 80dc 	beq.w	8006368 <recvfrom+0x284>
 80061b0:	e13b      	b.n	800642a <recvfrom+0x346>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 80061b2:	7bfb      	ldrb	r3, [r7, #15]
 80061b4:	4a69      	ldr	r2, [pc, #420]	; (800635c <recvfrom+0x278>)
 80061b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d152      	bne.n	8006264 <recvfrom+0x180>
	      {
   			wiz_recv_data(sn, head, 8);
 80061be:	f107 0114 	add.w	r1, r7, #20
 80061c2:	7bfb      	ldrb	r3, [r7, #15]
 80061c4:	2208      	movs	r2, #8
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7ff f92c 	bl	8005424 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80061cc:	7bfb      	ldrb	r3, [r7, #15]
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	3301      	adds	r3, #1
 80061d2:	00db      	lsls	r3, r3, #3
 80061d4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80061d8:	2140      	movs	r1, #64	; 0x40
 80061da:	4618      	mov	r0, r3
 80061dc:	f7fe ff22 	bl	8005024 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80061e0:	bf00      	nop
 80061e2:	7bfb      	ldrb	r3, [r7, #15]
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	3301      	adds	r3, #1
 80061e8:	00db      	lsls	r3, r3, #3
 80061ea:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7fe fecc 	bl	8004f8c <WIZCHIP_READ>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1f3      	bne.n	80061e2 <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 80061fa:	7d3a      	ldrb	r2, [r7, #20]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	3301      	adds	r3, #1
 8006204:	7d7a      	ldrb	r2, [r7, #21]
 8006206:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	3302      	adds	r3, #2
 800620c:	7dba      	ldrb	r2, [r7, #22]
 800620e:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	3303      	adds	r3, #3
 8006214:	7dfa      	ldrb	r2, [r7, #23]
 8006216:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 8006218:	7e3b      	ldrb	r3, [r7, #24]
 800621a:	b29a      	uxth	r2, r3
 800621c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621e:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 8006220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006222:	881b      	ldrh	r3, [r3, #0]
 8006224:	021b      	lsls	r3, r3, #8
 8006226:	b29a      	uxth	r2, r3
 8006228:	7e7b      	ldrb	r3, [r7, #25]
 800622a:	b29b      	uxth	r3, r3
 800622c:	4413      	add	r3, r2
 800622e:	b29a      	uxth	r2, r3
 8006230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006232:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 8006234:	7eba      	ldrb	r2, [r7, #26]
 8006236:	7bfb      	ldrb	r3, [r7, #15]
 8006238:	b291      	uxth	r1, r2
 800623a:	4a48      	ldr	r2, [pc, #288]	; (800635c <recvfrom+0x278>)
 800623c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 8006240:	7bfb      	ldrb	r3, [r7, #15]
 8006242:	4a46      	ldr	r2, [pc, #280]	; (800635c <recvfrom+0x278>)
 8006244:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006248:	021b      	lsls	r3, r3, #8
 800624a:	b299      	uxth	r1, r3
 800624c:	7efb      	ldrb	r3, [r7, #27]
 800624e:	b29a      	uxth	r2, r3
 8006250:	7bfb      	ldrb	r3, [r7, #15]
 8006252:	440a      	add	r2, r1
 8006254:	b291      	uxth	r1, r2
 8006256:	4a41      	ldr	r2, [pc, #260]	; (800635c <recvfrom+0x278>)
 8006258:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 800625c:	7bfb      	ldrb	r3, [r7, #15]
 800625e:	4a41      	ldr	r2, [pc, #260]	; (8006364 <recvfrom+0x280>)
 8006260:	2180      	movs	r1, #128	; 0x80
 8006262:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8006264:	7bfb      	ldrb	r3, [r7, #15]
 8006266:	4a3d      	ldr	r2, [pc, #244]	; (800635c <recvfrom+0x278>)
 8006268:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800626c:	89ba      	ldrh	r2, [r7, #12]
 800626e:	429a      	cmp	r2, r3
 8006270:	d202      	bcs.n	8006278 <recvfrom+0x194>
 8006272:	89bb      	ldrh	r3, [r7, #12]
 8006274:	83fb      	strh	r3, [r7, #30]
 8006276:	e004      	b.n	8006282 <recvfrom+0x19e>
			else pack_len = sock_remained_size[sn];
 8006278:	7bfb      	ldrb	r3, [r7, #15]
 800627a:	4a38      	ldr	r2, [pc, #224]	; (800635c <recvfrom+0x278>)
 800627c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006280:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 8006282:	8bfb      	ldrh	r3, [r7, #30]
 8006284:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8006286:	8bfa      	ldrh	r2, [r7, #30]
 8006288:	7bfb      	ldrb	r3, [r7, #15]
 800628a:	68b9      	ldr	r1, [r7, #8]
 800628c:	4618      	mov	r0, r3
 800628e:	f7ff f8c9 	bl	8005424 <wiz_recv_data>
			break;
 8006292:	e0d6      	b.n	8006442 <recvfrom+0x35e>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8006294:	7bfb      	ldrb	r3, [r7, #15]
 8006296:	4a31      	ldr	r2, [pc, #196]	; (800635c <recvfrom+0x278>)
 8006298:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d146      	bne.n	800632e <recvfrom+0x24a>
	      {
   			wiz_recv_data(sn, head, 2);
 80062a0:	f107 0114 	add.w	r1, r7, #20
 80062a4:	7bfb      	ldrb	r3, [r7, #15]
 80062a6:	2202      	movs	r2, #2
 80062a8:	4618      	mov	r0, r3
 80062aa:	f7ff f8bb 	bl	8005424 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80062ae:	7bfb      	ldrb	r3, [r7, #15]
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	3301      	adds	r3, #1
 80062b4:	00db      	lsls	r3, r3, #3
 80062b6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80062ba:	2140      	movs	r1, #64	; 0x40
 80062bc:	4618      	mov	r0, r3
 80062be:	f7fe feb1 	bl	8005024 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80062c2:	bf00      	nop
 80062c4:	7bfb      	ldrb	r3, [r7, #15]
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	3301      	adds	r3, #1
 80062ca:	00db      	lsls	r3, r3, #3
 80062cc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80062d0:	4618      	mov	r0, r3
 80062d2:	f7fe fe5b 	bl	8004f8c <WIZCHIP_READ>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d1f3      	bne.n	80062c4 <recvfrom+0x1e0>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 80062dc:	7d3a      	ldrb	r2, [r7, #20]
 80062de:	7bfb      	ldrb	r3, [r7, #15]
 80062e0:	b291      	uxth	r1, r2
 80062e2:	4a1e      	ldr	r2, [pc, #120]	; (800635c <recvfrom+0x278>)
 80062e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 80062e8:	7bfb      	ldrb	r3, [r7, #15]
 80062ea:	4a1c      	ldr	r2, [pc, #112]	; (800635c <recvfrom+0x278>)
 80062ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062f0:	021b      	lsls	r3, r3, #8
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	7d7b      	ldrb	r3, [r7, #21]
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	4413      	add	r3, r2
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	7bfb      	ldrb	r3, [r7, #15]
 80062fe:	3a02      	subs	r2, #2
 8006300:	b291      	uxth	r1, r2
 8006302:	4a16      	ldr	r2, [pc, #88]	; (800635c <recvfrom+0x278>)
 8006304:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 8006308:	7bfb      	ldrb	r3, [r7, #15]
 800630a:	4a14      	ldr	r2, [pc, #80]	; (800635c <recvfrom+0x278>)
 800630c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006310:	f240 52ea 	movw	r2, #1514	; 0x5ea
 8006314:	4293      	cmp	r3, r2
 8006316:	d906      	bls.n	8006326 <recvfrom+0x242>
   			{
   			   close(sn);
 8006318:	7bfb      	ldrb	r3, [r7, #15]
 800631a:	4618      	mov	r0, r3
 800631c:	f7ff fa3c 	bl	8005798 <close>
   			   return SOCKFATAL_PACKLEN;
 8006320:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 8006324:	e0c4      	b.n	80064b0 <recvfrom+0x3cc>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 8006326:	7bfb      	ldrb	r3, [r7, #15]
 8006328:	4a0e      	ldr	r2, [pc, #56]	; (8006364 <recvfrom+0x280>)
 800632a:	2180      	movs	r1, #128	; 0x80
 800632c:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 800632e:	7bfb      	ldrb	r3, [r7, #15]
 8006330:	4a0a      	ldr	r2, [pc, #40]	; (800635c <recvfrom+0x278>)
 8006332:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006336:	89ba      	ldrh	r2, [r7, #12]
 8006338:	429a      	cmp	r2, r3
 800633a:	d202      	bcs.n	8006342 <recvfrom+0x25e>
 800633c:	89bb      	ldrh	r3, [r7, #12]
 800633e:	83fb      	strh	r3, [r7, #30]
 8006340:	e004      	b.n	800634c <recvfrom+0x268>
			else pack_len = sock_remained_size[sn];
 8006342:	7bfb      	ldrb	r3, [r7, #15]
 8006344:	4a05      	ldr	r2, [pc, #20]	; (800635c <recvfrom+0x278>)
 8006346:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800634a:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 800634c:	8bfa      	ldrh	r2, [r7, #30]
 800634e:	7bfb      	ldrb	r3, [r7, #15]
 8006350:	68b9      	ldr	r1, [r7, #8]
 8006352:	4618      	mov	r0, r3
 8006354:	f7ff f866 	bl	8005424 <wiz_recv_data>
		   break;
 8006358:	e073      	b.n	8006442 <recvfrom+0x35e>
 800635a:	bf00      	nop
 800635c:	20001a78 	.word	0x20001a78
 8006360:	20001a74 	.word	0x20001a74
 8006364:	20001a88 	.word	0x20001a88
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 8006368:	7bfb      	ldrb	r3, [r7, #15]
 800636a:	4a53      	ldr	r2, [pc, #332]	; (80064b8 <recvfrom+0x3d4>)
 800636c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d144      	bne.n	80063fe <recvfrom+0x31a>
		   {
   			wiz_recv_data(sn, head, 6);
 8006374:	f107 0114 	add.w	r1, r7, #20
 8006378:	7bfb      	ldrb	r3, [r7, #15]
 800637a:	2206      	movs	r2, #6
 800637c:	4618      	mov	r0, r3
 800637e:	f7ff f851 	bl	8005424 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8006382:	7bfb      	ldrb	r3, [r7, #15]
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	3301      	adds	r3, #1
 8006388:	00db      	lsls	r3, r3, #3
 800638a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800638e:	2140      	movs	r1, #64	; 0x40
 8006390:	4618      	mov	r0, r3
 8006392:	f7fe fe47 	bl	8005024 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8006396:	bf00      	nop
 8006398:	7bfb      	ldrb	r3, [r7, #15]
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	3301      	adds	r3, #1
 800639e:	00db      	lsls	r3, r3, #3
 80063a0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80063a4:	4618      	mov	r0, r3
 80063a6:	f7fe fdf1 	bl	8004f8c <WIZCHIP_READ>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1f3      	bne.n	8006398 <recvfrom+0x2b4>
   			addr[0] = head[0];
 80063b0:	7d3a      	ldrb	r2, [r7, #20]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	3301      	adds	r3, #1
 80063ba:	7d7a      	ldrb	r2, [r7, #21]
 80063bc:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	3302      	adds	r3, #2
 80063c2:	7dba      	ldrb	r2, [r7, #22]
 80063c4:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	3303      	adds	r3, #3
 80063ca:	7dfa      	ldrb	r2, [r7, #23]
 80063cc:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 80063ce:	7e3a      	ldrb	r2, [r7, #24]
 80063d0:	7bfb      	ldrb	r3, [r7, #15]
 80063d2:	b291      	uxth	r1, r2
 80063d4:	4a38      	ldr	r2, [pc, #224]	; (80064b8 <recvfrom+0x3d4>)
 80063d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 80063da:	7bfb      	ldrb	r3, [r7, #15]
 80063dc:	4a36      	ldr	r2, [pc, #216]	; (80064b8 <recvfrom+0x3d4>)
 80063de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063e2:	021b      	lsls	r3, r3, #8
 80063e4:	b299      	uxth	r1, r3
 80063e6:	7e7b      	ldrb	r3, [r7, #25]
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	7bfb      	ldrb	r3, [r7, #15]
 80063ec:	440a      	add	r2, r1
 80063ee:	b291      	uxth	r1, r2
 80063f0:	4a31      	ldr	r2, [pc, #196]	; (80064b8 <recvfrom+0x3d4>)
 80063f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 80063f6:	7bfb      	ldrb	r3, [r7, #15]
 80063f8:	4a30      	ldr	r2, [pc, #192]	; (80064bc <recvfrom+0x3d8>)
 80063fa:	2180      	movs	r1, #128	; 0x80
 80063fc:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 80063fe:	7bfb      	ldrb	r3, [r7, #15]
 8006400:	4a2d      	ldr	r2, [pc, #180]	; (80064b8 <recvfrom+0x3d4>)
 8006402:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006406:	89ba      	ldrh	r2, [r7, #12]
 8006408:	429a      	cmp	r2, r3
 800640a:	d202      	bcs.n	8006412 <recvfrom+0x32e>
 800640c:	89bb      	ldrh	r3, [r7, #12]
 800640e:	83fb      	strh	r3, [r7, #30]
 8006410:	e004      	b.n	800641c <recvfrom+0x338>
			else pack_len = sock_remained_size[sn];
 8006412:	7bfb      	ldrb	r3, [r7, #15]
 8006414:	4a28      	ldr	r2, [pc, #160]	; (80064b8 <recvfrom+0x3d4>)
 8006416:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800641a:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 800641c:	8bfa      	ldrh	r2, [r7, #30]
 800641e:	7bfb      	ldrb	r3, [r7, #15]
 8006420:	68b9      	ldr	r1, [r7, #8]
 8006422:	4618      	mov	r0, r3
 8006424:	f7fe fffe 	bl	8005424 <wiz_recv_data>
			break;
 8006428:	e00b      	b.n	8006442 <recvfrom+0x35e>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 800642a:	8bfa      	ldrh	r2, [r7, #30]
 800642c:	7bfb      	ldrb	r3, [r7, #15]
 800642e:	4611      	mov	r1, r2
 8006430:	4618      	mov	r0, r3
 8006432:	f7ff f853 	bl	80054dc <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 8006436:	7bfb      	ldrb	r3, [r7, #15]
 8006438:	491f      	ldr	r1, [pc, #124]	; (80064b8 <recvfrom+0x3d4>)
 800643a:	8bfa      	ldrh	r2, [r7, #30]
 800643c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8006440:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 8006442:	7bfb      	ldrb	r3, [r7, #15]
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	3301      	adds	r3, #1
 8006448:	00db      	lsls	r3, r3, #3
 800644a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800644e:	2140      	movs	r1, #64	; 0x40
 8006450:	4618      	mov	r0, r3
 8006452:	f7fe fde7 	bl	8005024 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8006456:	bf00      	nop
 8006458:	7bfb      	ldrb	r3, [r7, #15]
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	3301      	adds	r3, #1
 800645e:	00db      	lsls	r3, r3, #3
 8006460:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006464:	4618      	mov	r0, r3
 8006466:	f7fe fd91 	bl	8004f8c <WIZCHIP_READ>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1f3      	bne.n	8006458 <recvfrom+0x374>
	sock_remained_size[sn] -= pack_len;
 8006470:	7bfb      	ldrb	r3, [r7, #15]
 8006472:	4a11      	ldr	r2, [pc, #68]	; (80064b8 <recvfrom+0x3d4>)
 8006474:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8006478:	7bfb      	ldrb	r3, [r7, #15]
 800647a:	8bfa      	ldrh	r2, [r7, #30]
 800647c:	1a8a      	subs	r2, r1, r2
 800647e:	b291      	uxth	r1, r2
 8006480:	4a0d      	ldr	r2, [pc, #52]	; (80064b8 <recvfrom+0x3d4>)
 8006482:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8006486:	7bfb      	ldrb	r3, [r7, #15]
 8006488:	4a0b      	ldr	r2, [pc, #44]	; (80064b8 <recvfrom+0x3d4>)
 800648a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d009      	beq.n	80064a6 <recvfrom+0x3c2>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8006492:	7bfb      	ldrb	r3, [r7, #15]
 8006494:	4a09      	ldr	r2, [pc, #36]	; (80064bc <recvfrom+0x3d8>)
 8006496:	5cd2      	ldrb	r2, [r2, r3]
 8006498:	7bfb      	ldrb	r3, [r7, #15]
 800649a:	f042 0201 	orr.w	r2, r2, #1
 800649e:	b2d1      	uxtb	r1, r2
 80064a0:	4a06      	ldr	r2, [pc, #24]	; (80064bc <recvfrom+0x3d8>)
 80064a2:	54d1      	strb	r1, [r2, r3]
 80064a4:	e003      	b.n	80064ae <recvfrom+0x3ca>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 80064a6:	7bfb      	ldrb	r3, [r7, #15]
 80064a8:	4a04      	ldr	r2, [pc, #16]	; (80064bc <recvfrom+0x3d8>)
 80064aa:	2100      	movs	r1, #0
 80064ac:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 80064ae:	8bfb      	ldrh	r3, [r7, #30]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3720      	adds	r7, #32
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	20001a78 	.word	0x20001a78
 80064bc:	20001a88 	.word	0x20001a88

080064c0 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80064c0:	b480      	push	{r7}
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	bf00      	nop
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr

080064ce <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 80064ce:	b480      	push	{r7}
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	bf00      	nop
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 80064dc:	b480      	push	{r7}
 80064de:	af00      	add	r7, sp, #0
 80064e0:	bf00      	nop
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr

080064ea <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 80064ea:	b480      	push	{r7}
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	bf00      	nop
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	b2db      	uxtb	r3, r3
 8006506:	4618      	mov	r0, r3
 8006508:	370c      	adds	r7, #12
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr

08006512 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8006512:	b480      	push	{r7}
 8006514:	b083      	sub	sp, #12
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
 800651a:	460b      	mov	r3, r1
 800651c:	70fb      	strb	r3, [r7, #3]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	78fa      	ldrb	r2, [r7, #3]
 8006522:	701a      	strb	r2, [r3, #0]
 8006524:	bf00      	nop
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8006530:	b480      	push	{r7}
 8006532:	af00      	add	r7, sp, #0
 8006534:	2300      	movs	r3, #0
 8006536:	4618      	mov	r0, r3
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	4603      	mov	r3, r0
 8006548:	71fb      	strb	r3, [r7, #7]
 800654a:	bf00      	nop
 800654c:	370c      	adds	r7, #12
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr
	...

08006558 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d002      	beq.n	800656e <reg_wizchip_cs_cbfunc+0x16>
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d106      	bne.n	800657c <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800656e:	4b0a      	ldr	r3, [pc, #40]	; (8006598 <reg_wizchip_cs_cbfunc+0x40>)
 8006570:	4a0a      	ldr	r2, [pc, #40]	; (800659c <reg_wizchip_cs_cbfunc+0x44>)
 8006572:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8006574:	4b08      	ldr	r3, [pc, #32]	; (8006598 <reg_wizchip_cs_cbfunc+0x40>)
 8006576:	4a0a      	ldr	r2, [pc, #40]	; (80065a0 <reg_wizchip_cs_cbfunc+0x48>)
 8006578:	619a      	str	r2, [r3, #24]
 800657a:	e006      	b.n	800658a <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 800657c:	4a06      	ldr	r2, [pc, #24]	; (8006598 <reg_wizchip_cs_cbfunc+0x40>)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8006582:	4a05      	ldr	r2, [pc, #20]	; (8006598 <reg_wizchip_cs_cbfunc+0x40>)
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	6193      	str	r3, [r2, #24]
   }
}
 8006588:	bf00      	nop
 800658a:	bf00      	nop
 800658c:	370c      	adds	r7, #12
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop
 8006598:	2000006c 	.word	0x2000006c
 800659c:	080064dd 	.word	0x080064dd
 80065a0:	080064eb 	.word	0x080064eb

080065a4 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80065ae:	bf00      	nop
 80065b0:	4b0f      	ldr	r3, [pc, #60]	; (80065f0 <reg_wizchip_spi_cbfunc+0x4c>)
 80065b2:	881b      	ldrh	r3, [r3, #0]
 80065b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d0f9      	beq.n	80065b0 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d002      	beq.n	80065c8 <reg_wizchip_spi_cbfunc+0x24>
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d106      	bne.n	80065d6 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80065c8:	4b09      	ldr	r3, [pc, #36]	; (80065f0 <reg_wizchip_spi_cbfunc+0x4c>)
 80065ca:	4a0a      	ldr	r2, [pc, #40]	; (80065f4 <reg_wizchip_spi_cbfunc+0x50>)
 80065cc:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80065ce:	4b08      	ldr	r3, [pc, #32]	; (80065f0 <reg_wizchip_spi_cbfunc+0x4c>)
 80065d0:	4a09      	ldr	r2, [pc, #36]	; (80065f8 <reg_wizchip_spi_cbfunc+0x54>)
 80065d2:	621a      	str	r2, [r3, #32]
 80065d4:	e006      	b.n	80065e4 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80065d6:	4a06      	ldr	r2, [pc, #24]	; (80065f0 <reg_wizchip_spi_cbfunc+0x4c>)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80065dc:	4a04      	ldr	r2, [pc, #16]	; (80065f0 <reg_wizchip_spi_cbfunc+0x4c>)
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	6213      	str	r3, [r2, #32]
   }
}
 80065e2:	bf00      	nop
 80065e4:	bf00      	nop
 80065e6:	370c      	adds	r7, #12
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr
 80065f0:	2000006c 	.word	0x2000006c
 80065f4:	08006531 	.word	0x08006531
 80065f8:	08006541 	.word	0x08006541

080065fc <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 80065fc:	b590      	push	{r4, r7, lr}
 80065fe:	b087      	sub	sp, #28
 8006600:	af00      	add	r7, sp, #0
 8006602:	4603      	mov	r3, r0
 8006604:	6039      	str	r1, [r7, #0]
 8006606:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8006608:	2300      	movs	r3, #0
 800660a:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 800660c:	2300      	movs	r3, #0
 800660e:	60fb      	str	r3, [r7, #12]
 8006610:	2300      	movs	r3, #0
 8006612:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8006614:	79fb      	ldrb	r3, [r7, #7]
 8006616:	2b0f      	cmp	r3, #15
 8006618:	f200 80c7 	bhi.w	80067aa <ctlwizchip+0x1ae>
 800661c:	a201      	add	r2, pc, #4	; (adr r2, 8006624 <ctlwizchip+0x28>)
 800661e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006622:	bf00      	nop
 8006624:	08006665 	.word	0x08006665
 8006628:	0800666b 	.word	0x0800666b
 800662c:	08006697 	.word	0x08006697
 8006630:	0800668b 	.word	0x0800668b
 8006634:	080066a5 	.word	0x080066a5
 8006638:	080066b1 	.word	0x080066b1
 800663c:	080066bf 	.word	0x080066bf
 8006640:	080066e5 	.word	0x080066e5
 8006644:	0800670b 	.word	0x0800670b
 8006648:	0800674f 	.word	0x0800674f
 800664c:	08006755 	.word	0x08006755
 8006650:	0800675d 	.word	0x0800675d
 8006654:	080067b1 	.word	0x080067b1
 8006658:	08006765 	.word	0x08006765
 800665c:	08006773 	.word	0x08006773
 8006660:	0800678f 	.word	0x0800678f
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8006664:	f000 f8ea 	bl	800683c <wizchip_sw_reset>
         break;
 8006668:	e0a3      	b.n	80067b2 <ctlwizchip+0x1b6>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d004      	beq.n	800667a <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	3308      	adds	r3, #8
 8006678:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	693a      	ldr	r2, [r7, #16]
 800667e:	4611      	mov	r1, r2
 8006680:	4618      	mov	r0, r3
 8006682:	f000 f927 	bl	80068d4 <wizchip_init>
 8006686:	4603      	mov	r3, r0
 8006688:	e094      	b.n	80067b4 <ctlwizchip+0x1b8>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	881b      	ldrh	r3, [r3, #0]
 800668e:	4618      	mov	r0, r3
 8006690:	f000 f9ac 	bl	80069ec <wizchip_clrinterrupt>
         break;
 8006694:	e08d      	b.n	80067b2 <ctlwizchip+0x1b6>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8006696:	f000 f9dd 	bl	8006a54 <wizchip_getinterrupt>
 800669a:	4603      	mov	r3, r0
 800669c:	461a      	mov	r2, r3
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	801a      	strh	r2, [r3, #0]
         break;
 80066a2:	e086      	b.n	80067b2 <ctlwizchip+0x1b6>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	881b      	ldrh	r3, [r3, #0]
 80066a8:	4618      	mov	r0, r3
 80066aa:	f000 f9f8 	bl	8006a9e <wizchip_setinterruptmask>
         break;         
 80066ae:	e080      	b.n	80067b2 <ctlwizchip+0x1b6>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 80066b0:	f000 fa10 	bl	8006ad4 <wizchip_getinterruptmask>
 80066b4:	4603      	mov	r3, r0
 80066b6:	461a      	mov	r2, r3
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	801a      	strh	r2, [r3, #0]
         break;
 80066bc:	e079      	b.n	80067b2 <ctlwizchip+0x1b6>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	881b      	ldrh	r3, [r3, #0]
 80066c2:	0a1b      	lsrs	r3, r3, #8
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	4619      	mov	r1, r3
 80066ca:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 80066ce:	f7fe fca9 	bl	8005024 <WIZCHIP_WRITE>
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	881b      	ldrh	r3, [r3, #0]
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	4619      	mov	r1, r3
 80066da:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80066de:	f7fe fca1 	bl	8005024 <WIZCHIP_WRITE>
         break;
 80066e2:	e066      	b.n	80067b2 <ctlwizchip+0x1b6>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 80066e4:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 80066e8:	f7fe fc50 	bl	8004f8c <WIZCHIP_READ>
 80066ec:	4603      	mov	r3, r0
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	021b      	lsls	r3, r3, #8
 80066f2:	b29c      	uxth	r4, r3
 80066f4:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80066f8:	f7fe fc48 	bl	8004f8c <WIZCHIP_READ>
 80066fc:	4603      	mov	r3, r0
 80066fe:	b29b      	uxth	r3, r3
 8006700:	4423      	add	r3, r4
 8006702:	b29a      	uxth	r2, r3
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	801a      	strh	r2, [r3, #0]
         break;
 8006708:	e053      	b.n	80067b2 <ctlwizchip+0x1b6>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 800670a:	4b2c      	ldr	r3, [pc, #176]	; (80067bc <ctlwizchip+0x1c0>)
 800670c:	789a      	ldrb	r2, [r3, #2]
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	3301      	adds	r3, #1
 8006716:	4a29      	ldr	r2, [pc, #164]	; (80067bc <ctlwizchip+0x1c0>)
 8006718:	78d2      	ldrb	r2, [r2, #3]
 800671a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	3302      	adds	r3, #2
 8006720:	4a26      	ldr	r2, [pc, #152]	; (80067bc <ctlwizchip+0x1c0>)
 8006722:	7912      	ldrb	r2, [r2, #4]
 8006724:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	3303      	adds	r3, #3
 800672a:	4a24      	ldr	r2, [pc, #144]	; (80067bc <ctlwizchip+0x1c0>)
 800672c:	7952      	ldrb	r2, [r2, #5]
 800672e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	3304      	adds	r3, #4
 8006734:	4a21      	ldr	r2, [pc, #132]	; (80067bc <ctlwizchip+0x1c0>)
 8006736:	7992      	ldrb	r2, [r2, #6]
 8006738:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	3305      	adds	r3, #5
 800673e:	4a1f      	ldr	r2, [pc, #124]	; (80067bc <ctlwizchip+0x1c0>)
 8006740:	79d2      	ldrb	r2, [r2, #7]
 8006742:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	3306      	adds	r3, #6
 8006748:	2200      	movs	r2, #0
 800674a:	701a      	strb	r2, [r3, #0]
         break;
 800674c:	e031      	b.n	80067b2 <ctlwizchip+0x1b6>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 800674e:	f000 fa13 	bl	8006b78 <wizphy_reset>
         break;
 8006752:	e02e      	b.n	80067b2 <ctlwizchip+0x1b6>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8006754:	6838      	ldr	r0, [r7, #0]
 8006756:	f000 fa36 	bl	8006bc6 <wizphy_setphyconf>
         break;
 800675a:	e02a      	b.n	80067b2 <ctlwizchip+0x1b6>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 800675c:	6838      	ldr	r0, [r7, #0]
 800675e:	f000 fa74 	bl	8006c4a <wizphy_getphyconf>
         break;
 8006762:	e026      	b.n	80067b2 <ctlwizchip+0x1b6>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	4618      	mov	r0, r3
 800676a:	f000 fad7 	bl	8006d1c <wizphy_setphypmode>
 800676e:	4603      	mov	r3, r0
 8006770:	e020      	b.n	80067b4 <ctlwizchip+0x1b8>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8006772:	f000 f9e8 	bl	8006b46 <wizphy_getphypmode>
 8006776:	4603      	mov	r3, r0
 8006778:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 800677a:	7dfb      	ldrb	r3, [r7, #23]
 800677c:	2bff      	cmp	r3, #255	; 0xff
 800677e:	d102      	bne.n	8006786 <ctlwizchip+0x18a>
 8006780:	f04f 33ff 	mov.w	r3, #4294967295
 8006784:	e016      	b.n	80067b4 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	7dfa      	ldrb	r2, [r7, #23]
 800678a:	701a      	strb	r2, [r3, #0]
         break;
 800678c:	e011      	b.n	80067b2 <ctlwizchip+0x1b6>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 800678e:	f000 f9c4 	bl	8006b1a <wizphy_getphylink>
 8006792:	4603      	mov	r3, r0
 8006794:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8006796:	7dfb      	ldrb	r3, [r7, #23]
 8006798:	2bff      	cmp	r3, #255	; 0xff
 800679a:	d102      	bne.n	80067a2 <ctlwizchip+0x1a6>
 800679c:	f04f 33ff 	mov.w	r3, #4294967295
 80067a0:	e008      	b.n	80067b4 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	7dfa      	ldrb	r2, [r7, #23]
 80067a6:	701a      	strb	r2, [r3, #0]
         break;
 80067a8:	e003      	b.n	80067b2 <ctlwizchip+0x1b6>
   #endif      
      default:
         return -1;
 80067aa:	f04f 33ff 	mov.w	r3, #4294967295
 80067ae:	e001      	b.n	80067b4 <ctlwizchip+0x1b8>
         break;
 80067b0:	bf00      	nop
   }
   return 0;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	371c      	adds	r7, #28
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd90      	pop	{r4, r7, pc}
 80067bc:	2000006c 	.word	0x2000006c

080067c0 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	4603      	mov	r3, r0
 80067c8:	6039      	str	r1, [r7, #0]
 80067ca:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 80067cc:	79fb      	ldrb	r3, [r7, #7]
 80067ce:	2b05      	cmp	r3, #5
 80067d0:	d82c      	bhi.n	800682c <ctlnetwork+0x6c>
 80067d2:	a201      	add	r2, pc, #4	; (adr r2, 80067d8 <ctlnetwork+0x18>)
 80067d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d8:	080067f1 	.word	0x080067f1
 80067dc:	080067f9 	.word	0x080067f9
 80067e0:	08006801 	.word	0x08006801
 80067e4:	0800680f 	.word	0x0800680f
 80067e8:	0800681d 	.word	0x0800681d
 80067ec:	08006825 	.word	0x08006825
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 80067f0:	6838      	ldr	r0, [r7, #0]
 80067f2:	f000 fadd 	bl	8006db0 <wizchip_setnetinfo>
         break;
 80067f6:	e01c      	b.n	8006832 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 80067f8:	6838      	ldr	r0, [r7, #0]
 80067fa:	f000 fb19 	bl	8006e30 <wizchip_getnetinfo>
         break;
 80067fe:	e018      	b.n	8006832 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	4618      	mov	r0, r3
 8006806:	f000 fb53 	bl	8006eb0 <wizchip_setnetmode>
 800680a:	4603      	mov	r3, r0
 800680c:	e012      	b.n	8006834 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 800680e:	f000 fb71 	bl	8006ef4 <wizchip_getnetmode>
 8006812:	4603      	mov	r3, r0
 8006814:	461a      	mov	r2, r3
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	701a      	strb	r2, [r3, #0]
         break;
 800681a:	e00a      	b.n	8006832 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 800681c:	6838      	ldr	r0, [r7, #0]
 800681e:	f000 fb71 	bl	8006f04 <wizchip_settimeout>
         break;
 8006822:	e006      	b.n	8006832 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8006824:	6838      	ldr	r0, [r7, #0]
 8006826:	f000 fb8e 	bl	8006f46 <wizchip_gettimeout>
         break;
 800682a:	e002      	b.n	8006832 <ctlnetwork+0x72>
      default:
         return -1;
 800682c:	f04f 33ff 	mov.w	r3, #4294967295
 8006830:	e000      	b.n	8006834 <ctlnetwork+0x74>
   }
   return 0;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	3708      	adds	r7, #8
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b086      	sub	sp, #24
 8006840:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8006842:	1d3b      	adds	r3, r7, #4
 8006844:	2206      	movs	r2, #6
 8006846:	4619      	mov	r1, r3
 8006848:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800684c:	f7fe fc38 	bl	80050c0 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8006850:	f107 0314 	add.w	r3, r7, #20
 8006854:	2204      	movs	r2, #4
 8006856:	4619      	mov	r1, r3
 8006858:	f44f 7080 	mov.w	r0, #256	; 0x100
 800685c:	f7fe fc30 	bl	80050c0 <WIZCHIP_READ_BUF>
 8006860:	f107 0310 	add.w	r3, r7, #16
 8006864:	2204      	movs	r2, #4
 8006866:	4619      	mov	r1, r3
 8006868:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800686c:	f7fe fc28 	bl	80050c0 <WIZCHIP_READ_BUF>
 8006870:	f107 030c 	add.w	r3, r7, #12
 8006874:	2204      	movs	r2, #4
 8006876:	4619      	mov	r1, r3
 8006878:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800687c:	f7fe fc20 	bl	80050c0 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8006880:	2180      	movs	r1, #128	; 0x80
 8006882:	2000      	movs	r0, #0
 8006884:	f7fe fbce 	bl	8005024 <WIZCHIP_WRITE>
   getMR(); // for delay
 8006888:	2000      	movs	r0, #0
 800688a:	f7fe fb7f 	bl	8004f8c <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 800688e:	1d3b      	adds	r3, r7, #4
 8006890:	2206      	movs	r2, #6
 8006892:	4619      	mov	r1, r3
 8006894:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8006898:	f7fe fc72 	bl	8005180 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 800689c:	f107 0314 	add.w	r3, r7, #20
 80068a0:	2204      	movs	r2, #4
 80068a2:	4619      	mov	r1, r3
 80068a4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80068a8:	f7fe fc6a 	bl	8005180 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 80068ac:	f107 0310 	add.w	r3, r7, #16
 80068b0:	2204      	movs	r2, #4
 80068b2:	4619      	mov	r1, r3
 80068b4:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80068b8:	f7fe fc62 	bl	8005180 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 80068bc:	f107 030c 	add.w	r3, r7, #12
 80068c0:	2204      	movs	r2, #4
 80068c2:	4619      	mov	r1, r3
 80068c4:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80068c8:	f7fe fc5a 	bl	8005180 <WIZCHIP_WRITE_BUF>
}
 80068cc:	bf00      	nop
 80068ce:	3718      	adds	r7, #24
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 80068de:	2300      	movs	r3, #0
 80068e0:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 80068e2:	f7ff ffab 	bl	800683c <wizchip_sw_reset>
   if(txsize)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d03b      	beq.n	8006964 <wizchip_init+0x90>
   {
      tmp = 0;
 80068ec:	2300      	movs	r3, #0
 80068ee:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80068f0:	2300      	movs	r3, #0
 80068f2:	73fb      	strb	r3, [r7, #15]
 80068f4:	e015      	b.n	8006922 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 80068f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	4413      	add	r3, r2
 80068fe:	781a      	ldrb	r2, [r3, #0]
 8006900:	7bbb      	ldrb	r3, [r7, #14]
 8006902:	4413      	add	r3, r2
 8006904:	b2db      	uxtb	r3, r3
 8006906:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8006908:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800690c:	2b10      	cmp	r3, #16
 800690e:	dd02      	ble.n	8006916 <wizchip_init+0x42>
 8006910:	f04f 33ff 	mov.w	r3, #4294967295
 8006914:	e066      	b.n	80069e4 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800691a:	b2db      	uxtb	r3, r3
 800691c:	3301      	adds	r3, #1
 800691e:	b2db      	uxtb	r3, r3
 8006920:	73fb      	strb	r3, [r7, #15]
 8006922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006926:	2b07      	cmp	r3, #7
 8006928:	dde5      	ble.n	80068f6 <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800692a:	2300      	movs	r3, #0
 800692c:	73fb      	strb	r3, [r7, #15]
 800692e:	e015      	b.n	800695c <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8006930:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	3301      	adds	r3, #1
 8006938:	00db      	lsls	r3, r3, #3
 800693a:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800693e:	4618      	mov	r0, r3
 8006940:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	4413      	add	r3, r2
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	4619      	mov	r1, r3
 800694c:	f7fe fb6a 	bl	8005024 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006950:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006954:	b2db      	uxtb	r3, r3
 8006956:	3301      	adds	r3, #1
 8006958:	b2db      	uxtb	r3, r3
 800695a:	73fb      	strb	r3, [r7, #15]
 800695c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006960:	2b07      	cmp	r3, #7
 8006962:	dde5      	ble.n	8006930 <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d03b      	beq.n	80069e2 <wizchip_init+0x10e>
   {
      tmp = 0;
 800696a:	2300      	movs	r3, #0
 800696c:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800696e:	2300      	movs	r3, #0
 8006970:	73fb      	strb	r3, [r7, #15]
 8006972:	e015      	b.n	80069a0 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8006974:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006978:	683a      	ldr	r2, [r7, #0]
 800697a:	4413      	add	r3, r2
 800697c:	781a      	ldrb	r2, [r3, #0]
 800697e:	7bbb      	ldrb	r3, [r7, #14]
 8006980:	4413      	add	r3, r2
 8006982:	b2db      	uxtb	r3, r3
 8006984:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8006986:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800698a:	2b10      	cmp	r3, #16
 800698c:	dd02      	ble.n	8006994 <wizchip_init+0xc0>
 800698e:	f04f 33ff 	mov.w	r3, #4294967295
 8006992:	e027      	b.n	80069e4 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006994:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006998:	b2db      	uxtb	r3, r3
 800699a:	3301      	adds	r3, #1
 800699c:	b2db      	uxtb	r3, r3
 800699e:	73fb      	strb	r3, [r7, #15]
 80069a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069a4:	2b07      	cmp	r3, #7
 80069a6:	dde5      	ble.n	8006974 <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80069a8:	2300      	movs	r3, #0
 80069aa:	73fb      	strb	r3, [r7, #15]
 80069ac:	e015      	b.n	80069da <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 80069ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	3301      	adds	r3, #1
 80069b6:	00db      	lsls	r3, r3, #3
 80069b8:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80069bc:	4618      	mov	r0, r3
 80069be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069c2:	683a      	ldr	r2, [r7, #0]
 80069c4:	4413      	add	r3, r2
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	4619      	mov	r1, r3
 80069ca:	f7fe fb2b 	bl	8005024 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80069ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	3301      	adds	r3, #1
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	73fb      	strb	r3, [r7, #15]
 80069da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069de:	2b07      	cmp	r3, #7
 80069e0:	dde5      	ble.n	80069ae <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 80069e2:	2300      	movs	r3, #0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3710      	adds	r7, #16
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}

080069ec <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	4603      	mov	r3, r0
 80069f4:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 80069f6:	88fb      	ldrh	r3, [r7, #6]
 80069f8:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 80069fa:	88fb      	ldrh	r3, [r7, #6]
 80069fc:	0a1b      	lsrs	r3, r3, #8
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8006a02:	7bfb      	ldrb	r3, [r7, #15]
 8006a04:	f023 030f 	bic.w	r3, r3, #15
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8006a10:	f7fe fb08 	bl	8005024 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8006a14:	2300      	movs	r3, #0
 8006a16:	73fb      	strb	r3, [r7, #15]
 8006a18:	e014      	b.n	8006a44 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 8006a1a:	7bba      	ldrb	r2, [r7, #14]
 8006a1c:	7bfb      	ldrb	r3, [r7, #15]
 8006a1e:	fa42 f303 	asr.w	r3, r2, r3
 8006a22:	f003 0301 	and.w	r3, r3, #1
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d009      	beq.n	8006a3e <wizchip_clrinterrupt+0x52>
 8006a2a:	7bfb      	ldrb	r3, [r7, #15]
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	3301      	adds	r3, #1
 8006a30:	00db      	lsls	r3, r3, #3
 8006a32:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006a36:	211f      	movs	r1, #31
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f7fe faf3 	bl	8005024 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 8006a3e:	7bfb      	ldrb	r3, [r7, #15]
 8006a40:	3301      	adds	r3, #1
 8006a42:	73fb      	strb	r3, [r7, #15]
 8006a44:	7bfb      	ldrb	r3, [r7, #15]
 8006a46:	2b07      	cmp	r3, #7
 8006a48:	d9e7      	bls.n	8006a1a <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 8006a4a:	bf00      	nop
 8006a4c:	bf00      	nop
 8006a4e:	3710      	adds	r7, #16
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8006a62:	2300      	movs	r3, #0
 8006a64:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8006a66:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8006a6a:	f7fe fa8f 	bl	8004f8c <WIZCHIP_READ>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	f023 030f 	bic.w	r3, r3, #15
 8006a74:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8006a76:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8006a7a:	f7fe fa87 	bl	8004f8c <WIZCHIP_READ>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8006a82:	79bb      	ldrb	r3, [r7, #6]
 8006a84:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8006a86:	88bb      	ldrh	r3, [r7, #4]
 8006a88:	021b      	lsls	r3, r3, #8
 8006a8a:	b29a      	uxth	r2, r3
 8006a8c:	79fb      	ldrb	r3, [r7, #7]
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	4413      	add	r3, r2
 8006a92:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8006a94:	88bb      	ldrh	r3, [r7, #4]
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3708      	adds	r7, #8
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}

08006a9e <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8006a9e:	b580      	push	{r7, lr}
 8006aa0:	b084      	sub	sp, #16
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8006aa8:	88fb      	ldrh	r3, [r7, #6]
 8006aaa:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8006aac:	88fb      	ldrh	r3, [r7, #6]
 8006aae:	0a1b      	lsrs	r3, r3, #8
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8006ab4:	7bfb      	ldrb	r3, [r7, #15]
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8006abc:	f7fe fab2 	bl	8005024 <WIZCHIP_WRITE>
   setSIMR(simr);
 8006ac0:	7bbb      	ldrb	r3, [r7, #14]
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8006ac8:	f7fe faac 	bl	8005024 <WIZCHIP_WRITE>
#endif   
}
 8006acc:	bf00      	nop
 8006ace:	3710      	adds	r7, #16
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b082      	sub	sp, #8
 8006ad8:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8006ada:	2300      	movs	r3, #0
 8006adc:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8006ae6:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8006aea:	f7fe fa4f 	bl	8004f8c <WIZCHIP_READ>
 8006aee:	4603      	mov	r3, r0
 8006af0:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8006af2:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8006af6:	f7fe fa49 	bl	8004f8c <WIZCHIP_READ>
 8006afa:	4603      	mov	r3, r0
 8006afc:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8006afe:	79bb      	ldrb	r3, [r7, #6]
 8006b00:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8006b02:	88bb      	ldrh	r3, [r7, #4]
 8006b04:	021b      	lsls	r3, r3, #8
 8006b06:	b29a      	uxth	r2, r3
 8006b08:	79fb      	ldrb	r3, [r7, #7]
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	4413      	add	r3, r2
 8006b0e:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8006b10:	88bb      	ldrh	r3, [r7, #4]
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3708      	adds	r7, #8
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b082      	sub	sp, #8
 8006b1e:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8006b20:	2300      	movs	r3, #0
 8006b22:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8006b24:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8006b28:	f7fe fa30 	bl	8004f8c <WIZCHIP_READ>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	f003 0301 	and.w	r3, r3, #1
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d001      	beq.n	8006b3a <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 8006b36:	2301      	movs	r3, #1
 8006b38:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 8006b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3708      	adds	r7, #8
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b082      	sub	sp, #8
 8006b4a:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8006b50:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8006b54:	f7fe fa1a 	bl	8004f8c <WIZCHIP_READ>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b5e:	2b30      	cmp	r3, #48	; 0x30
 8006b60:	d102      	bne.n	8006b68 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8006b62:	2301      	movs	r3, #1
 8006b64:	71fb      	strb	r3, [r7, #7]
 8006b66:	e001      	b.n	8006b6c <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8006b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3708      	adds	r7, #8
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8006b7e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8006b82:	f7fe fa03 	bl	8004f8c <WIZCHIP_READ>
 8006b86:	4603      	mov	r3, r0
 8006b88:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8006b8a:	79fb      	ldrb	r3, [r7, #7]
 8006b8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b90:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8006b92:	79fb      	ldrb	r3, [r7, #7]
 8006b94:	4619      	mov	r1, r3
 8006b96:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8006b9a:	f7fe fa43 	bl	8005024 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8006b9e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8006ba2:	f7fe f9f3 	bl	8004f8c <WIZCHIP_READ>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8006baa:	79fb      	ldrb	r3, [r7, #7]
 8006bac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006bb0:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8006bb2:	79fb      	ldrb	r3, [r7, #7]
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8006bba:	f7fe fa33 	bl	8005024 <WIZCHIP_WRITE>
}
 8006bbe:	bf00      	nop
 8006bc0:	3708      	adds	r7, #8
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b084      	sub	sp, #16
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d104      	bne.n	8006be4 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8006bda:	7bfb      	ldrb	r3, [r7, #15]
 8006bdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006be0:	73fb      	strb	r3, [r7, #15]
 8006be2:	e003      	b.n	8006bec <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8006be4:	7bfb      	ldrb	r3, [r7, #15]
 8006be6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bea:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	785b      	ldrb	r3, [r3, #1]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d104      	bne.n	8006bfe <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8006bf4:	7bfb      	ldrb	r3, [r7, #15]
 8006bf6:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8006bfa:	73fb      	strb	r3, [r7, #15]
 8006bfc:	e019      	b.n	8006c32 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	78db      	ldrb	r3, [r3, #3]
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d10d      	bne.n	8006c22 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	789b      	ldrb	r3, [r3, #2]
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d104      	bne.n	8006c18 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8006c0e:	7bfb      	ldrb	r3, [r7, #15]
 8006c10:	f043 0318 	orr.w	r3, r3, #24
 8006c14:	73fb      	strb	r3, [r7, #15]
 8006c16:	e00c      	b.n	8006c32 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8006c18:	7bfb      	ldrb	r3, [r7, #15]
 8006c1a:	f043 0308 	orr.w	r3, r3, #8
 8006c1e:	73fb      	strb	r3, [r7, #15]
 8006c20:	e007      	b.n	8006c32 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	789b      	ldrb	r3, [r3, #2]
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d103      	bne.n	8006c32 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8006c2a:	7bfb      	ldrb	r3, [r7, #15]
 8006c2c:	f043 0310 	orr.w	r3, r3, #16
 8006c30:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8006c32:	7bfb      	ldrb	r3, [r7, #15]
 8006c34:	4619      	mov	r1, r3
 8006c36:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8006c3a:	f7fe f9f3 	bl	8005024 <WIZCHIP_WRITE>
   wizphy_reset();
 8006c3e:	f7ff ff9b 	bl	8006b78 <wizphy_reset>
}
 8006c42:	bf00      	nop
 8006c44:	3710      	adds	r7, #16
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}

08006c4a <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b084      	sub	sp, #16
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8006c52:	2300      	movs	r3, #0
 8006c54:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8006c56:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8006c5a:	f7fe f997 	bl	8004f8c <WIZCHIP_READ>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8006c62:	7bfb      	ldrb	r3, [r7, #15]
 8006c64:	119b      	asrs	r3, r3, #6
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	f003 0301 	and.w	r3, r3, #1
 8006c6c:	b2da      	uxtb	r2, r3
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8006c72:	7bfb      	ldrb	r3, [r7, #15]
 8006c74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c78:	2b20      	cmp	r3, #32
 8006c7a:	d001      	beq.n	8006c80 <wizphy_getphyconf+0x36>
 8006c7c:	2b38      	cmp	r3, #56	; 0x38
 8006c7e:	d103      	bne.n	8006c88 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	705a      	strb	r2, [r3, #1]
         break;
 8006c86:	e003      	b.n	8006c90 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	705a      	strb	r2, [r3, #1]
         break;
 8006c8e:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8006c90:	7bfb      	ldrb	r3, [r7, #15]
 8006c92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c96:	3b10      	subs	r3, #16
 8006c98:	2b10      	cmp	r3, #16
 8006c9a:	bf8c      	ite	hi
 8006c9c:	2201      	movhi	r2, #1
 8006c9e:	2200      	movls	r2, #0
 8006ca0:	b2d2      	uxtb	r2, r2
 8006ca2:	2a00      	cmp	r2, #0
 8006ca4:	d111      	bne.n	8006cca <wizphy_getphyconf+0x80>
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cac:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8006cb0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	bf14      	ite	ne
 8006cb8:	2301      	movne	r3, #1
 8006cba:	2300      	moveq	r3, #0
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d003      	beq.n	8006cca <wizphy_getphyconf+0x80>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	709a      	strb	r2, [r3, #2]
         break;
 8006cc8:	e003      	b.n	8006cd2 <wizphy_getphyconf+0x88>
      default:
         phyconf->speed = PHY_SPEED_10;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	709a      	strb	r2, [r3, #2]
         break;
 8006cd0:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8006cd2:	7bfb      	ldrb	r3, [r7, #15]
 8006cd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006cd8:	3b08      	subs	r3, #8
 8006cda:	2b18      	cmp	r3, #24
 8006cdc:	bf8c      	ite	hi
 8006cde:	2201      	movhi	r2, #1
 8006ce0:	2200      	movls	r2, #0
 8006ce2:	b2d2      	uxtb	r2, r2
 8006ce4:	2a00      	cmp	r2, #0
 8006ce6:	d111      	bne.n	8006d0c <wizphy_getphyconf+0xc2>
 8006ce8:	2201      	movs	r2, #1
 8006cea:	fa02 f303 	lsl.w	r3, r2, r3
 8006cee:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8006cf2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	bf14      	ite	ne
 8006cfa:	2301      	movne	r3, #1
 8006cfc:	2300      	moveq	r3, #0
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d003      	beq.n	8006d0c <wizphy_getphyconf+0xc2>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2201      	movs	r2, #1
 8006d08:	70da      	strb	r2, [r3, #3]
         break;
 8006d0a:	e003      	b.n	8006d14 <wizphy_getphyconf+0xca>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	70da      	strb	r2, [r3, #3]
         break;
 8006d12:	bf00      	nop
   }
}
 8006d14:	bf00      	nop
 8006d16:	3710      	adds	r7, #16
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	4603      	mov	r3, r0
 8006d24:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8006d26:	2300      	movs	r3, #0
 8006d28:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8006d2a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8006d2e:	f7fe f92d 	bl	8004f8c <WIZCHIP_READ>
 8006d32:	4603      	mov	r3, r0
 8006d34:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8006d36:	7bfb      	ldrb	r3, [r7, #15]
 8006d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d102      	bne.n	8006d46 <wizphy_setphypmode+0x2a>
 8006d40:	f04f 33ff 	mov.w	r3, #4294967295
 8006d44:	e030      	b.n	8006da8 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8006d46:	7bfb      	ldrb	r3, [r7, #15]
 8006d48:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8006d4c:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8006d4e:	79fb      	ldrb	r3, [r7, #7]
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d104      	bne.n	8006d5e <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8006d54:	7bfb      	ldrb	r3, [r7, #15]
 8006d56:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8006d5a:	73fb      	strb	r3, [r7, #15]
 8006d5c:	e003      	b.n	8006d66 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8006d5e:	7bfb      	ldrb	r3, [r7, #15]
 8006d60:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8006d64:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8006d66:	7bfb      	ldrb	r3, [r7, #15]
 8006d68:	4619      	mov	r1, r3
 8006d6a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8006d6e:	f7fe f959 	bl	8005024 <WIZCHIP_WRITE>
   wizphy_reset();
 8006d72:	f7ff ff01 	bl	8006b78 <wizphy_reset>
   tmp = getPHYCFGR();
 8006d76:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8006d7a:	f7fe f907 	bl	8004f8c <WIZCHIP_READ>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8006d82:	79fb      	ldrb	r3, [r7, #7]
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d106      	bne.n	8006d96 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8006d88:	7bfb      	ldrb	r3, [r7, #15]
 8006d8a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d008      	beq.n	8006da4 <wizphy_setphypmode+0x88>
 8006d92:	2300      	movs	r3, #0
 8006d94:	e008      	b.n	8006da8 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8006d96:	7bfb      	ldrb	r3, [r7, #15]
 8006d98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d001      	beq.n	8006da4 <wizphy_setphypmode+0x88>
 8006da0:	2300      	movs	r3, #0
 8006da2:	e001      	b.n	8006da8 <wizphy_setphypmode+0x8c>
   }
   return -1;
 8006da4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3710      	adds	r7, #16
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2206      	movs	r2, #6
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8006dc2:	f7fe f9dd 	bl	8005180 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	330e      	adds	r3, #14
 8006dca:	2204      	movs	r2, #4
 8006dcc:	4619      	mov	r1, r3
 8006dce:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006dd2:	f7fe f9d5 	bl	8005180 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	330a      	adds	r3, #10
 8006dda:	2204      	movs	r2, #4
 8006ddc:	4619      	mov	r1, r3
 8006dde:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8006de2:	f7fe f9cd 	bl	8005180 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	3306      	adds	r3, #6
 8006dea:	2204      	movs	r2, #4
 8006dec:	4619      	mov	r1, r3
 8006dee:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8006df2:	f7fe f9c5 	bl	8005180 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	7c9a      	ldrb	r2, [r3, #18]
 8006dfa:	4b0b      	ldr	r3, [pc, #44]	; (8006e28 <wizchip_setnetinfo+0x78>)
 8006dfc:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	7cda      	ldrb	r2, [r3, #19]
 8006e02:	4b09      	ldr	r3, [pc, #36]	; (8006e28 <wizchip_setnetinfo+0x78>)
 8006e04:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	7d1a      	ldrb	r2, [r3, #20]
 8006e0a:	4b07      	ldr	r3, [pc, #28]	; (8006e28 <wizchip_setnetinfo+0x78>)
 8006e0c:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	7d5a      	ldrb	r2, [r3, #21]
 8006e12:	4b05      	ldr	r3, [pc, #20]	; (8006e28 <wizchip_setnetinfo+0x78>)
 8006e14:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	7d9a      	ldrb	r2, [r3, #22]
 8006e1a:	4b04      	ldr	r3, [pc, #16]	; (8006e2c <wizchip_setnetinfo+0x7c>)
 8006e1c:	701a      	strb	r2, [r3, #0]
}
 8006e1e:	bf00      	nop
 8006e20:	3708      	adds	r7, #8
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	20001a90 	.word	0x20001a90
 8006e2c:	20001a94 	.word	0x20001a94

08006e30 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2206      	movs	r2, #6
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8006e42:	f7fe f93d 	bl	80050c0 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	330e      	adds	r3, #14
 8006e4a:	2204      	movs	r2, #4
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006e52:	f7fe f935 	bl	80050c0 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	330a      	adds	r3, #10
 8006e5a:	2204      	movs	r2, #4
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8006e62:	f7fe f92d 	bl	80050c0 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	3306      	adds	r3, #6
 8006e6a:	2204      	movs	r2, #4
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8006e72:	f7fe f925 	bl	80050c0 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8006e76:	4b0c      	ldr	r3, [pc, #48]	; (8006ea8 <wizchip_getnetinfo+0x78>)
 8006e78:	781a      	ldrb	r2, [r3, #0]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8006e7e:	4b0a      	ldr	r3, [pc, #40]	; (8006ea8 <wizchip_getnetinfo+0x78>)
 8006e80:	785a      	ldrb	r2, [r3, #1]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8006e86:	4b08      	ldr	r3, [pc, #32]	; (8006ea8 <wizchip_getnetinfo+0x78>)
 8006e88:	789a      	ldrb	r2, [r3, #2]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8006e8e:	4b06      	ldr	r3, [pc, #24]	; (8006ea8 <wizchip_getnetinfo+0x78>)
 8006e90:	78da      	ldrb	r2, [r3, #3]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8006e96:	4b05      	ldr	r3, [pc, #20]	; (8006eac <wizchip_getnetinfo+0x7c>)
 8006e98:	781a      	ldrb	r2, [r3, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	759a      	strb	r2, [r3, #22]
}
 8006e9e:	bf00      	nop
 8006ea0:	3708      	adds	r7, #8
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	20001a90 	.word	0x20001a90
 8006eac:	20001a94 	.word	0x20001a94

08006eb0 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8006ebe:	79fb      	ldrb	r3, [r7, #7]
 8006ec0:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d002      	beq.n	8006ece <wizchip_setnetmode+0x1e>
 8006ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8006ecc:	e00e      	b.n	8006eec <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 8006ece:	2000      	movs	r0, #0
 8006ed0:	f7fe f85c 	bl	8004f8c <WIZCHIP_READ>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8006ed8:	7bfa      	ldrb	r2, [r7, #15]
 8006eda:	79fb      	ldrb	r3, [r7, #7]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8006ee0:	7bfb      	ldrb	r3, [r7, #15]
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	2000      	movs	r0, #0
 8006ee6:	f7fe f89d 	bl	8005024 <WIZCHIP_WRITE>
   return 0;
 8006eea:	2300      	movs	r3, #0
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3710      	adds	r7, #16
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8006ef8:	2000      	movs	r0, #0
 8006efa:	f7fe f847 	bl	8004f8c <WIZCHIP_READ>
 8006efe:	4603      	mov	r3, r0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b082      	sub	sp, #8
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	4619      	mov	r1, r3
 8006f12:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8006f16:	f7fe f885 	bl	8005024 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	885b      	ldrh	r3, [r3, #2]
 8006f1e:	0a1b      	lsrs	r3, r3, #8
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	4619      	mov	r1, r3
 8006f26:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8006f2a:	f7fe f87b 	bl	8005024 <WIZCHIP_WRITE>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	885b      	ldrh	r3, [r3, #2]
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	4619      	mov	r1, r3
 8006f36:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8006f3a:	f7fe f873 	bl	8005024 <WIZCHIP_WRITE>
}
 8006f3e:	bf00      	nop
 8006f40:	3708      	adds	r7, #8
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}

08006f46 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8006f46:	b590      	push	{r4, r7, lr}
 8006f48:	b083      	sub	sp, #12
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8006f4e:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8006f52:	f7fe f81b 	bl	8004f8c <WIZCHIP_READ>
 8006f56:	4603      	mov	r3, r0
 8006f58:	461a      	mov	r2, r3
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8006f5e:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8006f62:	f7fe f813 	bl	8004f8c <WIZCHIP_READ>
 8006f66:	4603      	mov	r3, r0
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	021b      	lsls	r3, r3, #8
 8006f6c:	b29c      	uxth	r4, r3
 8006f6e:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8006f72:	f7fe f80b 	bl	8004f8c <WIZCHIP_READ>
 8006f76:	4603      	mov	r3, r0
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	4423      	add	r3, r4
 8006f7c:	b29a      	uxth	r2, r3
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	805a      	strh	r2, [r3, #2]
}
 8006f82:	bf00      	nop
 8006f84:	370c      	adds	r7, #12
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd90      	pop	{r4, r7, pc}
	...

08006f8c <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 8006f90:	2204      	movs	r2, #4
 8006f92:	4909      	ldr	r1, [pc, #36]	; (8006fb8 <default_ip_assign+0x2c>)
 8006f94:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8006f98:	f7fe f8f2 	bl	8005180 <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 8006f9c:	2204      	movs	r2, #4
 8006f9e:	4907      	ldr	r1, [pc, #28]	; (8006fbc <default_ip_assign+0x30>)
 8006fa0:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8006fa4:	f7fe f8ec 	bl	8005180 <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 8006fa8:	2204      	movs	r2, #4
 8006faa:	4905      	ldr	r1, [pc, #20]	; (8006fc0 <default_ip_assign+0x34>)
 8006fac:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006fb0:	f7fe f8e6 	bl	8005180 <WIZCHIP_WRITE_BUF>
}
 8006fb4:	bf00      	nop
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	20001aa4 	.word	0x20001aa4
 8006fbc:	20001aac 	.word	0x20001aac
 8006fc0:	20001aa8 	.word	0x20001aa8

08006fc4 <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 8006fc8:	2180      	movs	r1, #128	; 0x80
 8006fca:	2000      	movs	r0, #0
 8006fcc:	f7fe f82a 	bl	8005024 <WIZCHIP_WRITE>
   getMR(); // for delay
 8006fd0:	2000      	movs	r0, #0
 8006fd2:	f7fd ffdb 	bl	8004f8c <WIZCHIP_READ>
   default_ip_assign();
 8006fd6:	f7ff ffd9 	bl	8006f8c <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 8006fda:	2206      	movs	r2, #6
 8006fdc:	4903      	ldr	r1, [pc, #12]	; (8006fec <default_ip_update+0x28>)
 8006fde:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8006fe2:	f7fe f8cd 	bl	8005180 <WIZCHIP_WRITE_BUF>
}
 8006fe6:	bf00      	nop
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	20001ac4 	.word	0x20001ac4

08006ff0 <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 8006ff4:	2180      	movs	r1, #128	; 0x80
 8006ff6:	2000      	movs	r0, #0
 8006ff8:	f7fe f814 	bl	8005024 <WIZCHIP_WRITE>
	getMR(); // for delay
 8006ffc:	2000      	movs	r0, #0
 8006ffe:	f7fd ffc5 	bl	8004f8c <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 8007002:	2206      	movs	r2, #6
 8007004:	4903      	ldr	r1, [pc, #12]	; (8007014 <default_ip_conflict+0x24>)
 8007006:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800700a:	f7fe f8b9 	bl	8005180 <WIZCHIP_WRITE_BUF>
}
 800700e:	bf00      	nop
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	20001ac4 	.word	0x20001ac4

08007018 <makeDHCPMSG>:
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
}

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 800701e:	463b      	mov	r3, r7
 8007020:	2206      	movs	r2, #6
 8007022:	4619      	mov	r1, r3
 8007024:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8007028:	f7fe f84a 	bl	80050c0 <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 800702c:	4b72      	ldr	r3, [pc, #456]	; (80071f8 <makeDHCPMSG+0x1e0>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2201      	movs	r2, #1
 8007032:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 8007034:	4b70      	ldr	r3, [pc, #448]	; (80071f8 <makeDHCPMSG+0x1e0>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	2201      	movs	r2, #1
 800703a:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 800703c:	4b6e      	ldr	r3, [pc, #440]	; (80071f8 <makeDHCPMSG+0x1e0>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2206      	movs	r2, #6
 8007042:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 8007044:	4b6c      	ldr	r3, [pc, #432]	; (80071f8 <makeDHCPMSG+0x1e0>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2200      	movs	r2, #0
 800704a:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 800704c:	4b6a      	ldr	r3, [pc, #424]	; (80071f8 <makeDHCPMSG+0x1e0>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	3304      	adds	r3, #4
 8007052:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 8007054:	4b69      	ldr	r3, [pc, #420]	; (80071fc <makeDHCPMSG+0x1e4>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	0e1b      	lsrs	r3, r3, #24
 800705a:	b2da      	uxtb	r2, r3
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 8007060:	4b66      	ldr	r3, [pc, #408]	; (80071fc <makeDHCPMSG+0x1e4>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	0c1a      	lsrs	r2, r3, #16
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	3301      	adds	r3, #1
 800706a:	b2d2      	uxtb	r2, r2
 800706c:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 800706e:	4b63      	ldr	r3, [pc, #396]	; (80071fc <makeDHCPMSG+0x1e4>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	0a1a      	lsrs	r2, r3, #8
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	3302      	adds	r3, #2
 8007078:	b2d2      	uxtb	r2, r2
 800707a:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 800707c:	4b5f      	ldr	r3, [pc, #380]	; (80071fc <makeDHCPMSG+0x1e4>)
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	3303      	adds	r3, #3
 8007084:	b2d2      	uxtb	r2, r2
 8007086:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 8007088:	4b5b      	ldr	r3, [pc, #364]	; (80071f8 <makeDHCPMSG+0x1e0>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2200      	movs	r2, #0
 800708e:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 8007090:	4b59      	ldr	r3, [pc, #356]	; (80071f8 <makeDHCPMSG+0x1e0>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	330a      	adds	r3, #10
 8007096:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	2280      	movs	r2, #128	; 0x80
 800709c:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	3301      	adds	r3, #1
 80070a2:	2200      	movs	r2, #0
 80070a4:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 80070a6:	4b54      	ldr	r3, [pc, #336]	; (80071f8 <makeDHCPMSG+0x1e0>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2200      	movs	r2, #0
 80070ac:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 80070ae:	4b52      	ldr	r3, [pc, #328]	; (80071f8 <makeDHCPMSG+0x1e0>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	2200      	movs	r2, #0
 80070b4:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 80070b6:	4b50      	ldr	r3, [pc, #320]	; (80071f8 <makeDHCPMSG+0x1e0>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2200      	movs	r2, #0
 80070bc:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 80070be:	4b4e      	ldr	r3, [pc, #312]	; (80071f8 <makeDHCPMSG+0x1e0>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2200      	movs	r2, #0
 80070c4:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 80070c6:	4b4c      	ldr	r3, [pc, #304]	; (80071f8 <makeDHCPMSG+0x1e0>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	2200      	movs	r2, #0
 80070cc:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 80070ce:	4b4a      	ldr	r3, [pc, #296]	; (80071f8 <makeDHCPMSG+0x1e0>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	2200      	movs	r2, #0
 80070d4:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 80070d6:	4b48      	ldr	r3, [pc, #288]	; (80071f8 <makeDHCPMSG+0x1e0>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2200      	movs	r2, #0
 80070dc:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 80070de:	4b46      	ldr	r3, [pc, #280]	; (80071f8 <makeDHCPMSG+0x1e0>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	2200      	movs	r2, #0
 80070e4:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 80070e6:	4b44      	ldr	r3, [pc, #272]	; (80071f8 <makeDHCPMSG+0x1e0>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2200      	movs	r2, #0
 80070ec:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 80070ee:	4b42      	ldr	r3, [pc, #264]	; (80071f8 <makeDHCPMSG+0x1e0>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	2200      	movs	r2, #0
 80070f4:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 80070f6:	4b40      	ldr	r3, [pc, #256]	; (80071f8 <makeDHCPMSG+0x1e0>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2200      	movs	r2, #0
 80070fc:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 80070fe:	4b3e      	ldr	r3, [pc, #248]	; (80071f8 <makeDHCPMSG+0x1e0>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2200      	movs	r2, #0
 8007104:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 8007106:	4b3c      	ldr	r3, [pc, #240]	; (80071f8 <makeDHCPMSG+0x1e0>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	2200      	movs	r2, #0
 800710c:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 800710e:	4b3a      	ldr	r3, [pc, #232]	; (80071f8 <makeDHCPMSG+0x1e0>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2200      	movs	r2, #0
 8007114:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 8007116:	4b38      	ldr	r3, [pc, #224]	; (80071f8 <makeDHCPMSG+0x1e0>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2200      	movs	r2, #0
 800711c:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 800711e:	4b36      	ldr	r3, [pc, #216]	; (80071f8 <makeDHCPMSG+0x1e0>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	2200      	movs	r2, #0
 8007124:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 8007126:	4b34      	ldr	r3, [pc, #208]	; (80071f8 <makeDHCPMSG+0x1e0>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a35      	ldr	r2, [pc, #212]	; (8007200 <makeDHCPMSG+0x1e8>)
 800712c:	7812      	ldrb	r2, [r2, #0]
 800712e:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 8007130:	4b31      	ldr	r3, [pc, #196]	; (80071f8 <makeDHCPMSG+0x1e0>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a32      	ldr	r2, [pc, #200]	; (8007200 <makeDHCPMSG+0x1e8>)
 8007136:	7852      	ldrb	r2, [r2, #1]
 8007138:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 800713a:	4b2f      	ldr	r3, [pc, #188]	; (80071f8 <makeDHCPMSG+0x1e0>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a30      	ldr	r2, [pc, #192]	; (8007200 <makeDHCPMSG+0x1e8>)
 8007140:	7892      	ldrb	r2, [r2, #2]
 8007142:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 8007144:	4b2c      	ldr	r3, [pc, #176]	; (80071f8 <makeDHCPMSG+0x1e0>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a2d      	ldr	r2, [pc, #180]	; (8007200 <makeDHCPMSG+0x1e8>)
 800714a:	78d2      	ldrb	r2, [r2, #3]
 800714c:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 800714e:	4b2a      	ldr	r3, [pc, #168]	; (80071f8 <makeDHCPMSG+0x1e0>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a2b      	ldr	r2, [pc, #172]	; (8007200 <makeDHCPMSG+0x1e8>)
 8007154:	7912      	ldrb	r2, [r2, #4]
 8007156:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 800715a:	4b27      	ldr	r3, [pc, #156]	; (80071f8 <makeDHCPMSG+0x1e0>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a28      	ldr	r2, [pc, #160]	; (8007200 <makeDHCPMSG+0x1e8>)
 8007160:	7952      	ldrb	r2, [r2, #5]
 8007162:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 8007166:	2306      	movs	r3, #6
 8007168:	73fb      	strb	r3, [r7, #15]
 800716a:	e008      	b.n	800717e <makeDHCPMSG+0x166>
 800716c:	4b22      	ldr	r3, [pc, #136]	; (80071f8 <makeDHCPMSG+0x1e0>)
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	7bfb      	ldrb	r3, [r7, #15]
 8007172:	4413      	add	r3, r2
 8007174:	2200      	movs	r2, #0
 8007176:	771a      	strb	r2, [r3, #28]
 8007178:	7bfb      	ldrb	r3, [r7, #15]
 800717a:	3301      	adds	r3, #1
 800717c:	73fb      	strb	r3, [r7, #15]
 800717e:	7bfb      	ldrb	r3, [r7, #15]
 8007180:	2b0f      	cmp	r3, #15
 8007182:	d9f3      	bls.n	800716c <makeDHCPMSG+0x154>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 8007184:	2300      	movs	r3, #0
 8007186:	73fb      	strb	r3, [r7, #15]
 8007188:	e009      	b.n	800719e <makeDHCPMSG+0x186>
 800718a:	4b1b      	ldr	r3, [pc, #108]	; (80071f8 <makeDHCPMSG+0x1e0>)
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	7bfb      	ldrb	r3, [r7, #15]
 8007190:	4413      	add	r3, r2
 8007192:	2200      	movs	r2, #0
 8007194:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8007198:	7bfb      	ldrb	r3, [r7, #15]
 800719a:	3301      	adds	r3, #1
 800719c:	73fb      	strb	r3, [r7, #15]
 800719e:	7bfb      	ldrb	r3, [r7, #15]
 80071a0:	2b3f      	cmp	r3, #63	; 0x3f
 80071a2:	d9f2      	bls.n	800718a <makeDHCPMSG+0x172>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 80071a4:	2300      	movs	r3, #0
 80071a6:	73fb      	strb	r3, [r7, #15]
 80071a8:	e009      	b.n	80071be <makeDHCPMSG+0x1a6>
 80071aa:	4b13      	ldr	r3, [pc, #76]	; (80071f8 <makeDHCPMSG+0x1e0>)
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	7bfb      	ldrb	r3, [r7, #15]
 80071b0:	4413      	add	r3, r2
 80071b2:	2200      	movs	r2, #0
 80071b4:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 80071b8:	7bfb      	ldrb	r3, [r7, #15]
 80071ba:	3301      	adds	r3, #1
 80071bc:	73fb      	strb	r3, [r7, #15]
 80071be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	daf1      	bge.n	80071aa <makeDHCPMSG+0x192>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 80071c6:	4b0c      	ldr	r3, [pc, #48]	; (80071f8 <makeDHCPMSG+0x1e0>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2263      	movs	r2, #99	; 0x63
 80071cc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 80071d0:	4b09      	ldr	r3, [pc, #36]	; (80071f8 <makeDHCPMSG+0x1e0>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	2282      	movs	r2, #130	; 0x82
 80071d6:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 80071da:	4b07      	ldr	r3, [pc, #28]	; (80071f8 <makeDHCPMSG+0x1e0>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	2253      	movs	r2, #83	; 0x53
 80071e0:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 80071e4:	4b04      	ldr	r3, [pc, #16]	; (80071f8 <makeDHCPMSG+0x1e0>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2263      	movs	r2, #99	; 0x63
 80071ea:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
}
 80071ee:	bf00      	nop
 80071f0:	3710      	adds	r7, #16
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	20001ac0 	.word	0x20001ac0
 80071fc:	20001abc 	.word	0x20001abc
 8007200:	20001ac4 	.word	0x20001ac4

08007204 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 8007204:	b5b0      	push	{r4, r5, r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 800720a:	2300      	movs	r3, #0
 800720c:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 800720e:	f7ff ff03 	bl	8007018 <makeDHCPMSG>
   DHCP_SIP[0]=0;
 8007212:	4b56      	ldr	r3, [pc, #344]	; (800736c <send_DHCP_DISCOVER+0x168>)
 8007214:	2200      	movs	r2, #0
 8007216:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 8007218:	4b54      	ldr	r3, [pc, #336]	; (800736c <send_DHCP_DISCOVER+0x168>)
 800721a:	2200      	movs	r2, #0
 800721c:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 800721e:	4b53      	ldr	r3, [pc, #332]	; (800736c <send_DHCP_DISCOVER+0x168>)
 8007220:	2200      	movs	r2, #0
 8007222:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 8007224:	4b51      	ldr	r3, [pc, #324]	; (800736c <send_DHCP_DISCOVER+0x168>)
 8007226:	2200      	movs	r2, #0
 8007228:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 800722a:	4b51      	ldr	r3, [pc, #324]	; (8007370 <send_DHCP_DISCOVER+0x16c>)
 800722c:	2200      	movs	r2, #0
 800722e:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 8007230:	4b4f      	ldr	r3, [pc, #316]	; (8007370 <send_DHCP_DISCOVER+0x16c>)
 8007232:	2200      	movs	r2, #0
 8007234:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 8007236:	4b4e      	ldr	r3, [pc, #312]	; (8007370 <send_DHCP_DISCOVER+0x16c>)
 8007238:	2200      	movs	r2, #0
 800723a:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 800723c:	4b4c      	ldr	r3, [pc, #304]	; (8007370 <send_DHCP_DISCOVER+0x16c>)
 800723e:	2200      	movs	r2, #0
 8007240:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 8007242:	2304      	movs	r3, #4
 8007244:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8007246:	4b4b      	ldr	r3, [pc, #300]	; (8007374 <send_DHCP_DISCOVER+0x170>)
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	88bb      	ldrh	r3, [r7, #4]
 800724c:	1c59      	adds	r1, r3, #1
 800724e:	80b9      	strh	r1, [r7, #4]
 8007250:	4413      	add	r3, r2
 8007252:	2235      	movs	r2, #53	; 0x35
 8007254:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8007258:	4b46      	ldr	r3, [pc, #280]	; (8007374 <send_DHCP_DISCOVER+0x170>)
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	88bb      	ldrh	r3, [r7, #4]
 800725e:	1c59      	adds	r1, r3, #1
 8007260:	80b9      	strh	r1, [r7, #4]
 8007262:	4413      	add	r3, r2
 8007264:	2201      	movs	r2, #1
 8007266:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 800726a:	4b42      	ldr	r3, [pc, #264]	; (8007374 <send_DHCP_DISCOVER+0x170>)
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	88bb      	ldrh	r3, [r7, #4]
 8007270:	1c59      	adds	r1, r3, #1
 8007272:	80b9      	strh	r1, [r7, #4]
 8007274:	4413      	add	r3, r2
 8007276:	2201      	movs	r2, #1
 8007278:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 800727c:	4b3d      	ldr	r3, [pc, #244]	; (8007374 <send_DHCP_DISCOVER+0x170>)
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	88bb      	ldrh	r3, [r7, #4]
 8007282:	1c59      	adds	r1, r3, #1
 8007284:	80b9      	strh	r1, [r7, #4]
 8007286:	4413      	add	r3, r2
 8007288:	223d      	movs	r2, #61	; 0x3d
 800728a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 800728e:	4b39      	ldr	r3, [pc, #228]	; (8007374 <send_DHCP_DISCOVER+0x170>)
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	88bb      	ldrh	r3, [r7, #4]
 8007294:	1c59      	adds	r1, r3, #1
 8007296:	80b9      	strh	r1, [r7, #4]
 8007298:	4413      	add	r3, r2
 800729a:	2207      	movs	r2, #7
 800729c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80072a0:	4b34      	ldr	r3, [pc, #208]	; (8007374 <send_DHCP_DISCOVER+0x170>)
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	88bb      	ldrh	r3, [r7, #4]
 80072a6:	1c59      	adds	r1, r3, #1
 80072a8:	80b9      	strh	r1, [r7, #4]
 80072aa:	4413      	add	r3, r2
 80072ac:	2201      	movs	r2, #1
 80072ae:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 80072b2:	4b30      	ldr	r3, [pc, #192]	; (8007374 <send_DHCP_DISCOVER+0x170>)
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	88bb      	ldrh	r3, [r7, #4]
 80072b8:	1c59      	adds	r1, r3, #1
 80072ba:	80b9      	strh	r1, [r7, #4]
 80072bc:	4618      	mov	r0, r3
 80072be:	4b2e      	ldr	r3, [pc, #184]	; (8007378 <send_DHCP_DISCOVER+0x174>)
 80072c0:	7819      	ldrb	r1, [r3, #0]
 80072c2:	1813      	adds	r3, r2, r0
 80072c4:	460a      	mov	r2, r1
 80072c6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 80072ca:	4b2a      	ldr	r3, [pc, #168]	; (8007374 <send_DHCP_DISCOVER+0x170>)
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	88bb      	ldrh	r3, [r7, #4]
 80072d0:	1c59      	adds	r1, r3, #1
 80072d2:	80b9      	strh	r1, [r7, #4]
 80072d4:	4618      	mov	r0, r3
 80072d6:	4b28      	ldr	r3, [pc, #160]	; (8007378 <send_DHCP_DISCOVER+0x174>)
 80072d8:	7859      	ldrb	r1, [r3, #1]
 80072da:	1813      	adds	r3, r2, r0
 80072dc:	460a      	mov	r2, r1
 80072de:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 80072e2:	4b24      	ldr	r3, [pc, #144]	; (8007374 <send_DHCP_DISCOVER+0x170>)
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	88bb      	ldrh	r3, [r7, #4]
 80072e8:	1c59      	adds	r1, r3, #1
 80072ea:	80b9      	strh	r1, [r7, #4]
 80072ec:	4618      	mov	r0, r3
 80072ee:	4b22      	ldr	r3, [pc, #136]	; (8007378 <send_DHCP_DISCOVER+0x174>)
 80072f0:	7899      	ldrb	r1, [r3, #2]
 80072f2:	1813      	adds	r3, r2, r0
 80072f4:	460a      	mov	r2, r1
 80072f6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 80072fa:	4b1e      	ldr	r3, [pc, #120]	; (8007374 <send_DHCP_DISCOVER+0x170>)
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	88bb      	ldrh	r3, [r7, #4]
 8007300:	1c59      	adds	r1, r3, #1
 8007302:	80b9      	strh	r1, [r7, #4]
 8007304:	4618      	mov	r0, r3
 8007306:	4b1c      	ldr	r3, [pc, #112]	; (8007378 <send_DHCP_DISCOVER+0x174>)
 8007308:	78d9      	ldrb	r1, [r3, #3]
 800730a:	1813      	adds	r3, r2, r0
 800730c:	460a      	mov	r2, r1
 800730e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8007312:	4b18      	ldr	r3, [pc, #96]	; (8007374 <send_DHCP_DISCOVER+0x170>)
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	88bb      	ldrh	r3, [r7, #4]
 8007318:	1c59      	adds	r1, r3, #1
 800731a:	80b9      	strh	r1, [r7, #4]
 800731c:	4618      	mov	r0, r3
 800731e:	4b16      	ldr	r3, [pc, #88]	; (8007378 <send_DHCP_DISCOVER+0x174>)
 8007320:	7919      	ldrb	r1, [r3, #4]
 8007322:	1813      	adds	r3, r2, r0
 8007324:	460a      	mov	r2, r1
 8007326:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 800732a:	4b12      	ldr	r3, [pc, #72]	; (8007374 <send_DHCP_DISCOVER+0x170>)
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	88bb      	ldrh	r3, [r7, #4]
 8007330:	1c59      	adds	r1, r3, #1
 8007332:	80b9      	strh	r1, [r7, #4]
 8007334:	4618      	mov	r0, r3
 8007336:	4b10      	ldr	r3, [pc, #64]	; (8007378 <send_DHCP_DISCOVER+0x174>)
 8007338:	7959      	ldrb	r1, [r3, #5]
 800733a:	1813      	adds	r3, r2, r0
 800733c:	460a      	mov	r2, r1
 800733e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8007342:	4b0c      	ldr	r3, [pc, #48]	; (8007374 <send_DHCP_DISCOVER+0x170>)
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	88bb      	ldrh	r3, [r7, #4]
 8007348:	1c59      	adds	r1, r3, #1
 800734a:	80b9      	strh	r1, [r7, #4]
 800734c:	4413      	add	r3, r2
 800734e:	220c      	movs	r2, #12
 8007350:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 8007354:	4b07      	ldr	r3, [pc, #28]	; (8007374 <send_DHCP_DISCOVER+0x170>)
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	88bb      	ldrh	r3, [r7, #4]
 800735a:	1c59      	adds	r1, r3, #1
 800735c:	80b9      	strh	r1, [r7, #4]
 800735e:	4413      	add	r3, r2
 8007360:	2200      	movs	r2, #0
 8007362:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8007366:	2300      	movs	r3, #0
 8007368:	80fb      	strh	r3, [r7, #6]
 800736a:	e017      	b.n	800739c <send_DHCP_DISCOVER+0x198>
 800736c:	20001a98 	.word	0x20001a98
 8007370:	20001a9c 	.word	0x20001a9c
 8007374:	20001ac0 	.word	0x20001ac0
 8007378:	20001ac4 	.word	0x20001ac4
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 800737c:	88f9      	ldrh	r1, [r7, #6]
 800737e:	4b82      	ldr	r3, [pc, #520]	; (8007588 <send_DHCP_DISCOVER+0x384>)
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	88bb      	ldrh	r3, [r7, #4]
 8007384:	1c58      	adds	r0, r3, #1
 8007386:	80b8      	strh	r0, [r7, #4]
 8007388:	4618      	mov	r0, r3
 800738a:	4b80      	ldr	r3, [pc, #512]	; (800758c <send_DHCP_DISCOVER+0x388>)
 800738c:	5c59      	ldrb	r1, [r3, r1]
 800738e:	1813      	adds	r3, r2, r0
 8007390:	460a      	mov	r2, r1
 8007392:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8007396:	88fb      	ldrh	r3, [r7, #6]
 8007398:	3301      	adds	r3, #1
 800739a:	80fb      	strh	r3, [r7, #6]
 800739c:	88fb      	ldrh	r3, [r7, #6]
 800739e:	4a7b      	ldr	r2, [pc, #492]	; (800758c <send_DHCP_DISCOVER+0x388>)
 80073a0:	5cd3      	ldrb	r3, [r2, r3]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d1ea      	bne.n	800737c <send_DHCP_DISCOVER+0x178>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 80073a6:	4b7a      	ldr	r3, [pc, #488]	; (8007590 <send_DHCP_DISCOVER+0x38c>)
 80073a8:	78db      	ldrb	r3, [r3, #3]
 80073aa:	091b      	lsrs	r3, r3, #4
 80073ac:	b2da      	uxtb	r2, r3
 80073ae:	4b76      	ldr	r3, [pc, #472]	; (8007588 <send_DHCP_DISCOVER+0x384>)
 80073b0:	681c      	ldr	r4, [r3, #0]
 80073b2:	88bb      	ldrh	r3, [r7, #4]
 80073b4:	1c59      	adds	r1, r3, #1
 80073b6:	80b9      	strh	r1, [r7, #4]
 80073b8:	461d      	mov	r5, r3
 80073ba:	4610      	mov	r0, r2
 80073bc:	f001 f9b0 	bl	8008720 <NibbleToHex>
 80073c0:	4603      	mov	r3, r0
 80073c2:	461a      	mov	r2, r3
 80073c4:	1963      	adds	r3, r4, r5
 80073c6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 80073ca:	4b71      	ldr	r3, [pc, #452]	; (8007590 <send_DHCP_DISCOVER+0x38c>)
 80073cc:	78da      	ldrb	r2, [r3, #3]
 80073ce:	4b6e      	ldr	r3, [pc, #440]	; (8007588 <send_DHCP_DISCOVER+0x384>)
 80073d0:	681c      	ldr	r4, [r3, #0]
 80073d2:	88bb      	ldrh	r3, [r7, #4]
 80073d4:	1c59      	adds	r1, r3, #1
 80073d6:	80b9      	strh	r1, [r7, #4]
 80073d8:	461d      	mov	r5, r3
 80073da:	4610      	mov	r0, r2
 80073dc:	f001 f9a0 	bl	8008720 <NibbleToHex>
 80073e0:	4603      	mov	r3, r0
 80073e2:	461a      	mov	r2, r3
 80073e4:	1963      	adds	r3, r4, r5
 80073e6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 80073ea:	4b69      	ldr	r3, [pc, #420]	; (8007590 <send_DHCP_DISCOVER+0x38c>)
 80073ec:	791b      	ldrb	r3, [r3, #4]
 80073ee:	091b      	lsrs	r3, r3, #4
 80073f0:	b2da      	uxtb	r2, r3
 80073f2:	4b65      	ldr	r3, [pc, #404]	; (8007588 <send_DHCP_DISCOVER+0x384>)
 80073f4:	681c      	ldr	r4, [r3, #0]
 80073f6:	88bb      	ldrh	r3, [r7, #4]
 80073f8:	1c59      	adds	r1, r3, #1
 80073fa:	80b9      	strh	r1, [r7, #4]
 80073fc:	461d      	mov	r5, r3
 80073fe:	4610      	mov	r0, r2
 8007400:	f001 f98e 	bl	8008720 <NibbleToHex>
 8007404:	4603      	mov	r3, r0
 8007406:	461a      	mov	r2, r3
 8007408:	1963      	adds	r3, r4, r5
 800740a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 800740e:	4b60      	ldr	r3, [pc, #384]	; (8007590 <send_DHCP_DISCOVER+0x38c>)
 8007410:	791a      	ldrb	r2, [r3, #4]
 8007412:	4b5d      	ldr	r3, [pc, #372]	; (8007588 <send_DHCP_DISCOVER+0x384>)
 8007414:	681c      	ldr	r4, [r3, #0]
 8007416:	88bb      	ldrh	r3, [r7, #4]
 8007418:	1c59      	adds	r1, r3, #1
 800741a:	80b9      	strh	r1, [r7, #4]
 800741c:	461d      	mov	r5, r3
 800741e:	4610      	mov	r0, r2
 8007420:	f001 f97e 	bl	8008720 <NibbleToHex>
 8007424:	4603      	mov	r3, r0
 8007426:	461a      	mov	r2, r3
 8007428:	1963      	adds	r3, r4, r5
 800742a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 800742e:	4b58      	ldr	r3, [pc, #352]	; (8007590 <send_DHCP_DISCOVER+0x38c>)
 8007430:	795b      	ldrb	r3, [r3, #5]
 8007432:	091b      	lsrs	r3, r3, #4
 8007434:	b2da      	uxtb	r2, r3
 8007436:	4b54      	ldr	r3, [pc, #336]	; (8007588 <send_DHCP_DISCOVER+0x384>)
 8007438:	681c      	ldr	r4, [r3, #0]
 800743a:	88bb      	ldrh	r3, [r7, #4]
 800743c:	1c59      	adds	r1, r3, #1
 800743e:	80b9      	strh	r1, [r7, #4]
 8007440:	461d      	mov	r5, r3
 8007442:	4610      	mov	r0, r2
 8007444:	f001 f96c 	bl	8008720 <NibbleToHex>
 8007448:	4603      	mov	r3, r0
 800744a:	461a      	mov	r2, r3
 800744c:	1963      	adds	r3, r4, r5
 800744e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8007452:	4b4f      	ldr	r3, [pc, #316]	; (8007590 <send_DHCP_DISCOVER+0x38c>)
 8007454:	795a      	ldrb	r2, [r3, #5]
 8007456:	4b4c      	ldr	r3, [pc, #304]	; (8007588 <send_DHCP_DISCOVER+0x384>)
 8007458:	681c      	ldr	r4, [r3, #0]
 800745a:	88bb      	ldrh	r3, [r7, #4]
 800745c:	1c59      	adds	r1, r3, #1
 800745e:	80b9      	strh	r1, [r7, #4]
 8007460:	461d      	mov	r5, r3
 8007462:	4610      	mov	r0, r2
 8007464:	f001 f95c 	bl	8008720 <NibbleToHex>
 8007468:	4603      	mov	r3, r0
 800746a:	461a      	mov	r2, r3
 800746c:	1963      	adds	r3, r4, r5
 800746e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8007472:	88fb      	ldrh	r3, [r7, #6]
 8007474:	b2d9      	uxtb	r1, r3
 8007476:	4b44      	ldr	r3, [pc, #272]	; (8007588 <send_DHCP_DISCOVER+0x384>)
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	88b8      	ldrh	r0, [r7, #4]
 800747c:	88fb      	ldrh	r3, [r7, #6]
 800747e:	3307      	adds	r3, #7
 8007480:	1ac3      	subs	r3, r0, r3
 8007482:	3106      	adds	r1, #6
 8007484:	b2c9      	uxtb	r1, r1
 8007486:	4413      	add	r3, r2
 8007488:	460a      	mov	r2, r1
 800748a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 800748e:	4b3e      	ldr	r3, [pc, #248]	; (8007588 <send_DHCP_DISCOVER+0x384>)
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	88bb      	ldrh	r3, [r7, #4]
 8007494:	1c59      	adds	r1, r3, #1
 8007496:	80b9      	strh	r1, [r7, #4]
 8007498:	4413      	add	r3, r2
 800749a:	2237      	movs	r2, #55	; 0x37
 800749c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 80074a0:	4b39      	ldr	r3, [pc, #228]	; (8007588 <send_DHCP_DISCOVER+0x384>)
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	88bb      	ldrh	r3, [r7, #4]
 80074a6:	1c59      	adds	r1, r3, #1
 80074a8:	80b9      	strh	r1, [r7, #4]
 80074aa:	4413      	add	r3, r2
 80074ac:	2206      	movs	r2, #6
 80074ae:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 80074b2:	4b35      	ldr	r3, [pc, #212]	; (8007588 <send_DHCP_DISCOVER+0x384>)
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	88bb      	ldrh	r3, [r7, #4]
 80074b8:	1c59      	adds	r1, r3, #1
 80074ba:	80b9      	strh	r1, [r7, #4]
 80074bc:	4413      	add	r3, r2
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 80074c4:	4b30      	ldr	r3, [pc, #192]	; (8007588 <send_DHCP_DISCOVER+0x384>)
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	88bb      	ldrh	r3, [r7, #4]
 80074ca:	1c59      	adds	r1, r3, #1
 80074cc:	80b9      	strh	r1, [r7, #4]
 80074ce:	4413      	add	r3, r2
 80074d0:	2203      	movs	r2, #3
 80074d2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 80074d6:	4b2c      	ldr	r3, [pc, #176]	; (8007588 <send_DHCP_DISCOVER+0x384>)
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	88bb      	ldrh	r3, [r7, #4]
 80074dc:	1c59      	adds	r1, r3, #1
 80074de:	80b9      	strh	r1, [r7, #4]
 80074e0:	4413      	add	r3, r2
 80074e2:	2206      	movs	r2, #6
 80074e4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 80074e8:	4b27      	ldr	r3, [pc, #156]	; (8007588 <send_DHCP_DISCOVER+0x384>)
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	88bb      	ldrh	r3, [r7, #4]
 80074ee:	1c59      	adds	r1, r3, #1
 80074f0:	80b9      	strh	r1, [r7, #4]
 80074f2:	4413      	add	r3, r2
 80074f4:	220f      	movs	r2, #15
 80074f6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 80074fa:	4b23      	ldr	r3, [pc, #140]	; (8007588 <send_DHCP_DISCOVER+0x384>)
 80074fc:	681a      	ldr	r2, [r3, #0]
 80074fe:	88bb      	ldrh	r3, [r7, #4]
 8007500:	1c59      	adds	r1, r3, #1
 8007502:	80b9      	strh	r1, [r7, #4]
 8007504:	4413      	add	r3, r2
 8007506:	223a      	movs	r2, #58	; 0x3a
 8007508:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 800750c:	4b1e      	ldr	r3, [pc, #120]	; (8007588 <send_DHCP_DISCOVER+0x384>)
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	88bb      	ldrh	r3, [r7, #4]
 8007512:	1c59      	adds	r1, r3, #1
 8007514:	80b9      	strh	r1, [r7, #4]
 8007516:	4413      	add	r3, r2
 8007518:	223b      	movs	r2, #59	; 0x3b
 800751a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 800751e:	4b1a      	ldr	r3, [pc, #104]	; (8007588 <send_DHCP_DISCOVER+0x384>)
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	88bb      	ldrh	r3, [r7, #4]
 8007524:	1c59      	adds	r1, r3, #1
 8007526:	80b9      	strh	r1, [r7, #4]
 8007528:	4413      	add	r3, r2
 800752a:	22ff      	movs	r2, #255	; 0xff
 800752c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8007530:	88bb      	ldrh	r3, [r7, #4]
 8007532:	80fb      	strh	r3, [r7, #6]
 8007534:	e009      	b.n	800754a <send_DHCP_DISCOVER+0x346>
 8007536:	4b14      	ldr	r3, [pc, #80]	; (8007588 <send_DHCP_DISCOVER+0x384>)
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	88fb      	ldrh	r3, [r7, #6]
 800753c:	4413      	add	r3, r2
 800753e:	2200      	movs	r2, #0
 8007540:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8007544:	88fb      	ldrh	r3, [r7, #6]
 8007546:	3301      	adds	r3, #1
 8007548:	80fb      	strh	r3, [r7, #6]
 800754a:	88fb      	ldrh	r3, [r7, #6]
 800754c:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8007550:	d3f1      	bcc.n	8007536 <send_DHCP_DISCOVER+0x332>

	// send broadcasting packet
	ip[0] = 255;
 8007552:	23ff      	movs	r3, #255	; 0xff
 8007554:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 8007556:	23ff      	movs	r3, #255	; 0xff
 8007558:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 800755a:	23ff      	movs	r3, #255	; 0xff
 800755c:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 800755e:	23ff      	movs	r3, #255	; 0xff
 8007560:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
 8007562:	480c      	ldr	r0, [pc, #48]	; (8007594 <send_DHCP_DISCOVER+0x390>)
 8007564:	f003 fb9c 	bl	800aca0 <puts>
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8007568:	4b0b      	ldr	r3, [pc, #44]	; (8007598 <send_DHCP_DISCOVER+0x394>)
 800756a:	7818      	ldrb	r0, [r3, #0]
 800756c:	4b06      	ldr	r3, [pc, #24]	; (8007588 <send_DHCP_DISCOVER+0x384>)
 800756e:	6819      	ldr	r1, [r3, #0]
 8007570:	463b      	mov	r3, r7
 8007572:	2243      	movs	r2, #67	; 0x43
 8007574:	9200      	str	r2, [sp, #0]
 8007576:	f44f 7209 	mov.w	r2, #548	; 0x224
 800757a:	f7fe fc7d 	bl	8005e78 <sendto>
}
 800757e:	bf00      	nop
 8007580:	3708      	adds	r7, #8
 8007582:	46bd      	mov	sp, r7
 8007584:	bdb0      	pop	{r4, r5, r7, pc}
 8007586:	bf00      	nop
 8007588:	20001ac0 	.word	0x20001ac0
 800758c:	200000a0 	.word	0x200000a0
 8007590:	20001ac4 	.word	0x20001ac4
 8007594:	0800c0e0 	.word	0x0800c0e0
 8007598:	20001a95 	.word	0x20001a95

0800759c <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 800759c:	b5b0      	push	{r4, r5, r7, lr}
 800759e:	b086      	sub	sp, #24
 80075a0:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 80075a2:	2300      	movs	r3, #0
 80075a4:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 80075a6:	f7ff fd37 	bl	8007018 <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 80075aa:	4b1b      	ldr	r3, [pc, #108]	; (8007618 <send_DHCP_REQUEST+0x7c>)
 80075ac:	f993 3000 	ldrsb.w	r3, [r3]
 80075b0:	2b03      	cmp	r3, #3
 80075b2:	d004      	beq.n	80075be <send_DHCP_REQUEST+0x22>
 80075b4:	4b18      	ldr	r3, [pc, #96]	; (8007618 <send_DHCP_REQUEST+0x7c>)
 80075b6:	f993 3000 	ldrsb.w	r3, [r3]
 80075ba:	2b04      	cmp	r3, #4
 80075bc:	d134      	bne.n	8007628 <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 80075be:	4b17      	ldr	r3, [pc, #92]	; (800761c <send_DHCP_REQUEST+0x80>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	330a      	adds	r3, #10
 80075c4:	2200      	movs	r2, #0
 80075c6:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 80075c8:	4b14      	ldr	r3, [pc, #80]	; (800761c <send_DHCP_REQUEST+0x80>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	330a      	adds	r3, #10
 80075ce:	3301      	adds	r3, #1
 80075d0:	2200      	movs	r2, #0
 80075d2:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 80075d4:	4b11      	ldr	r3, [pc, #68]	; (800761c <send_DHCP_REQUEST+0x80>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a11      	ldr	r2, [pc, #68]	; (8007620 <send_DHCP_REQUEST+0x84>)
 80075da:	7812      	ldrb	r2, [r2, #0]
 80075dc:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 80075de:	4b0f      	ldr	r3, [pc, #60]	; (800761c <send_DHCP_REQUEST+0x80>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a0f      	ldr	r2, [pc, #60]	; (8007620 <send_DHCP_REQUEST+0x84>)
 80075e4:	7852      	ldrb	r2, [r2, #1]
 80075e6:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 80075e8:	4b0c      	ldr	r3, [pc, #48]	; (800761c <send_DHCP_REQUEST+0x80>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a0c      	ldr	r2, [pc, #48]	; (8007620 <send_DHCP_REQUEST+0x84>)
 80075ee:	7892      	ldrb	r2, [r2, #2]
 80075f0:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 80075f2:	4b0a      	ldr	r3, [pc, #40]	; (800761c <send_DHCP_REQUEST+0x80>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a0a      	ldr	r2, [pc, #40]	; (8007620 <send_DHCP_REQUEST+0x84>)
 80075f8:	78d2      	ldrb	r2, [r2, #3]
 80075fa:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 80075fc:	4b09      	ldr	r3, [pc, #36]	; (8007624 <send_DHCP_REQUEST+0x88>)
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 8007602:	4b08      	ldr	r3, [pc, #32]	; (8007624 <send_DHCP_REQUEST+0x88>)
 8007604:	785b      	ldrb	r3, [r3, #1]
 8007606:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 8007608:	4b06      	ldr	r3, [pc, #24]	; (8007624 <send_DHCP_REQUEST+0x88>)
 800760a:	789b      	ldrb	r3, [r3, #2]
 800760c:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 800760e:	4b05      	ldr	r3, [pc, #20]	; (8007624 <send_DHCP_REQUEST+0x88>)
 8007610:	78db      	ldrb	r3, [r3, #3]
 8007612:	71fb      	strb	r3, [r7, #7]
 8007614:	e010      	b.n	8007638 <send_DHCP_REQUEST+0x9c>
 8007616:	bf00      	nop
 8007618:	20001ab4 	.word	0x20001ab4
 800761c:	20001ac0 	.word	0x20001ac0
 8007620:	20001aa4 	.word	0x20001aa4
 8007624:	20001a98 	.word	0x20001a98
   }
   else
   {
   	ip[0] = 255;
 8007628:	23ff      	movs	r3, #255	; 0xff
 800762a:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 800762c:	23ff      	movs	r3, #255	; 0xff
 800762e:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 8007630:	23ff      	movs	r3, #255	; 0xff
 8007632:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 8007634:	23ff      	movs	r3, #255	; 0xff
 8007636:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8007638:	2304      	movs	r3, #4
 800763a:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 800763c:	4b8d      	ldr	r3, [pc, #564]	; (8007874 <send_DHCP_REQUEST+0x2d8>)
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	897b      	ldrh	r3, [r7, #10]
 8007642:	1c59      	adds	r1, r3, #1
 8007644:	8179      	strh	r1, [r7, #10]
 8007646:	4413      	add	r3, r2
 8007648:	2235      	movs	r2, #53	; 0x35
 800764a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 800764e:	4b89      	ldr	r3, [pc, #548]	; (8007874 <send_DHCP_REQUEST+0x2d8>)
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	897b      	ldrh	r3, [r7, #10]
 8007654:	1c59      	adds	r1, r3, #1
 8007656:	8179      	strh	r1, [r7, #10]
 8007658:	4413      	add	r3, r2
 800765a:	2201      	movs	r2, #1
 800765c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 8007660:	4b84      	ldr	r3, [pc, #528]	; (8007874 <send_DHCP_REQUEST+0x2d8>)
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	897b      	ldrh	r3, [r7, #10]
 8007666:	1c59      	adds	r1, r3, #1
 8007668:	8179      	strh	r1, [r7, #10]
 800766a:	4413      	add	r3, r2
 800766c:	2203      	movs	r2, #3
 800766e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8007672:	4b80      	ldr	r3, [pc, #512]	; (8007874 <send_DHCP_REQUEST+0x2d8>)
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	897b      	ldrh	r3, [r7, #10]
 8007678:	1c59      	adds	r1, r3, #1
 800767a:	8179      	strh	r1, [r7, #10]
 800767c:	4413      	add	r3, r2
 800767e:	223d      	movs	r2, #61	; 0x3d
 8007680:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8007684:	4b7b      	ldr	r3, [pc, #492]	; (8007874 <send_DHCP_REQUEST+0x2d8>)
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	897b      	ldrh	r3, [r7, #10]
 800768a:	1c59      	adds	r1, r3, #1
 800768c:	8179      	strh	r1, [r7, #10]
 800768e:	4413      	add	r3, r2
 8007690:	2207      	movs	r2, #7
 8007692:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8007696:	4b77      	ldr	r3, [pc, #476]	; (8007874 <send_DHCP_REQUEST+0x2d8>)
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	897b      	ldrh	r3, [r7, #10]
 800769c:	1c59      	adds	r1, r3, #1
 800769e:	8179      	strh	r1, [r7, #10]
 80076a0:	4413      	add	r3, r2
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 80076a8:	4b72      	ldr	r3, [pc, #456]	; (8007874 <send_DHCP_REQUEST+0x2d8>)
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	897b      	ldrh	r3, [r7, #10]
 80076ae:	1c59      	adds	r1, r3, #1
 80076b0:	8179      	strh	r1, [r7, #10]
 80076b2:	4618      	mov	r0, r3
 80076b4:	4b70      	ldr	r3, [pc, #448]	; (8007878 <send_DHCP_REQUEST+0x2dc>)
 80076b6:	7819      	ldrb	r1, [r3, #0]
 80076b8:	1813      	adds	r3, r2, r0
 80076ba:	460a      	mov	r2, r1
 80076bc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 80076c0:	4b6c      	ldr	r3, [pc, #432]	; (8007874 <send_DHCP_REQUEST+0x2d8>)
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	897b      	ldrh	r3, [r7, #10]
 80076c6:	1c59      	adds	r1, r3, #1
 80076c8:	8179      	strh	r1, [r7, #10]
 80076ca:	4618      	mov	r0, r3
 80076cc:	4b6a      	ldr	r3, [pc, #424]	; (8007878 <send_DHCP_REQUEST+0x2dc>)
 80076ce:	7859      	ldrb	r1, [r3, #1]
 80076d0:	1813      	adds	r3, r2, r0
 80076d2:	460a      	mov	r2, r1
 80076d4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 80076d8:	4b66      	ldr	r3, [pc, #408]	; (8007874 <send_DHCP_REQUEST+0x2d8>)
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	897b      	ldrh	r3, [r7, #10]
 80076de:	1c59      	adds	r1, r3, #1
 80076e0:	8179      	strh	r1, [r7, #10]
 80076e2:	4618      	mov	r0, r3
 80076e4:	4b64      	ldr	r3, [pc, #400]	; (8007878 <send_DHCP_REQUEST+0x2dc>)
 80076e6:	7899      	ldrb	r1, [r3, #2]
 80076e8:	1813      	adds	r3, r2, r0
 80076ea:	460a      	mov	r2, r1
 80076ec:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 80076f0:	4b60      	ldr	r3, [pc, #384]	; (8007874 <send_DHCP_REQUEST+0x2d8>)
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	897b      	ldrh	r3, [r7, #10]
 80076f6:	1c59      	adds	r1, r3, #1
 80076f8:	8179      	strh	r1, [r7, #10]
 80076fa:	4618      	mov	r0, r3
 80076fc:	4b5e      	ldr	r3, [pc, #376]	; (8007878 <send_DHCP_REQUEST+0x2dc>)
 80076fe:	78d9      	ldrb	r1, [r3, #3]
 8007700:	1813      	adds	r3, r2, r0
 8007702:	460a      	mov	r2, r1
 8007704:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8007708:	4b5a      	ldr	r3, [pc, #360]	; (8007874 <send_DHCP_REQUEST+0x2d8>)
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	897b      	ldrh	r3, [r7, #10]
 800770e:	1c59      	adds	r1, r3, #1
 8007710:	8179      	strh	r1, [r7, #10]
 8007712:	4618      	mov	r0, r3
 8007714:	4b58      	ldr	r3, [pc, #352]	; (8007878 <send_DHCP_REQUEST+0x2dc>)
 8007716:	7919      	ldrb	r1, [r3, #4]
 8007718:	1813      	adds	r3, r2, r0
 800771a:	460a      	mov	r2, r1
 800771c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8007720:	4b54      	ldr	r3, [pc, #336]	; (8007874 <send_DHCP_REQUEST+0x2d8>)
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	897b      	ldrh	r3, [r7, #10]
 8007726:	1c59      	adds	r1, r3, #1
 8007728:	8179      	strh	r1, [r7, #10]
 800772a:	4618      	mov	r0, r3
 800772c:	4b52      	ldr	r3, [pc, #328]	; (8007878 <send_DHCP_REQUEST+0x2dc>)
 800772e:	7959      	ldrb	r1, [r3, #5]
 8007730:	1813      	adds	r3, r2, r0
 8007732:	460a      	mov	r2, r1
 8007734:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 8007738:	79fb      	ldrb	r3, [r7, #7]
 800773a:	2bff      	cmp	r3, #255	; 0xff
 800773c:	f040 8084 	bne.w	8007848 <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8007740:	4b4c      	ldr	r3, [pc, #304]	; (8007874 <send_DHCP_REQUEST+0x2d8>)
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	897b      	ldrh	r3, [r7, #10]
 8007746:	1c59      	adds	r1, r3, #1
 8007748:	8179      	strh	r1, [r7, #10]
 800774a:	4413      	add	r3, r2
 800774c:	2232      	movs	r2, #50	; 0x32
 800774e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 8007752:	4b48      	ldr	r3, [pc, #288]	; (8007874 <send_DHCP_REQUEST+0x2d8>)
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	897b      	ldrh	r3, [r7, #10]
 8007758:	1c59      	adds	r1, r3, #1
 800775a:	8179      	strh	r1, [r7, #10]
 800775c:	4413      	add	r3, r2
 800775e:	2204      	movs	r2, #4
 8007760:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8007764:	4b43      	ldr	r3, [pc, #268]	; (8007874 <send_DHCP_REQUEST+0x2d8>)
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	897b      	ldrh	r3, [r7, #10]
 800776a:	1c59      	adds	r1, r3, #1
 800776c:	8179      	strh	r1, [r7, #10]
 800776e:	4618      	mov	r0, r3
 8007770:	4b42      	ldr	r3, [pc, #264]	; (800787c <send_DHCP_REQUEST+0x2e0>)
 8007772:	7819      	ldrb	r1, [r3, #0]
 8007774:	1813      	adds	r3, r2, r0
 8007776:	460a      	mov	r2, r1
 8007778:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 800777c:	4b3d      	ldr	r3, [pc, #244]	; (8007874 <send_DHCP_REQUEST+0x2d8>)
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	897b      	ldrh	r3, [r7, #10]
 8007782:	1c59      	adds	r1, r3, #1
 8007784:	8179      	strh	r1, [r7, #10]
 8007786:	4618      	mov	r0, r3
 8007788:	4b3c      	ldr	r3, [pc, #240]	; (800787c <send_DHCP_REQUEST+0x2e0>)
 800778a:	7859      	ldrb	r1, [r3, #1]
 800778c:	1813      	adds	r3, r2, r0
 800778e:	460a      	mov	r2, r1
 8007790:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8007794:	4b37      	ldr	r3, [pc, #220]	; (8007874 <send_DHCP_REQUEST+0x2d8>)
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	897b      	ldrh	r3, [r7, #10]
 800779a:	1c59      	adds	r1, r3, #1
 800779c:	8179      	strh	r1, [r7, #10]
 800779e:	4618      	mov	r0, r3
 80077a0:	4b36      	ldr	r3, [pc, #216]	; (800787c <send_DHCP_REQUEST+0x2e0>)
 80077a2:	7899      	ldrb	r1, [r3, #2]
 80077a4:	1813      	adds	r3, r2, r0
 80077a6:	460a      	mov	r2, r1
 80077a8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 80077ac:	4b31      	ldr	r3, [pc, #196]	; (8007874 <send_DHCP_REQUEST+0x2d8>)
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	897b      	ldrh	r3, [r7, #10]
 80077b2:	1c59      	adds	r1, r3, #1
 80077b4:	8179      	strh	r1, [r7, #10]
 80077b6:	4618      	mov	r0, r3
 80077b8:	4b30      	ldr	r3, [pc, #192]	; (800787c <send_DHCP_REQUEST+0x2e0>)
 80077ba:	78d9      	ldrb	r1, [r3, #3]
 80077bc:	1813      	adds	r3, r2, r0
 80077be:	460a      	mov	r2, r1
 80077c0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 80077c4:	4b2b      	ldr	r3, [pc, #172]	; (8007874 <send_DHCP_REQUEST+0x2d8>)
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	897b      	ldrh	r3, [r7, #10]
 80077ca:	1c59      	adds	r1, r3, #1
 80077cc:	8179      	strh	r1, [r7, #10]
 80077ce:	4413      	add	r3, r2
 80077d0:	2236      	movs	r2, #54	; 0x36
 80077d2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 80077d6:	4b27      	ldr	r3, [pc, #156]	; (8007874 <send_DHCP_REQUEST+0x2d8>)
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	897b      	ldrh	r3, [r7, #10]
 80077dc:	1c59      	adds	r1, r3, #1
 80077de:	8179      	strh	r1, [r7, #10]
 80077e0:	4413      	add	r3, r2
 80077e2:	2204      	movs	r2, #4
 80077e4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 80077e8:	4b22      	ldr	r3, [pc, #136]	; (8007874 <send_DHCP_REQUEST+0x2d8>)
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	897b      	ldrh	r3, [r7, #10]
 80077ee:	1c59      	adds	r1, r3, #1
 80077f0:	8179      	strh	r1, [r7, #10]
 80077f2:	4618      	mov	r0, r3
 80077f4:	4b22      	ldr	r3, [pc, #136]	; (8007880 <send_DHCP_REQUEST+0x2e4>)
 80077f6:	7819      	ldrb	r1, [r3, #0]
 80077f8:	1813      	adds	r3, r2, r0
 80077fa:	460a      	mov	r2, r1
 80077fc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8007800:	4b1c      	ldr	r3, [pc, #112]	; (8007874 <send_DHCP_REQUEST+0x2d8>)
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	897b      	ldrh	r3, [r7, #10]
 8007806:	1c59      	adds	r1, r3, #1
 8007808:	8179      	strh	r1, [r7, #10]
 800780a:	4618      	mov	r0, r3
 800780c:	4b1c      	ldr	r3, [pc, #112]	; (8007880 <send_DHCP_REQUEST+0x2e4>)
 800780e:	7859      	ldrb	r1, [r3, #1]
 8007810:	1813      	adds	r3, r2, r0
 8007812:	460a      	mov	r2, r1
 8007814:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8007818:	4b16      	ldr	r3, [pc, #88]	; (8007874 <send_DHCP_REQUEST+0x2d8>)
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	897b      	ldrh	r3, [r7, #10]
 800781e:	1c59      	adds	r1, r3, #1
 8007820:	8179      	strh	r1, [r7, #10]
 8007822:	4618      	mov	r0, r3
 8007824:	4b16      	ldr	r3, [pc, #88]	; (8007880 <send_DHCP_REQUEST+0x2e4>)
 8007826:	7899      	ldrb	r1, [r3, #2]
 8007828:	1813      	adds	r3, r2, r0
 800782a:	460a      	mov	r2, r1
 800782c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8007830:	4b10      	ldr	r3, [pc, #64]	; (8007874 <send_DHCP_REQUEST+0x2d8>)
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	897b      	ldrh	r3, [r7, #10]
 8007836:	1c59      	adds	r1, r3, #1
 8007838:	8179      	strh	r1, [r7, #10]
 800783a:	4618      	mov	r0, r3
 800783c:	4b10      	ldr	r3, [pc, #64]	; (8007880 <send_DHCP_REQUEST+0x2e4>)
 800783e:	78d9      	ldrb	r1, [r3, #3]
 8007840:	1813      	adds	r3, r2, r0
 8007842:	460a      	mov	r2, r1
 8007844:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8007848:	4b0a      	ldr	r3, [pc, #40]	; (8007874 <send_DHCP_REQUEST+0x2d8>)
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	897b      	ldrh	r3, [r7, #10]
 800784e:	1c59      	adds	r1, r3, #1
 8007850:	8179      	strh	r1, [r7, #10]
 8007852:	4413      	add	r3, r2
 8007854:	220c      	movs	r2, #12
 8007856:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 800785a:	4b06      	ldr	r3, [pc, #24]	; (8007874 <send_DHCP_REQUEST+0x2d8>)
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	897b      	ldrh	r3, [r7, #10]
 8007860:	1c59      	adds	r1, r3, #1
 8007862:	8179      	strh	r1, [r7, #10]
 8007864:	4413      	add	r3, r2
 8007866:	2200      	movs	r2, #0
 8007868:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 800786c:	2300      	movs	r3, #0
 800786e:	60fb      	str	r3, [r7, #12]
 8007870:	e019      	b.n	80078a6 <send_DHCP_REQUEST+0x30a>
 8007872:	bf00      	nop
 8007874:	20001ac0 	.word	0x20001ac0
 8007878:	20001ac4 	.word	0x20001ac4
 800787c:	20001aa4 	.word	0x20001aa4
 8007880:	20001a98 	.word	0x20001a98
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8007884:	4b88      	ldr	r3, [pc, #544]	; (8007aa8 <send_DHCP_REQUEST+0x50c>)
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	897b      	ldrh	r3, [r7, #10]
 800788a:	1c59      	adds	r1, r3, #1
 800788c:	8179      	strh	r1, [r7, #10]
 800788e:	4618      	mov	r0, r3
 8007890:	4986      	ldr	r1, [pc, #536]	; (8007aac <send_DHCP_REQUEST+0x510>)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	440b      	add	r3, r1
 8007896:	7819      	ldrb	r1, [r3, #0]
 8007898:	1813      	adds	r3, r2, r0
 800789a:	460a      	mov	r2, r1
 800789c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	3301      	adds	r3, #1
 80078a4:	60fb      	str	r3, [r7, #12]
 80078a6:	4a81      	ldr	r2, [pc, #516]	; (8007aac <send_DHCP_REQUEST+0x510>)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	4413      	add	r3, r2
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d1e8      	bne.n	8007884 <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 80078b2:	4b7f      	ldr	r3, [pc, #508]	; (8007ab0 <send_DHCP_REQUEST+0x514>)
 80078b4:	78db      	ldrb	r3, [r3, #3]
 80078b6:	091b      	lsrs	r3, r3, #4
 80078b8:	b2da      	uxtb	r2, r3
 80078ba:	4b7b      	ldr	r3, [pc, #492]	; (8007aa8 <send_DHCP_REQUEST+0x50c>)
 80078bc:	681c      	ldr	r4, [r3, #0]
 80078be:	897b      	ldrh	r3, [r7, #10]
 80078c0:	1c59      	adds	r1, r3, #1
 80078c2:	8179      	strh	r1, [r7, #10]
 80078c4:	461d      	mov	r5, r3
 80078c6:	4610      	mov	r0, r2
 80078c8:	f000 ff2a 	bl	8008720 <NibbleToHex>
 80078cc:	4603      	mov	r3, r0
 80078ce:	461a      	mov	r2, r3
 80078d0:	1963      	adds	r3, r4, r5
 80078d2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 80078d6:	4b76      	ldr	r3, [pc, #472]	; (8007ab0 <send_DHCP_REQUEST+0x514>)
 80078d8:	78da      	ldrb	r2, [r3, #3]
 80078da:	4b73      	ldr	r3, [pc, #460]	; (8007aa8 <send_DHCP_REQUEST+0x50c>)
 80078dc:	681c      	ldr	r4, [r3, #0]
 80078de:	897b      	ldrh	r3, [r7, #10]
 80078e0:	1c59      	adds	r1, r3, #1
 80078e2:	8179      	strh	r1, [r7, #10]
 80078e4:	461d      	mov	r5, r3
 80078e6:	4610      	mov	r0, r2
 80078e8:	f000 ff1a 	bl	8008720 <NibbleToHex>
 80078ec:	4603      	mov	r3, r0
 80078ee:	461a      	mov	r2, r3
 80078f0:	1963      	adds	r3, r4, r5
 80078f2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 80078f6:	4b6e      	ldr	r3, [pc, #440]	; (8007ab0 <send_DHCP_REQUEST+0x514>)
 80078f8:	791b      	ldrb	r3, [r3, #4]
 80078fa:	091b      	lsrs	r3, r3, #4
 80078fc:	b2da      	uxtb	r2, r3
 80078fe:	4b6a      	ldr	r3, [pc, #424]	; (8007aa8 <send_DHCP_REQUEST+0x50c>)
 8007900:	681c      	ldr	r4, [r3, #0]
 8007902:	897b      	ldrh	r3, [r7, #10]
 8007904:	1c59      	adds	r1, r3, #1
 8007906:	8179      	strh	r1, [r7, #10]
 8007908:	461d      	mov	r5, r3
 800790a:	4610      	mov	r0, r2
 800790c:	f000 ff08 	bl	8008720 <NibbleToHex>
 8007910:	4603      	mov	r3, r0
 8007912:	461a      	mov	r2, r3
 8007914:	1963      	adds	r3, r4, r5
 8007916:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 800791a:	4b65      	ldr	r3, [pc, #404]	; (8007ab0 <send_DHCP_REQUEST+0x514>)
 800791c:	791a      	ldrb	r2, [r3, #4]
 800791e:	4b62      	ldr	r3, [pc, #392]	; (8007aa8 <send_DHCP_REQUEST+0x50c>)
 8007920:	681c      	ldr	r4, [r3, #0]
 8007922:	897b      	ldrh	r3, [r7, #10]
 8007924:	1c59      	adds	r1, r3, #1
 8007926:	8179      	strh	r1, [r7, #10]
 8007928:	461d      	mov	r5, r3
 800792a:	4610      	mov	r0, r2
 800792c:	f000 fef8 	bl	8008720 <NibbleToHex>
 8007930:	4603      	mov	r3, r0
 8007932:	461a      	mov	r2, r3
 8007934:	1963      	adds	r3, r4, r5
 8007936:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 800793a:	4b5d      	ldr	r3, [pc, #372]	; (8007ab0 <send_DHCP_REQUEST+0x514>)
 800793c:	795b      	ldrb	r3, [r3, #5]
 800793e:	091b      	lsrs	r3, r3, #4
 8007940:	b2da      	uxtb	r2, r3
 8007942:	4b59      	ldr	r3, [pc, #356]	; (8007aa8 <send_DHCP_REQUEST+0x50c>)
 8007944:	681c      	ldr	r4, [r3, #0]
 8007946:	897b      	ldrh	r3, [r7, #10]
 8007948:	1c59      	adds	r1, r3, #1
 800794a:	8179      	strh	r1, [r7, #10]
 800794c:	461d      	mov	r5, r3
 800794e:	4610      	mov	r0, r2
 8007950:	f000 fee6 	bl	8008720 <NibbleToHex>
 8007954:	4603      	mov	r3, r0
 8007956:	461a      	mov	r2, r3
 8007958:	1963      	adds	r3, r4, r5
 800795a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 800795e:	4b54      	ldr	r3, [pc, #336]	; (8007ab0 <send_DHCP_REQUEST+0x514>)
 8007960:	795a      	ldrb	r2, [r3, #5]
 8007962:	4b51      	ldr	r3, [pc, #324]	; (8007aa8 <send_DHCP_REQUEST+0x50c>)
 8007964:	681c      	ldr	r4, [r3, #0]
 8007966:	897b      	ldrh	r3, [r7, #10]
 8007968:	1c59      	adds	r1, r3, #1
 800796a:	8179      	strh	r1, [r7, #10]
 800796c:	461d      	mov	r5, r3
 800796e:	4610      	mov	r0, r2
 8007970:	f000 fed6 	bl	8008720 <NibbleToHex>
 8007974:	4603      	mov	r3, r0
 8007976:	461a      	mov	r2, r3
 8007978:	1963      	adds	r3, r4, r5
 800797a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	b2d9      	uxtb	r1, r3
 8007982:	4b49      	ldr	r3, [pc, #292]	; (8007aa8 <send_DHCP_REQUEST+0x50c>)
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	8978      	ldrh	r0, [r7, #10]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	3307      	adds	r3, #7
 800798c:	1ac3      	subs	r3, r0, r3
 800798e:	3106      	adds	r1, #6
 8007990:	b2c9      	uxtb	r1, r1
 8007992:	4413      	add	r3, r2
 8007994:	460a      	mov	r2, r1
 8007996:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 800799a:	4b43      	ldr	r3, [pc, #268]	; (8007aa8 <send_DHCP_REQUEST+0x50c>)
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	897b      	ldrh	r3, [r7, #10]
 80079a0:	1c59      	adds	r1, r3, #1
 80079a2:	8179      	strh	r1, [r7, #10]
 80079a4:	4413      	add	r3, r2
 80079a6:	2237      	movs	r2, #55	; 0x37
 80079a8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 80079ac:	4b3e      	ldr	r3, [pc, #248]	; (8007aa8 <send_DHCP_REQUEST+0x50c>)
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	897b      	ldrh	r3, [r7, #10]
 80079b2:	1c59      	adds	r1, r3, #1
 80079b4:	8179      	strh	r1, [r7, #10]
 80079b6:	4413      	add	r3, r2
 80079b8:	2208      	movs	r2, #8
 80079ba:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 80079be:	4b3a      	ldr	r3, [pc, #232]	; (8007aa8 <send_DHCP_REQUEST+0x50c>)
 80079c0:	681a      	ldr	r2, [r3, #0]
 80079c2:	897b      	ldrh	r3, [r7, #10]
 80079c4:	1c59      	adds	r1, r3, #1
 80079c6:	8179      	strh	r1, [r7, #10]
 80079c8:	4413      	add	r3, r2
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 80079d0:	4b35      	ldr	r3, [pc, #212]	; (8007aa8 <send_DHCP_REQUEST+0x50c>)
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	897b      	ldrh	r3, [r7, #10]
 80079d6:	1c59      	adds	r1, r3, #1
 80079d8:	8179      	strh	r1, [r7, #10]
 80079da:	4413      	add	r3, r2
 80079dc:	2203      	movs	r2, #3
 80079de:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 80079e2:	4b31      	ldr	r3, [pc, #196]	; (8007aa8 <send_DHCP_REQUEST+0x50c>)
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	897b      	ldrh	r3, [r7, #10]
 80079e8:	1c59      	adds	r1, r3, #1
 80079ea:	8179      	strh	r1, [r7, #10]
 80079ec:	4413      	add	r3, r2
 80079ee:	2206      	movs	r2, #6
 80079f0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 80079f4:	4b2c      	ldr	r3, [pc, #176]	; (8007aa8 <send_DHCP_REQUEST+0x50c>)
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	897b      	ldrh	r3, [r7, #10]
 80079fa:	1c59      	adds	r1, r3, #1
 80079fc:	8179      	strh	r1, [r7, #10]
 80079fe:	4413      	add	r3, r2
 8007a00:	220f      	movs	r2, #15
 8007a02:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8007a06:	4b28      	ldr	r3, [pc, #160]	; (8007aa8 <send_DHCP_REQUEST+0x50c>)
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	897b      	ldrh	r3, [r7, #10]
 8007a0c:	1c59      	adds	r1, r3, #1
 8007a0e:	8179      	strh	r1, [r7, #10]
 8007a10:	4413      	add	r3, r2
 8007a12:	223a      	movs	r2, #58	; 0x3a
 8007a14:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8007a18:	4b23      	ldr	r3, [pc, #140]	; (8007aa8 <send_DHCP_REQUEST+0x50c>)
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	897b      	ldrh	r3, [r7, #10]
 8007a1e:	1c59      	adds	r1, r3, #1
 8007a20:	8179      	strh	r1, [r7, #10]
 8007a22:	4413      	add	r3, r2
 8007a24:	223b      	movs	r2, #59	; 0x3b
 8007a26:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 8007a2a:	4b1f      	ldr	r3, [pc, #124]	; (8007aa8 <send_DHCP_REQUEST+0x50c>)
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	897b      	ldrh	r3, [r7, #10]
 8007a30:	1c59      	adds	r1, r3, #1
 8007a32:	8179      	strh	r1, [r7, #10]
 8007a34:	4413      	add	r3, r2
 8007a36:	221f      	movs	r2, #31
 8007a38:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 8007a3c:	4b1a      	ldr	r3, [pc, #104]	; (8007aa8 <send_DHCP_REQUEST+0x50c>)
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	897b      	ldrh	r3, [r7, #10]
 8007a42:	1c59      	adds	r1, r3, #1
 8007a44:	8179      	strh	r1, [r7, #10]
 8007a46:	4413      	add	r3, r2
 8007a48:	2221      	movs	r2, #33	; 0x21
 8007a4a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 8007a4e:	4b16      	ldr	r3, [pc, #88]	; (8007aa8 <send_DHCP_REQUEST+0x50c>)
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	897b      	ldrh	r3, [r7, #10]
 8007a54:	1c59      	adds	r1, r3, #1
 8007a56:	8179      	strh	r1, [r7, #10]
 8007a58:	4413      	add	r3, r2
 8007a5a:	22ff      	movs	r2, #255	; 0xff
 8007a5c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8007a60:	897b      	ldrh	r3, [r7, #10]
 8007a62:	60fb      	str	r3, [r7, #12]
 8007a64:	e009      	b.n	8007a7a <send_DHCP_REQUEST+0x4de>
 8007a66:	4b10      	ldr	r3, [pc, #64]	; (8007aa8 <send_DHCP_REQUEST+0x50c>)
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	33ec      	adds	r3, #236	; 0xec
 8007a70:	2200      	movs	r2, #0
 8007a72:	701a      	strb	r2, [r3, #0]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	3301      	adds	r3, #1
 8007a78:	60fb      	str	r3, [r7, #12]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8007a80:	dbf1      	blt.n	8007a66 <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
 8007a82:	480c      	ldr	r0, [pc, #48]	; (8007ab4 <send_DHCP_REQUEST+0x518>)
 8007a84:	f003 f90c 	bl	800aca0 <puts>
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8007a88:	4b0b      	ldr	r3, [pc, #44]	; (8007ab8 <send_DHCP_REQUEST+0x51c>)
 8007a8a:	7818      	ldrb	r0, [r3, #0]
 8007a8c:	4b06      	ldr	r3, [pc, #24]	; (8007aa8 <send_DHCP_REQUEST+0x50c>)
 8007a8e:	6819      	ldr	r1, [r3, #0]
 8007a90:	1d3b      	adds	r3, r7, #4
 8007a92:	2243      	movs	r2, #67	; 0x43
 8007a94:	9200      	str	r2, [sp, #0]
 8007a96:	f44f 7209 	mov.w	r2, #548	; 0x224
 8007a9a:	f7fe f9ed 	bl	8005e78 <sendto>

}
 8007a9e:	bf00      	nop
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bdb0      	pop	{r4, r5, r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	20001ac0 	.word	0x20001ac0
 8007aac:	200000a0 	.word	0x200000a0
 8007ab0:	20001ac4 	.word	0x20001ac4
 8007ab4:	0800c0f8 	.word	0x0800c0f8
 8007ab8:	20001a95 	.word	0x20001a95

08007abc <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b086      	sub	sp, #24
 8007ac0:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 8007ac6:	f7ff faa7 	bl	8007018 <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8007aca:	2304      	movs	r3, #4
 8007acc:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8007ace:	4ba0      	ldr	r3, [pc, #640]	; (8007d50 <send_DHCP_DECLINE+0x294>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	330a      	adds	r3, #10
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8007ad8:	4b9d      	ldr	r3, [pc, #628]	; (8007d50 <send_DHCP_DECLINE+0x294>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	330a      	adds	r3, #10
 8007ade:	3301      	adds	r3, #1
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8007ae4:	4b9a      	ldr	r3, [pc, #616]	; (8007d50 <send_DHCP_DECLINE+0x294>)
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	897b      	ldrh	r3, [r7, #10]
 8007aea:	1c59      	adds	r1, r3, #1
 8007aec:	8179      	strh	r1, [r7, #10]
 8007aee:	4413      	add	r3, r2
 8007af0:	2235      	movs	r2, #53	; 0x35
 8007af2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8007af6:	4b96      	ldr	r3, [pc, #600]	; (8007d50 <send_DHCP_DECLINE+0x294>)
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	897b      	ldrh	r3, [r7, #10]
 8007afc:	1c59      	adds	r1, r3, #1
 8007afe:	8179      	strh	r1, [r7, #10]
 8007b00:	4413      	add	r3, r2
 8007b02:	2201      	movs	r2, #1
 8007b04:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 8007b08:	4b91      	ldr	r3, [pc, #580]	; (8007d50 <send_DHCP_DECLINE+0x294>)
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	897b      	ldrh	r3, [r7, #10]
 8007b0e:	1c59      	adds	r1, r3, #1
 8007b10:	8179      	strh	r1, [r7, #10]
 8007b12:	4413      	add	r3, r2
 8007b14:	2204      	movs	r2, #4
 8007b16:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8007b1a:	4b8d      	ldr	r3, [pc, #564]	; (8007d50 <send_DHCP_DECLINE+0x294>)
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	897b      	ldrh	r3, [r7, #10]
 8007b20:	1c59      	adds	r1, r3, #1
 8007b22:	8179      	strh	r1, [r7, #10]
 8007b24:	4413      	add	r3, r2
 8007b26:	223d      	movs	r2, #61	; 0x3d
 8007b28:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8007b2c:	4b88      	ldr	r3, [pc, #544]	; (8007d50 <send_DHCP_DECLINE+0x294>)
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	897b      	ldrh	r3, [r7, #10]
 8007b32:	1c59      	adds	r1, r3, #1
 8007b34:	8179      	strh	r1, [r7, #10]
 8007b36:	4413      	add	r3, r2
 8007b38:	2207      	movs	r2, #7
 8007b3a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8007b3e:	4b84      	ldr	r3, [pc, #528]	; (8007d50 <send_DHCP_DECLINE+0x294>)
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	897b      	ldrh	r3, [r7, #10]
 8007b44:	1c59      	adds	r1, r3, #1
 8007b46:	8179      	strh	r1, [r7, #10]
 8007b48:	4413      	add	r3, r2
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8007b50:	4b7f      	ldr	r3, [pc, #508]	; (8007d50 <send_DHCP_DECLINE+0x294>)
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	897b      	ldrh	r3, [r7, #10]
 8007b56:	1c59      	adds	r1, r3, #1
 8007b58:	8179      	strh	r1, [r7, #10]
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	4b7d      	ldr	r3, [pc, #500]	; (8007d54 <send_DHCP_DECLINE+0x298>)
 8007b5e:	7819      	ldrb	r1, [r3, #0]
 8007b60:	1813      	adds	r3, r2, r0
 8007b62:	460a      	mov	r2, r1
 8007b64:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8007b68:	4b79      	ldr	r3, [pc, #484]	; (8007d50 <send_DHCP_DECLINE+0x294>)
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	897b      	ldrh	r3, [r7, #10]
 8007b6e:	1c59      	adds	r1, r3, #1
 8007b70:	8179      	strh	r1, [r7, #10]
 8007b72:	4618      	mov	r0, r3
 8007b74:	4b77      	ldr	r3, [pc, #476]	; (8007d54 <send_DHCP_DECLINE+0x298>)
 8007b76:	7859      	ldrb	r1, [r3, #1]
 8007b78:	1813      	adds	r3, r2, r0
 8007b7a:	460a      	mov	r2, r1
 8007b7c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8007b80:	4b73      	ldr	r3, [pc, #460]	; (8007d50 <send_DHCP_DECLINE+0x294>)
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	897b      	ldrh	r3, [r7, #10]
 8007b86:	1c59      	adds	r1, r3, #1
 8007b88:	8179      	strh	r1, [r7, #10]
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	4b71      	ldr	r3, [pc, #452]	; (8007d54 <send_DHCP_DECLINE+0x298>)
 8007b8e:	7899      	ldrb	r1, [r3, #2]
 8007b90:	1813      	adds	r3, r2, r0
 8007b92:	460a      	mov	r2, r1
 8007b94:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8007b98:	4b6d      	ldr	r3, [pc, #436]	; (8007d50 <send_DHCP_DECLINE+0x294>)
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	897b      	ldrh	r3, [r7, #10]
 8007b9e:	1c59      	adds	r1, r3, #1
 8007ba0:	8179      	strh	r1, [r7, #10]
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	4b6b      	ldr	r3, [pc, #428]	; (8007d54 <send_DHCP_DECLINE+0x298>)
 8007ba6:	78d9      	ldrb	r1, [r3, #3]
 8007ba8:	1813      	adds	r3, r2, r0
 8007baa:	460a      	mov	r2, r1
 8007bac:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8007bb0:	4b67      	ldr	r3, [pc, #412]	; (8007d50 <send_DHCP_DECLINE+0x294>)
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	897b      	ldrh	r3, [r7, #10]
 8007bb6:	1c59      	adds	r1, r3, #1
 8007bb8:	8179      	strh	r1, [r7, #10]
 8007bba:	4618      	mov	r0, r3
 8007bbc:	4b65      	ldr	r3, [pc, #404]	; (8007d54 <send_DHCP_DECLINE+0x298>)
 8007bbe:	7919      	ldrb	r1, [r3, #4]
 8007bc0:	1813      	adds	r3, r2, r0
 8007bc2:	460a      	mov	r2, r1
 8007bc4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8007bc8:	4b61      	ldr	r3, [pc, #388]	; (8007d50 <send_DHCP_DECLINE+0x294>)
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	897b      	ldrh	r3, [r7, #10]
 8007bce:	1c59      	adds	r1, r3, #1
 8007bd0:	8179      	strh	r1, [r7, #10]
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	4b5f      	ldr	r3, [pc, #380]	; (8007d54 <send_DHCP_DECLINE+0x298>)
 8007bd6:	7959      	ldrb	r1, [r3, #5]
 8007bd8:	1813      	adds	r3, r2, r0
 8007bda:	460a      	mov	r2, r1
 8007bdc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8007be0:	4b5b      	ldr	r3, [pc, #364]	; (8007d50 <send_DHCP_DECLINE+0x294>)
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	897b      	ldrh	r3, [r7, #10]
 8007be6:	1c59      	adds	r1, r3, #1
 8007be8:	8179      	strh	r1, [r7, #10]
 8007bea:	4413      	add	r3, r2
 8007bec:	2232      	movs	r2, #50	; 0x32
 8007bee:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8007bf2:	4b57      	ldr	r3, [pc, #348]	; (8007d50 <send_DHCP_DECLINE+0x294>)
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	897b      	ldrh	r3, [r7, #10]
 8007bf8:	1c59      	adds	r1, r3, #1
 8007bfa:	8179      	strh	r1, [r7, #10]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	2204      	movs	r2, #4
 8007c00:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8007c04:	4b52      	ldr	r3, [pc, #328]	; (8007d50 <send_DHCP_DECLINE+0x294>)
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	897b      	ldrh	r3, [r7, #10]
 8007c0a:	1c59      	adds	r1, r3, #1
 8007c0c:	8179      	strh	r1, [r7, #10]
 8007c0e:	4618      	mov	r0, r3
 8007c10:	4b51      	ldr	r3, [pc, #324]	; (8007d58 <send_DHCP_DECLINE+0x29c>)
 8007c12:	7819      	ldrb	r1, [r3, #0]
 8007c14:	1813      	adds	r3, r2, r0
 8007c16:	460a      	mov	r2, r1
 8007c18:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8007c1c:	4b4c      	ldr	r3, [pc, #304]	; (8007d50 <send_DHCP_DECLINE+0x294>)
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	897b      	ldrh	r3, [r7, #10]
 8007c22:	1c59      	adds	r1, r3, #1
 8007c24:	8179      	strh	r1, [r7, #10]
 8007c26:	4618      	mov	r0, r3
 8007c28:	4b4b      	ldr	r3, [pc, #300]	; (8007d58 <send_DHCP_DECLINE+0x29c>)
 8007c2a:	7859      	ldrb	r1, [r3, #1]
 8007c2c:	1813      	adds	r3, r2, r0
 8007c2e:	460a      	mov	r2, r1
 8007c30:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8007c34:	4b46      	ldr	r3, [pc, #280]	; (8007d50 <send_DHCP_DECLINE+0x294>)
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	897b      	ldrh	r3, [r7, #10]
 8007c3a:	1c59      	adds	r1, r3, #1
 8007c3c:	8179      	strh	r1, [r7, #10]
 8007c3e:	4618      	mov	r0, r3
 8007c40:	4b45      	ldr	r3, [pc, #276]	; (8007d58 <send_DHCP_DECLINE+0x29c>)
 8007c42:	7899      	ldrb	r1, [r3, #2]
 8007c44:	1813      	adds	r3, r2, r0
 8007c46:	460a      	mov	r2, r1
 8007c48:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8007c4c:	4b40      	ldr	r3, [pc, #256]	; (8007d50 <send_DHCP_DECLINE+0x294>)
 8007c4e:	681a      	ldr	r2, [r3, #0]
 8007c50:	897b      	ldrh	r3, [r7, #10]
 8007c52:	1c59      	adds	r1, r3, #1
 8007c54:	8179      	strh	r1, [r7, #10]
 8007c56:	4618      	mov	r0, r3
 8007c58:	4b3f      	ldr	r3, [pc, #252]	; (8007d58 <send_DHCP_DECLINE+0x29c>)
 8007c5a:	78d9      	ldrb	r1, [r3, #3]
 8007c5c:	1813      	adds	r3, r2, r0
 8007c5e:	460a      	mov	r2, r1
 8007c60:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8007c64:	4b3a      	ldr	r3, [pc, #232]	; (8007d50 <send_DHCP_DECLINE+0x294>)
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	897b      	ldrh	r3, [r7, #10]
 8007c6a:	1c59      	adds	r1, r3, #1
 8007c6c:	8179      	strh	r1, [r7, #10]
 8007c6e:	4413      	add	r3, r2
 8007c70:	2236      	movs	r2, #54	; 0x36
 8007c72:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8007c76:	4b36      	ldr	r3, [pc, #216]	; (8007d50 <send_DHCP_DECLINE+0x294>)
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	897b      	ldrh	r3, [r7, #10]
 8007c7c:	1c59      	adds	r1, r3, #1
 8007c7e:	8179      	strh	r1, [r7, #10]
 8007c80:	4413      	add	r3, r2
 8007c82:	2204      	movs	r2, #4
 8007c84:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8007c88:	4b31      	ldr	r3, [pc, #196]	; (8007d50 <send_DHCP_DECLINE+0x294>)
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	897b      	ldrh	r3, [r7, #10]
 8007c8e:	1c59      	adds	r1, r3, #1
 8007c90:	8179      	strh	r1, [r7, #10]
 8007c92:	4618      	mov	r0, r3
 8007c94:	4b31      	ldr	r3, [pc, #196]	; (8007d5c <send_DHCP_DECLINE+0x2a0>)
 8007c96:	7819      	ldrb	r1, [r3, #0]
 8007c98:	1813      	adds	r3, r2, r0
 8007c9a:	460a      	mov	r2, r1
 8007c9c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8007ca0:	4b2b      	ldr	r3, [pc, #172]	; (8007d50 <send_DHCP_DECLINE+0x294>)
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	897b      	ldrh	r3, [r7, #10]
 8007ca6:	1c59      	adds	r1, r3, #1
 8007ca8:	8179      	strh	r1, [r7, #10]
 8007caa:	4618      	mov	r0, r3
 8007cac:	4b2b      	ldr	r3, [pc, #172]	; (8007d5c <send_DHCP_DECLINE+0x2a0>)
 8007cae:	7859      	ldrb	r1, [r3, #1]
 8007cb0:	1813      	adds	r3, r2, r0
 8007cb2:	460a      	mov	r2, r1
 8007cb4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8007cb8:	4b25      	ldr	r3, [pc, #148]	; (8007d50 <send_DHCP_DECLINE+0x294>)
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	897b      	ldrh	r3, [r7, #10]
 8007cbe:	1c59      	adds	r1, r3, #1
 8007cc0:	8179      	strh	r1, [r7, #10]
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	4b25      	ldr	r3, [pc, #148]	; (8007d5c <send_DHCP_DECLINE+0x2a0>)
 8007cc6:	7899      	ldrb	r1, [r3, #2]
 8007cc8:	1813      	adds	r3, r2, r0
 8007cca:	460a      	mov	r2, r1
 8007ccc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8007cd0:	4b1f      	ldr	r3, [pc, #124]	; (8007d50 <send_DHCP_DECLINE+0x294>)
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	897b      	ldrh	r3, [r7, #10]
 8007cd6:	1c59      	adds	r1, r3, #1
 8007cd8:	8179      	strh	r1, [r7, #10]
 8007cda:	4618      	mov	r0, r3
 8007cdc:	4b1f      	ldr	r3, [pc, #124]	; (8007d5c <send_DHCP_DECLINE+0x2a0>)
 8007cde:	78d9      	ldrb	r1, [r3, #3]
 8007ce0:	1813      	adds	r3, r2, r0
 8007ce2:	460a      	mov	r2, r1
 8007ce4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = endOption;
 8007ce8:	4b19      	ldr	r3, [pc, #100]	; (8007d50 <send_DHCP_DECLINE+0x294>)
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	897b      	ldrh	r3, [r7, #10]
 8007cee:	1c59      	adds	r1, r3, #1
 8007cf0:	8179      	strh	r1, [r7, #10]
 8007cf2:	4413      	add	r3, r2
 8007cf4:	22ff      	movs	r2, #255	; 0xff
 8007cf6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8007cfa:	897b      	ldrh	r3, [r7, #10]
 8007cfc:	60fb      	str	r3, [r7, #12]
 8007cfe:	e009      	b.n	8007d14 <send_DHCP_DECLINE+0x258>
 8007d00:	4b13      	ldr	r3, [pc, #76]	; (8007d50 <send_DHCP_DECLINE+0x294>)
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	4413      	add	r3, r2
 8007d08:	33ec      	adds	r3, #236	; 0xec
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	701a      	strb	r2, [r3, #0]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	3301      	adds	r3, #1
 8007d12:	60fb      	str	r3, [r7, #12]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8007d1a:	dbf1      	blt.n	8007d00 <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 8007d1c:	23ff      	movs	r3, #255	; 0xff
 8007d1e:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 8007d20:	23ff      	movs	r3, #255	; 0xff
 8007d22:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 8007d24:	23ff      	movs	r3, #255	; 0xff
 8007d26:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 8007d28:	23ff      	movs	r3, #255	; 0xff
 8007d2a:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
 8007d2c:	480c      	ldr	r0, [pc, #48]	; (8007d60 <send_DHCP_DECLINE+0x2a4>)
 8007d2e:	f002 ffb7 	bl	800aca0 <puts>
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8007d32:	4b0c      	ldr	r3, [pc, #48]	; (8007d64 <send_DHCP_DECLINE+0x2a8>)
 8007d34:	7818      	ldrb	r0, [r3, #0]
 8007d36:	4b06      	ldr	r3, [pc, #24]	; (8007d50 <send_DHCP_DECLINE+0x294>)
 8007d38:	6819      	ldr	r1, [r3, #0]
 8007d3a:	1d3b      	adds	r3, r7, #4
 8007d3c:	2243      	movs	r2, #67	; 0x43
 8007d3e:	9200      	str	r2, [sp, #0]
 8007d40:	f44f 7209 	mov.w	r2, #548	; 0x224
 8007d44:	f7fe f898 	bl	8005e78 <sendto>
}
 8007d48:	bf00      	nop
 8007d4a:	3710      	adds	r7, #16
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}
 8007d50:	20001ac0 	.word	0x20001ac0
 8007d54:	20001ac4 	.word	0x20001ac4
 8007d58:	20001aa4 	.word	0x20001aa4
 8007d5c:	20001a98 	.word	0x20001a98
 8007d60:	0800c110 	.word	0x0800c110
 8007d64:	20001a95 	.word	0x20001a95

08007d68 <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 8007d68:	b5b0      	push	{r4, r5, r7, lr}
 8007d6a:	b08a      	sub	sp, #40	; 0x28
 8007d6c:	af04      	add	r7, sp, #16
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 8007d72:	4b9e      	ldr	r3, [pc, #632]	; (8007fec <parseDHCPMSG+0x284>)
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7fd faad 	bl	80052d6 <getSn_RX_RSR>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	823b      	strh	r3, [r7, #16]
 8007d80:	8a3b      	ldrh	r3, [r7, #16]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d025      	beq.n	8007dd2 <parseDHCPMSG+0x6a>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 8007d86:	4b99      	ldr	r3, [pc, #612]	; (8007fec <parseDHCPMSG+0x284>)
 8007d88:	7818      	ldrb	r0, [r3, #0]
 8007d8a:	4b99      	ldr	r3, [pc, #612]	; (8007ff0 <parseDHCPMSG+0x288>)
 8007d8c:	6819      	ldr	r1, [r3, #0]
 8007d8e:	1d3c      	adds	r4, r7, #4
 8007d90:	8a3a      	ldrh	r2, [r7, #16]
 8007d92:	1cbb      	adds	r3, r7, #2
 8007d94:	9300      	str	r3, [sp, #0]
 8007d96:	4623      	mov	r3, r4
 8007d98:	f7fe f9a4 	bl	80060e4 <recvfrom>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	823b      	strh	r3, [r7, #16]
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
 8007da0:	793b      	ldrb	r3, [r7, #4]
 8007da2:	4618      	mov	r0, r3
 8007da4:	797b      	ldrb	r3, [r7, #5]
 8007da6:	461c      	mov	r4, r3
 8007da8:	79bb      	ldrb	r3, [r7, #6]
 8007daa:	461d      	mov	r5, r3
 8007dac:	79fb      	ldrb	r3, [r7, #7]
 8007dae:	461a      	mov	r2, r3
 8007db0:	887b      	ldrh	r3, [r7, #2]
 8007db2:	4619      	mov	r1, r3
 8007db4:	8a3b      	ldrh	r3, [r7, #16]
 8007db6:	9302      	str	r3, [sp, #8]
 8007db8:	9101      	str	r1, [sp, #4]
 8007dba:	9200      	str	r2, [sp, #0]
 8007dbc:	462b      	mov	r3, r5
 8007dbe:	4622      	mov	r2, r4
 8007dc0:	4601      	mov	r1, r0
 8007dc2:	488c      	ldr	r0, [pc, #560]	; (8007ff4 <parseDHCPMSG+0x28c>)
 8007dc4:	f002 fee6 	bl	800ab94 <iprintf>
   #endif   
   }
   else return 0;
	if (svr_port == DHCP_SERVER_PORT) {
 8007dc8:	887b      	ldrh	r3, [r7, #2]
 8007dca:	2b43      	cmp	r3, #67	; 0x43
 8007dcc:	f040 81f9 	bne.w	80081c2 <parseDHCPMSG+0x45a>
 8007dd0:	e001      	b.n	8007dd6 <parseDHCPMSG+0x6e>
   else return 0;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	e1f7      	b.n	80081c6 <parseDHCPMSG+0x45e>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8007dd6:	4b86      	ldr	r3, [pc, #536]	; (8007ff0 <parseDHCPMSG+0x288>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	7f1a      	ldrb	r2, [r3, #28]
 8007ddc:	4b86      	ldr	r3, [pc, #536]	; (8007ff8 <parseDHCPMSG+0x290>)
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d124      	bne.n	8007e2e <parseDHCPMSG+0xc6>
 8007de4:	4b82      	ldr	r3, [pc, #520]	; (8007ff0 <parseDHCPMSG+0x288>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	7f5a      	ldrb	r2, [r3, #29]
 8007dea:	4b83      	ldr	r3, [pc, #524]	; (8007ff8 <parseDHCPMSG+0x290>)
 8007dec:	785b      	ldrb	r3, [r3, #1]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d11d      	bne.n	8007e2e <parseDHCPMSG+0xc6>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8007df2:	4b7f      	ldr	r3, [pc, #508]	; (8007ff0 <parseDHCPMSG+0x288>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	7f9a      	ldrb	r2, [r3, #30]
 8007df8:	4b7f      	ldr	r3, [pc, #508]	; (8007ff8 <parseDHCPMSG+0x290>)
 8007dfa:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d116      	bne.n	8007e2e <parseDHCPMSG+0xc6>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8007e00:	4b7b      	ldr	r3, [pc, #492]	; (8007ff0 <parseDHCPMSG+0x288>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	7fda      	ldrb	r2, [r3, #31]
 8007e06:	4b7c      	ldr	r3, [pc, #496]	; (8007ff8 <parseDHCPMSG+0x290>)
 8007e08:	78db      	ldrb	r3, [r3, #3]
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d10f      	bne.n	8007e2e <parseDHCPMSG+0xc6>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8007e0e:	4b78      	ldr	r3, [pc, #480]	; (8007ff0 <parseDHCPMSG+0x288>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f893 2020 	ldrb.w	r2, [r3, #32]
 8007e16:	4b78      	ldr	r3, [pc, #480]	; (8007ff8 <parseDHCPMSG+0x290>)
 8007e18:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d107      	bne.n	8007e2e <parseDHCPMSG+0xc6>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8007e1e:	4b74      	ldr	r3, [pc, #464]	; (8007ff0 <parseDHCPMSG+0x288>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8007e26:	4b74      	ldr	r3, [pc, #464]	; (8007ff8 <parseDHCPMSG+0x290>)
 8007e28:	795b      	ldrb	r3, [r3, #5]
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d004      	beq.n	8007e38 <parseDHCPMSG+0xd0>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
 8007e2e:	4873      	ldr	r0, [pc, #460]	; (8007ffc <parseDHCPMSG+0x294>)
 8007e30:	f002 ff36 	bl	800aca0 <puts>
#endif
         return 0;
 8007e34:	2300      	movs	r3, #0
 8007e36:	e1c6      	b.n	80081c6 <parseDHCPMSG+0x45e>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 8007e38:	4b71      	ldr	r3, [pc, #452]	; (8008000 <parseDHCPMSG+0x298>)
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d10b      	bne.n	8007e58 <parseDHCPMSG+0xf0>
 8007e40:	4b6f      	ldr	r3, [pc, #444]	; (8008000 <parseDHCPMSG+0x298>)
 8007e42:	785b      	ldrb	r3, [r3, #1]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d107      	bne.n	8007e58 <parseDHCPMSG+0xf0>
 8007e48:	4b6d      	ldr	r3, [pc, #436]	; (8008000 <parseDHCPMSG+0x298>)
 8007e4a:	789b      	ldrb	r3, [r3, #2]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d103      	bne.n	8007e58 <parseDHCPMSG+0xf0>
 8007e50:	4b6b      	ldr	r3, [pc, #428]	; (8008000 <parseDHCPMSG+0x298>)
 8007e52:	78db      	ldrb	r3, [r3, #3]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d02c      	beq.n	8007eb2 <parseDHCPMSG+0x14a>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8007e58:	793a      	ldrb	r2, [r7, #4]
 8007e5a:	4b69      	ldr	r3, [pc, #420]	; (8008000 <parseDHCPMSG+0x298>)
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d10e      	bne.n	8007e80 <parseDHCPMSG+0x118>
 8007e62:	797a      	ldrb	r2, [r7, #5]
 8007e64:	4b66      	ldr	r3, [pc, #408]	; (8008000 <parseDHCPMSG+0x298>)
 8007e66:	785b      	ldrb	r3, [r3, #1]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d109      	bne.n	8007e80 <parseDHCPMSG+0x118>
 8007e6c:	79ba      	ldrb	r2, [r7, #6]
 8007e6e:	4b64      	ldr	r3, [pc, #400]	; (8008000 <parseDHCPMSG+0x298>)
 8007e70:	789b      	ldrb	r3, [r3, #2]
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d104      	bne.n	8007e80 <parseDHCPMSG+0x118>
 8007e76:	79fa      	ldrb	r2, [r7, #7]
 8007e78:	4b61      	ldr	r3, [pc, #388]	; (8008000 <parseDHCPMSG+0x298>)
 8007e7a:	78db      	ldrb	r3, [r3, #3]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d018      	beq.n	8007eb2 <parseDHCPMSG+0x14a>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8007e80:	793a      	ldrb	r2, [r7, #4]
 8007e82:	4b60      	ldr	r3, [pc, #384]	; (8008004 <parseDHCPMSG+0x29c>)
 8007e84:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d10e      	bne.n	8007ea8 <parseDHCPMSG+0x140>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8007e8a:	797a      	ldrb	r2, [r7, #5]
 8007e8c:	4b5d      	ldr	r3, [pc, #372]	; (8008004 <parseDHCPMSG+0x29c>)
 8007e8e:	785b      	ldrb	r3, [r3, #1]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d109      	bne.n	8007ea8 <parseDHCPMSG+0x140>
 8007e94:	79ba      	ldrb	r2, [r7, #6]
 8007e96:	4b5b      	ldr	r3, [pc, #364]	; (8008004 <parseDHCPMSG+0x29c>)
 8007e98:	789b      	ldrb	r3, [r3, #2]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d104      	bne.n	8007ea8 <parseDHCPMSG+0x140>
 8007e9e:	79fa      	ldrb	r2, [r7, #7]
 8007ea0:	4b58      	ldr	r3, [pc, #352]	; (8008004 <parseDHCPMSG+0x29c>)
 8007ea2:	78db      	ldrb	r3, [r3, #3]
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d004      	beq.n	8007eb2 <parseDHCPMSG+0x14a>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
 8007ea8:	4857      	ldr	r0, [pc, #348]	; (8008008 <parseDHCPMSG+0x2a0>)
 8007eaa:	f002 fef9 	bl	800aca0 <puts>
#endif
                return 0;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	e189      	b.n	80081c6 <parseDHCPMSG+0x45e>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 8007eb2:	4b4f      	ldr	r3, [pc, #316]	; (8007ff0 <parseDHCPMSG+0x288>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	33f0      	adds	r3, #240	; 0xf0
 8007ebc:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 8007ebe:	8a3b      	ldrh	r3, [r7, #16]
 8007ec0:	3bf0      	subs	r3, #240	; 0xf0
 8007ec2:	697a      	ldr	r2, [r7, #20]
 8007ec4:	4413      	add	r3, r2
 8007ec6:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 8007ec8:	e176      	b.n	80081b8 <parseDHCPMSG+0x450>

			switch ( *p ) {
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	2b36      	cmp	r3, #54	; 0x36
 8007ed0:	dc76      	bgt.n	8007fc0 <parseDHCPMSG+0x258>
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	f2c0 8163 	blt.w	800819e <parseDHCPMSG+0x436>
 8007ed8:	2b36      	cmp	r3, #54	; 0x36
 8007eda:	f200 8160 	bhi.w	800819e <parseDHCPMSG+0x436>
 8007ede:	a201      	add	r2, pc, #4	; (adr r2, 8007ee4 <parseDHCPMSG+0x17c>)
 8007ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ee4:	08007fcd 	.word	0x08007fcd
 8007ee8:	0800800d 	.word	0x0800800d
 8007eec:	0800819f 	.word	0x0800819f
 8007ef0:	0800804b 	.word	0x0800804b
 8007ef4:	0800819f 	.word	0x0800819f
 8007ef8:	0800819f 	.word	0x0800819f
 8007efc:	08008097 	.word	0x08008097
 8007f00:	0800819f 	.word	0x0800819f
 8007f04:	0800819f 	.word	0x0800819f
 8007f08:	0800819f 	.word	0x0800819f
 8007f0c:	0800819f 	.word	0x0800819f
 8007f10:	0800819f 	.word	0x0800819f
 8007f14:	0800819f 	.word	0x0800819f
 8007f18:	0800819f 	.word	0x0800819f
 8007f1c:	0800819f 	.word	0x0800819f
 8007f20:	0800819f 	.word	0x0800819f
 8007f24:	0800819f 	.word	0x0800819f
 8007f28:	0800819f 	.word	0x0800819f
 8007f2c:	0800819f 	.word	0x0800819f
 8007f30:	0800819f 	.word	0x0800819f
 8007f34:	0800819f 	.word	0x0800819f
 8007f38:	0800819f 	.word	0x0800819f
 8007f3c:	0800819f 	.word	0x0800819f
 8007f40:	0800819f 	.word	0x0800819f
 8007f44:	0800819f 	.word	0x0800819f
 8007f48:	0800819f 	.word	0x0800819f
 8007f4c:	0800819f 	.word	0x0800819f
 8007f50:	0800819f 	.word	0x0800819f
 8007f54:	0800819f 	.word	0x0800819f
 8007f58:	0800819f 	.word	0x0800819f
 8007f5c:	0800819f 	.word	0x0800819f
 8007f60:	0800819f 	.word	0x0800819f
 8007f64:	0800819f 	.word	0x0800819f
 8007f68:	0800819f 	.word	0x0800819f
 8007f6c:	0800819f 	.word	0x0800819f
 8007f70:	0800819f 	.word	0x0800819f
 8007f74:	0800819f 	.word	0x0800819f
 8007f78:	0800819f 	.word	0x0800819f
 8007f7c:	0800819f 	.word	0x0800819f
 8007f80:	0800819f 	.word	0x0800819f
 8007f84:	0800819f 	.word	0x0800819f
 8007f88:	0800819f 	.word	0x0800819f
 8007f8c:	0800819f 	.word	0x0800819f
 8007f90:	0800819f 	.word	0x0800819f
 8007f94:	0800819f 	.word	0x0800819f
 8007f98:	0800819f 	.word	0x0800819f
 8007f9c:	0800819f 	.word	0x0800819f
 8007fa0:	0800819f 	.word	0x0800819f
 8007fa4:	0800819f 	.word	0x0800819f
 8007fa8:	0800819f 	.word	0x0800819f
 8007fac:	0800819f 	.word	0x0800819f
 8007fb0:	080080e3 	.word	0x080080e3
 8007fb4:	0800819f 	.word	0x0800819f
 8007fb8:	08007fd5 	.word	0x08007fd5
 8007fbc:	08008145 	.word	0x08008145
 8007fc0:	2bff      	cmp	r3, #255	; 0xff
 8007fc2:	f040 80ec 	bne.w	800819e <parseDHCPMSG+0x436>

   			case endOption :
   			   p = e;   // for break while(p < e)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	617b      	str	r3, [r7, #20]
   				break;
 8007fca:	e0f5      	b.n	80081b8 <parseDHCPMSG+0x450>
            case padOption :
   				p++;
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	3301      	adds	r3, #1
 8007fd0:	617b      	str	r3, [r7, #20]
   				break;
 8007fd2:	e0f1      	b.n	80081b8 <parseDHCPMSG+0x450>
   			case dhcpMessageType :
   				p++;
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	617b      	str	r3, [r7, #20]
   				p++;
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	3301      	adds	r3, #1
 8007fde:	617b      	str	r3, [r7, #20]
   				type = *p++;
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	1c5a      	adds	r2, r3, #1
 8007fe4:	617a      	str	r2, [r7, #20]
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	74fb      	strb	r3, [r7, #19]
   				break;
 8007fea:	e0e5      	b.n	80081b8 <parseDHCPMSG+0x450>
 8007fec:	20001a95 	.word	0x20001a95
 8007ff0:	20001ac0 	.word	0x20001ac0
 8007ff4:	0800c128 	.word	0x0800c128
 8007ff8:	20001ac4 	.word	0x20001ac4
 8007ffc:	0800c158 	.word	0x0800c158
 8008000:	20001a98 	.word	0x20001a98
 8008004:	20001a9c 	.word	0x20001a9c
 8008008:	0800c188 	.word	0x0800c188
   			case subnetMask :
   				p++;
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	3301      	adds	r3, #1
 8008010:	617b      	str	r3, [r7, #20]
   				p++;
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	3301      	adds	r3, #1
 8008016:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	1c5a      	adds	r2, r3, #1
 800801c:	617a      	str	r2, [r7, #20]
 800801e:	781a      	ldrb	r2, [r3, #0]
 8008020:	4b6b      	ldr	r3, [pc, #428]	; (80081d0 <parseDHCPMSG+0x468>)
 8008022:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	1c5a      	adds	r2, r3, #1
 8008028:	617a      	str	r2, [r7, #20]
 800802a:	781a      	ldrb	r2, [r3, #0]
 800802c:	4b68      	ldr	r3, [pc, #416]	; (80081d0 <parseDHCPMSG+0x468>)
 800802e:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	1c5a      	adds	r2, r3, #1
 8008034:	617a      	str	r2, [r7, #20]
 8008036:	781a      	ldrb	r2, [r3, #0]
 8008038:	4b65      	ldr	r3, [pc, #404]	; (80081d0 <parseDHCPMSG+0x468>)
 800803a:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	1c5a      	adds	r2, r3, #1
 8008040:	617a      	str	r2, [r7, #20]
 8008042:	781a      	ldrb	r2, [r3, #0]
 8008044:	4b62      	ldr	r3, [pc, #392]	; (80081d0 <parseDHCPMSG+0x468>)
 8008046:	70da      	strb	r2, [r3, #3]
   				break;
 8008048:	e0b6      	b.n	80081b8 <parseDHCPMSG+0x450>
   			case routersOnSubnet :
   				p++;
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	3301      	adds	r3, #1
 800804e:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	1c5a      	adds	r2, r3, #1
 8008054:	617a      	str	r2, [r7, #20]
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	1c5a      	adds	r2, r3, #1
 800805e:	617a      	str	r2, [r7, #20]
 8008060:	781a      	ldrb	r2, [r3, #0]
 8008062:	4b5c      	ldr	r3, [pc, #368]	; (80081d4 <parseDHCPMSG+0x46c>)
 8008064:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	1c5a      	adds	r2, r3, #1
 800806a:	617a      	str	r2, [r7, #20]
 800806c:	781a      	ldrb	r2, [r3, #0]
 800806e:	4b59      	ldr	r3, [pc, #356]	; (80081d4 <parseDHCPMSG+0x46c>)
 8008070:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	1c5a      	adds	r2, r3, #1
 8008076:	617a      	str	r2, [r7, #20]
 8008078:	781a      	ldrb	r2, [r3, #0]
 800807a:	4b56      	ldr	r3, [pc, #344]	; (80081d4 <parseDHCPMSG+0x46c>)
 800807c:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	1c5a      	adds	r2, r3, #1
 8008082:	617a      	str	r2, [r7, #20]
 8008084:	781a      	ldrb	r2, [r3, #0]
 8008086:	4b53      	ldr	r3, [pc, #332]	; (80081d4 <parseDHCPMSG+0x46c>)
 8008088:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 800808a:	7afb      	ldrb	r3, [r7, #11]
 800808c:	3b04      	subs	r3, #4
 800808e:	697a      	ldr	r2, [r7, #20]
 8008090:	4413      	add	r3, r2
 8008092:	617b      	str	r3, [r7, #20]
   				break;
 8008094:	e090      	b.n	80081b8 <parseDHCPMSG+0x450>
   			case dns :
   				p++;                  
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	3301      	adds	r3, #1
 800809a:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	1c5a      	adds	r2, r3, #1
 80080a0:	617a      	str	r2, [r7, #20]
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	1c5a      	adds	r2, r3, #1
 80080aa:	617a      	str	r2, [r7, #20]
 80080ac:	781a      	ldrb	r2, [r3, #0]
 80080ae:	4b4a      	ldr	r3, [pc, #296]	; (80081d8 <parseDHCPMSG+0x470>)
 80080b0:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	1c5a      	adds	r2, r3, #1
 80080b6:	617a      	str	r2, [r7, #20]
 80080b8:	781a      	ldrb	r2, [r3, #0]
 80080ba:	4b47      	ldr	r3, [pc, #284]	; (80081d8 <parseDHCPMSG+0x470>)
 80080bc:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	1c5a      	adds	r2, r3, #1
 80080c2:	617a      	str	r2, [r7, #20]
 80080c4:	781a      	ldrb	r2, [r3, #0]
 80080c6:	4b44      	ldr	r3, [pc, #272]	; (80081d8 <parseDHCPMSG+0x470>)
 80080c8:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	1c5a      	adds	r2, r3, #1
 80080ce:	617a      	str	r2, [r7, #20]
 80080d0:	781a      	ldrb	r2, [r3, #0]
 80080d2:	4b41      	ldr	r3, [pc, #260]	; (80081d8 <parseDHCPMSG+0x470>)
 80080d4:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 80080d6:	7afb      	ldrb	r3, [r7, #11]
 80080d8:	3b04      	subs	r3, #4
 80080da:	697a      	ldr	r2, [r7, #20]
 80080dc:	4413      	add	r3, r2
 80080de:	617b      	str	r3, [r7, #20]
   				break;
 80080e0:	e06a      	b.n	80081b8 <parseDHCPMSG+0x450>
   			case dhcpIPaddrLeaseTime :
   				p++;
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	3301      	adds	r3, #1
 80080e6:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	1c5a      	adds	r2, r3, #1
 80080ec:	617a      	str	r2, [r7, #20]
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	1c5a      	adds	r2, r3, #1
 80080f6:	617a      	str	r2, [r7, #20]
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	461a      	mov	r2, r3
 80080fc:	4b37      	ldr	r3, [pc, #220]	; (80081dc <parseDHCPMSG+0x474>)
 80080fe:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8008100:	4b36      	ldr	r3, [pc, #216]	; (80081dc <parseDHCPMSG+0x474>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	021a      	lsls	r2, r3, #8
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	1c59      	adds	r1, r3, #1
 800810a:	6179      	str	r1, [r7, #20]
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	4413      	add	r3, r2
 8008110:	4a32      	ldr	r2, [pc, #200]	; (80081dc <parseDHCPMSG+0x474>)
 8008112:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8008114:	4b31      	ldr	r3, [pc, #196]	; (80081dc <parseDHCPMSG+0x474>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	021a      	lsls	r2, r3, #8
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	1c59      	adds	r1, r3, #1
 800811e:	6179      	str	r1, [r7, #20]
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	4413      	add	r3, r2
 8008124:	4a2d      	ldr	r2, [pc, #180]	; (80081dc <parseDHCPMSG+0x474>)
 8008126:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8008128:	4b2c      	ldr	r3, [pc, #176]	; (80081dc <parseDHCPMSG+0x474>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	021a      	lsls	r2, r3, #8
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	1c59      	adds	r1, r3, #1
 8008132:	6179      	str	r1, [r7, #20]
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	4413      	add	r3, r2
 8008138:	4a28      	ldr	r2, [pc, #160]	; (80081dc <parseDHCPMSG+0x474>)
 800813a:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 800813c:	4b27      	ldr	r3, [pc, #156]	; (80081dc <parseDHCPMSG+0x474>)
 800813e:	220a      	movs	r2, #10
 8008140:	601a      	str	r2, [r3, #0]
 				#endif
   				break;
 8008142:	e039      	b.n	80081b8 <parseDHCPMSG+0x450>
   			case dhcpServerIdentifier :
   				p++;
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	3301      	adds	r3, #1
 8008148:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	1c5a      	adds	r2, r3, #1
 800814e:	617a      	str	r2, [r7, #20]
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	1c5a      	adds	r2, r3, #1
 8008158:	617a      	str	r2, [r7, #20]
 800815a:	781a      	ldrb	r2, [r3, #0]
 800815c:	4b20      	ldr	r3, [pc, #128]	; (80081e0 <parseDHCPMSG+0x478>)
 800815e:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	1c5a      	adds	r2, r3, #1
 8008164:	617a      	str	r2, [r7, #20]
 8008166:	781a      	ldrb	r2, [r3, #0]
 8008168:	4b1d      	ldr	r3, [pc, #116]	; (80081e0 <parseDHCPMSG+0x478>)
 800816a:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	1c5a      	adds	r2, r3, #1
 8008170:	617a      	str	r2, [r7, #20]
 8008172:	781a      	ldrb	r2, [r3, #0]
 8008174:	4b1a      	ldr	r3, [pc, #104]	; (80081e0 <parseDHCPMSG+0x478>)
 8008176:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	1c5a      	adds	r2, r3, #1
 800817c:	617a      	str	r2, [r7, #20]
 800817e:	781a      	ldrb	r2, [r3, #0]
 8008180:	4b17      	ldr	r3, [pc, #92]	; (80081e0 <parseDHCPMSG+0x478>)
 8008182:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 8008184:	793a      	ldrb	r2, [r7, #4]
 8008186:	4b17      	ldr	r3, [pc, #92]	; (80081e4 <parseDHCPMSG+0x47c>)
 8008188:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 800818a:	797a      	ldrb	r2, [r7, #5]
 800818c:	4b15      	ldr	r3, [pc, #84]	; (80081e4 <parseDHCPMSG+0x47c>)
 800818e:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 8008190:	79ba      	ldrb	r2, [r7, #6]
 8008192:	4b14      	ldr	r3, [pc, #80]	; (80081e4 <parseDHCPMSG+0x47c>)
 8008194:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 8008196:	79fa      	ldrb	r2, [r7, #7]
 8008198:	4b12      	ldr	r3, [pc, #72]	; (80081e4 <parseDHCPMSG+0x47c>)
 800819a:	70da      	strb	r2, [r3, #3]
   				break;
 800819c:	e00c      	b.n	80081b8 <parseDHCPMSG+0x450>
   			default :
   				p++;
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	3301      	adds	r3, #1
 80081a2:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	1c5a      	adds	r2, r3, #1
 80081a8:	617a      	str	r2, [r7, #20]
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 80081ae:	7afb      	ldrb	r3, [r7, #11]
 80081b0:	697a      	ldr	r2, [r7, #20]
 80081b2:	4413      	add	r3, r2
 80081b4:	617b      	str	r3, [r7, #20]
   				break;
 80081b6:	bf00      	nop
		while ( p < e ) {
 80081b8:	697a      	ldr	r2, [r7, #20]
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	429a      	cmp	r2, r3
 80081be:	f4ff ae84 	bcc.w	8007eca <parseDHCPMSG+0x162>
			} // switch
		} // while
	} // if
	return	type;
 80081c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3718      	adds	r7, #24
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bdb0      	pop	{r4, r5, r7, pc}
 80081ce:	bf00      	nop
 80081d0:	20001aac 	.word	0x20001aac
 80081d4:	20001aa8 	.word	0x20001aa8
 80081d8:	20001ab0 	.word	0x20001ab0
 80081dc:	20000098 	.word	0x20000098
 80081e0:	20001a98 	.word	0x20001a98
 80081e4:	20001a9c 	.word	0x20001a9c

080081e8 <DHCP_run>:

uint8_t DHCP_run(void)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b082      	sub	sp, #8
 80081ec:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 80081ee:	4b8a      	ldr	r3, [pc, #552]	; (8008418 <DHCP_run+0x230>)
 80081f0:	f993 3000 	ldrsb.w	r3, [r3]
 80081f4:	2b06      	cmp	r3, #6
 80081f6:	d101      	bne.n	80081fc <DHCP_run+0x14>
 80081f8:	2305      	movs	r3, #5
 80081fa:	e109      	b.n	8008410 <DHCP_run+0x228>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 80081fc:	4b87      	ldr	r3, [pc, #540]	; (800841c <DHCP_run+0x234>)
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	3301      	adds	r3, #1
 8008204:	00db      	lsls	r3, r3, #3
 8008206:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800820a:	4618      	mov	r0, r3
 800820c:	f7fc febe 	bl	8004f8c <WIZCHIP_READ>
 8008210:	4603      	mov	r3, r0
 8008212:	2b22      	cmp	r3, #34	; 0x22
 8008214:	d006      	beq.n	8008224 <DHCP_run+0x3c>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 8008216:	4b81      	ldr	r3, [pc, #516]	; (800841c <DHCP_run+0x234>)
 8008218:	7818      	ldrb	r0, [r3, #0]
 800821a:	2300      	movs	r3, #0
 800821c:	2244      	movs	r2, #68	; 0x44
 800821e:	2102      	movs	r1, #2
 8008220:	f7fd f9a4 	bl	800556c <socket>

	ret = DHCP_RUNNING;
 8008224:	2301      	movs	r3, #1
 8008226:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 8008228:	f7ff fd9e 	bl	8007d68 <parseDHCPMSG>
 800822c:	4603      	mov	r3, r0
 800822e:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 8008230:	4b79      	ldr	r3, [pc, #484]	; (8008418 <DHCP_run+0x230>)
 8008232:	f993 3000 	ldrsb.w	r3, [r3]
 8008236:	2b04      	cmp	r3, #4
 8008238:	f200 80e6 	bhi.w	8008408 <DHCP_run+0x220>
 800823c:	a201      	add	r2, pc, #4	; (adr r2, 8008244 <DHCP_run+0x5c>)
 800823e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008242:	bf00      	nop
 8008244:	08008259 	.word	0x08008259
 8008248:	0800827d 	.word	0x0800827d
 800824c:	080082c7 	.word	0x080082c7
 8008250:	08008323 	.word	0x08008323
 8008254:	08008383 	.word	0x08008383
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 8008258:	4b71      	ldr	r3, [pc, #452]	; (8008420 <DHCP_run+0x238>)
 800825a:	2200      	movs	r2, #0
 800825c:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 800825e:	4b70      	ldr	r3, [pc, #448]	; (8008420 <DHCP_run+0x238>)
 8008260:	2200      	movs	r2, #0
 8008262:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 8008264:	4b6e      	ldr	r3, [pc, #440]	; (8008420 <DHCP_run+0x238>)
 8008266:	2200      	movs	r2, #0
 8008268:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 800826a:	4b6d      	ldr	r3, [pc, #436]	; (8008420 <DHCP_run+0x238>)
 800826c:	2200      	movs	r2, #0
 800826e:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 8008270:	f7fe ffc8 	bl	8007204 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 8008274:	4b68      	ldr	r3, [pc, #416]	; (8008418 <DHCP_run+0x230>)
 8008276:	2201      	movs	r2, #1
 8008278:	701a      	strb	r2, [r3, #0]
   		break;
 800827a:	e0c8      	b.n	800840e <DHCP_run+0x226>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 800827c:	79bb      	ldrb	r3, [r7, #6]
 800827e:	2b02      	cmp	r3, #2
 8008280:	d11c      	bne.n	80082bc <DHCP_run+0xd4>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
 8008282:	4868      	ldr	r0, [pc, #416]	; (8008424 <DHCP_run+0x23c>)
 8008284:	f002 fd0c 	bl	800aca0 <puts>
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 8008288:	4b67      	ldr	r3, [pc, #412]	; (8008428 <DHCP_run+0x240>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	7c1a      	ldrb	r2, [r3, #16]
 800828e:	4b64      	ldr	r3, [pc, #400]	; (8008420 <DHCP_run+0x238>)
 8008290:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 8008292:	4b65      	ldr	r3, [pc, #404]	; (8008428 <DHCP_run+0x240>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	7c5a      	ldrb	r2, [r3, #17]
 8008298:	4b61      	ldr	r3, [pc, #388]	; (8008420 <DHCP_run+0x238>)
 800829a:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 800829c:	4b62      	ldr	r3, [pc, #392]	; (8008428 <DHCP_run+0x240>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	7c9a      	ldrb	r2, [r3, #18]
 80082a2:	4b5f      	ldr	r3, [pc, #380]	; (8008420 <DHCP_run+0x238>)
 80082a4:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 80082a6:	4b60      	ldr	r3, [pc, #384]	; (8008428 <DHCP_run+0x240>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	7cda      	ldrb	r2, [r3, #19]
 80082ac:	4b5c      	ldr	r3, [pc, #368]	; (8008420 <DHCP_run+0x238>)
 80082ae:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 80082b0:	f7ff f974 	bl	800759c <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 80082b4:	4b58      	ldr	r3, [pc, #352]	; (8008418 <DHCP_run+0x230>)
 80082b6:	2202      	movs	r2, #2
 80082b8:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 80082ba:	e0a8      	b.n	800840e <DHCP_run+0x226>
			} else ret = check_DHCP_timeout();
 80082bc:	f000 f8e2 	bl	8008484 <check_DHCP_timeout>
 80082c0:	4603      	mov	r3, r0
 80082c2:	71fb      	strb	r3, [r7, #7]
         break;
 80082c4:	e0a3      	b.n	800840e <DHCP_run+0x226>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 80082c6:	79bb      	ldrb	r3, [r7, #6]
 80082c8:	2b05      	cmp	r3, #5
 80082ca:	d119      	bne.n	8008300 <DHCP_run+0x118>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
 80082cc:	4857      	ldr	r0, [pc, #348]	; (800842c <DHCP_run+0x244>)
 80082ce:	f002 fce7 	bl	800aca0 <puts>
#endif
				if (check_DHCP_leasedIP()) {
 80082d2:	f000 f937 	bl	8008544 <check_DHCP_leasedIP>
 80082d6:	4603      	mov	r3, r0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d008      	beq.n	80082ee <DHCP_run+0x106>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 80082dc:	4b54      	ldr	r3, [pc, #336]	; (8008430 <DHCP_run+0x248>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4798      	blx	r3
					reset_DHCP_timeout();
 80082e2:	f000 fa07 	bl	80086f4 <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 80082e6:	4b4c      	ldr	r3, [pc, #304]	; (8008418 <DHCP_run+0x230>)
 80082e8:	2203      	movs	r2, #3
 80082ea:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 80082ec:	e08f      	b.n	800840e <DHCP_run+0x226>
					reset_DHCP_timeout();
 80082ee:	f000 fa01 	bl	80086f4 <reset_DHCP_timeout>
					dhcp_ip_conflict();
 80082f2:	4b50      	ldr	r3, [pc, #320]	; (8008434 <DHCP_run+0x24c>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 80082f8:	4b47      	ldr	r3, [pc, #284]	; (8008418 <DHCP_run+0x230>)
 80082fa:	2200      	movs	r2, #0
 80082fc:	701a      	strb	r2, [r3, #0]
		break;
 80082fe:	e086      	b.n	800840e <DHCP_run+0x226>
			} else if (type == DHCP_NAK) {
 8008300:	79bb      	ldrb	r3, [r7, #6]
 8008302:	2b06      	cmp	r3, #6
 8008304:	d108      	bne.n	8008318 <DHCP_run+0x130>
				printf("> Receive DHCP_NACK\r\n");
 8008306:	484c      	ldr	r0, [pc, #304]	; (8008438 <DHCP_run+0x250>)
 8008308:	f002 fcca 	bl	800aca0 <puts>
				reset_DHCP_timeout();
 800830c:	f000 f9f2 	bl	80086f4 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8008310:	4b41      	ldr	r3, [pc, #260]	; (8008418 <DHCP_run+0x230>)
 8008312:	2201      	movs	r2, #1
 8008314:	701a      	strb	r2, [r3, #0]
		break;
 8008316:	e07a      	b.n	800840e <DHCP_run+0x226>
			} else ret = check_DHCP_timeout();
 8008318:	f000 f8b4 	bl	8008484 <check_DHCP_timeout>
 800831c:	4603      	mov	r3, r0
 800831e:	71fb      	strb	r3, [r7, #7]
		break;
 8008320:	e075      	b.n	800840e <DHCP_run+0x226>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 8008322:	2304      	movs	r3, #4
 8008324:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 8008326:	4b45      	ldr	r3, [pc, #276]	; (800843c <DHCP_run+0x254>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800832e:	d06d      	beq.n	800840c <DHCP_run+0x224>
 8008330:	4b42      	ldr	r3, [pc, #264]	; (800843c <DHCP_run+0x254>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	085a      	lsrs	r2, r3, #1
 8008336:	4b42      	ldr	r3, [pc, #264]	; (8008440 <DHCP_run+0x258>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	429a      	cmp	r2, r3
 800833c:	d266      	bcs.n	800840c <DHCP_run+0x224>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
 800833e:	4841      	ldr	r0, [pc, #260]	; (8008444 <DHCP_run+0x25c>)
 8008340:	f002 fcae 	bl	800aca0 <puts>
#endif

				type = 0;
 8008344:	2300      	movs	r3, #0
 8008346:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 8008348:	4b35      	ldr	r3, [pc, #212]	; (8008420 <DHCP_run+0x238>)
 800834a:	781a      	ldrb	r2, [r3, #0]
 800834c:	4b3e      	ldr	r3, [pc, #248]	; (8008448 <DHCP_run+0x260>)
 800834e:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 8008350:	4b33      	ldr	r3, [pc, #204]	; (8008420 <DHCP_run+0x238>)
 8008352:	785a      	ldrb	r2, [r3, #1]
 8008354:	4b3c      	ldr	r3, [pc, #240]	; (8008448 <DHCP_run+0x260>)
 8008356:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 8008358:	4b31      	ldr	r3, [pc, #196]	; (8008420 <DHCP_run+0x238>)
 800835a:	789a      	ldrb	r2, [r3, #2]
 800835c:	4b3a      	ldr	r3, [pc, #232]	; (8008448 <DHCP_run+0x260>)
 800835e:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 8008360:	4b2f      	ldr	r3, [pc, #188]	; (8008420 <DHCP_run+0x238>)
 8008362:	78da      	ldrb	r2, [r3, #3]
 8008364:	4b38      	ldr	r3, [pc, #224]	; (8008448 <DHCP_run+0x260>)
 8008366:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 8008368:	4b38      	ldr	r3, [pc, #224]	; (800844c <DHCP_run+0x264>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	3301      	adds	r3, #1
 800836e:	4a37      	ldr	r2, [pc, #220]	; (800844c <DHCP_run+0x264>)
 8008370:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 8008372:	f7ff f913 	bl	800759c <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 8008376:	f000 f9bd 	bl	80086f4 <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 800837a:	4b27      	ldr	r3, [pc, #156]	; (8008418 <DHCP_run+0x230>)
 800837c:	2204      	movs	r2, #4
 800837e:	701a      	strb	r2, [r3, #0]
			}
		break;
 8008380:	e044      	b.n	800840c <DHCP_run+0x224>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 8008382:	2304      	movs	r3, #4
 8008384:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 8008386:	79bb      	ldrb	r3, [r7, #6]
 8008388:	2b05      	cmp	r3, #5
 800838a:	d12c      	bne.n	80083e6 <DHCP_run+0x1fe>
				dhcp_retry_count = 0;
 800838c:	4b30      	ldr	r3, [pc, #192]	; (8008450 <DHCP_run+0x268>)
 800838e:	2200      	movs	r2, #0
 8008390:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8008392:	4b2d      	ldr	r3, [pc, #180]	; (8008448 <DHCP_run+0x260>)
 8008394:	781a      	ldrb	r2, [r3, #0]
 8008396:	4b22      	ldr	r3, [pc, #136]	; (8008420 <DHCP_run+0x238>)
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	429a      	cmp	r2, r3
 800839c:	d111      	bne.n	80083c2 <DHCP_run+0x1da>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 800839e:	4b2a      	ldr	r3, [pc, #168]	; (8008448 <DHCP_run+0x260>)
 80083a0:	785a      	ldrb	r2, [r3, #1]
 80083a2:	4b1f      	ldr	r3, [pc, #124]	; (8008420 <DHCP_run+0x238>)
 80083a4:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d10b      	bne.n	80083c2 <DHCP_run+0x1da>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 80083aa:	4b27      	ldr	r3, [pc, #156]	; (8008448 <DHCP_run+0x260>)
 80083ac:	789a      	ldrb	r2, [r3, #2]
 80083ae:	4b1c      	ldr	r3, [pc, #112]	; (8008420 <DHCP_run+0x238>)
 80083b0:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d105      	bne.n	80083c2 <DHCP_run+0x1da>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 80083b6:	4b24      	ldr	r3, [pc, #144]	; (8008448 <DHCP_run+0x260>)
 80083b8:	78da      	ldrb	r2, [r3, #3]
 80083ba:	4b19      	ldr	r3, [pc, #100]	; (8008420 <DHCP_run+0x238>)
 80083bc:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 80083be:	429a      	cmp	r2, r3
 80083c0:	d008      	beq.n	80083d4 <DHCP_run+0x1ec>
				{
					ret = DHCP_IP_CHANGED;
 80083c2:	2303      	movs	r3, #3
 80083c4:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 80083c6:	4b23      	ldr	r3, [pc, #140]	; (8008454 <DHCP_run+0x26c>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4798      	blx	r3
               #ifdef _DHCP_DEBUG_
                  printf(">IP changed.\r\n");
 80083cc:	4822      	ldr	r0, [pc, #136]	; (8008458 <DHCP_run+0x270>)
 80083ce:	f002 fc67 	bl	800aca0 <puts>
 80083d2:	e002      	b.n	80083da <DHCP_run+0x1f2>
               #endif
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
 80083d4:	4821      	ldr	r0, [pc, #132]	; (800845c <DHCP_run+0x274>)
 80083d6:	f002 fc63 	bl	800aca0 <puts>
         #endif            				
				reset_DHCP_timeout();
 80083da:	f000 f98b 	bl	80086f4 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 80083de:	4b0e      	ldr	r3, [pc, #56]	; (8008418 <DHCP_run+0x230>)
 80083e0:	2203      	movs	r2, #3
 80083e2:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 80083e4:	e013      	b.n	800840e <DHCP_run+0x226>
			} else if (type == DHCP_NAK) {
 80083e6:	79bb      	ldrb	r3, [r7, #6]
 80083e8:	2b06      	cmp	r3, #6
 80083ea:	d108      	bne.n	80083fe <DHCP_run+0x216>
				printf("> Receive DHCP_NACK, Failed to maintain ip\r\n");
 80083ec:	481c      	ldr	r0, [pc, #112]	; (8008460 <DHCP_run+0x278>)
 80083ee:	f002 fc57 	bl	800aca0 <puts>
				reset_DHCP_timeout();
 80083f2:	f000 f97f 	bl	80086f4 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 80083f6:	4b08      	ldr	r3, [pc, #32]	; (8008418 <DHCP_run+0x230>)
 80083f8:	2201      	movs	r2, #1
 80083fa:	701a      	strb	r2, [r3, #0]
	   	break;
 80083fc:	e007      	b.n	800840e <DHCP_run+0x226>
			} else ret = check_DHCP_timeout();
 80083fe:	f000 f841 	bl	8008484 <check_DHCP_timeout>
 8008402:	4603      	mov	r3, r0
 8008404:	71fb      	strb	r3, [r7, #7]
	   	break;
 8008406:	e002      	b.n	800840e <DHCP_run+0x226>
		default :
   		break;
 8008408:	bf00      	nop
 800840a:	e000      	b.n	800840e <DHCP_run+0x226>
		break;
 800840c:	bf00      	nop
	}

	return ret;
 800840e:	79fb      	ldrb	r3, [r7, #7]
}
 8008410:	4618      	mov	r0, r3
 8008412:	3708      	adds	r7, #8
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}
 8008418:	20001ab4 	.word	0x20001ab4
 800841c:	20001a95 	.word	0x20001a95
 8008420:	20001aa4 	.word	0x20001aa4
 8008424:	0800c1c8 	.word	0x0800c1c8
 8008428:	20001ac0 	.word	0x20001ac0
 800842c:	0800c1e0 	.word	0x0800c1e0
 8008430:	200000a8 	.word	0x200000a8
 8008434:	200000b0 	.word	0x200000b0
 8008438:	0800c1f4 	.word	0x0800c1f4
 800843c:	20000098 	.word	0x20000098
 8008440:	20001ab8 	.word	0x20001ab8
 8008444:	0800c20c 	.word	0x0800c20c
 8008448:	20001aa0 	.word	0x20001aa0
 800844c:	20001abc 	.word	0x20001abc
 8008450:	20001ab5 	.word	0x20001ab5
 8008454:	200000ac 	.word	0x200000ac
 8008458:	0800c22c 	.word	0x0800c22c
 800845c:	0800c23c 	.word	0x0800c23c
 8008460:	0800c250 	.word	0x0800c250

08008464 <DHCP_stop>:

void    DHCP_stop(void)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	af00      	add	r7, sp, #0
   close(DHCP_SOCKET);
 8008468:	4b04      	ldr	r3, [pc, #16]	; (800847c <DHCP_stop+0x18>)
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	4618      	mov	r0, r3
 800846e:	f7fd f993 	bl	8005798 <close>
   dhcp_state = STATE_DHCP_STOP;
 8008472:	4b03      	ldr	r3, [pc, #12]	; (8008480 <DHCP_stop+0x1c>)
 8008474:	2206      	movs	r2, #6
 8008476:	701a      	strb	r2, [r3, #0]
}
 8008478:	bf00      	nop
 800847a:	bd80      	pop	{r7, pc}
 800847c:	20001a95 	.word	0x20001a95
 8008480:	20001ab4 	.word	0x20001ab4

08008484 <check_DHCP_timeout>:

uint8_t check_DHCP_timeout(void)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 800848a:	2301      	movs	r3, #1
 800848c:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 800848e:	4b29      	ldr	r3, [pc, #164]	; (8008534 <check_DHCP_timeout+0xb0>)
 8008490:	f993 3000 	ldrsb.w	r3, [r3]
 8008494:	2b01      	cmp	r3, #1
 8008496:	dc2d      	bgt.n	80084f4 <check_DHCP_timeout+0x70>
		if (dhcp_tick_next < dhcp_tick_1s) {
 8008498:	4b27      	ldr	r3, [pc, #156]	; (8008538 <check_DHCP_timeout+0xb4>)
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	4b27      	ldr	r3, [pc, #156]	; (800853c <check_DHCP_timeout+0xb8>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d242      	bcs.n	800852a <check_DHCP_timeout+0xa6>

			switch ( dhcp_state ) {
 80084a4:	4b26      	ldr	r3, [pc, #152]	; (8008540 <check_DHCP_timeout+0xbc>)
 80084a6:	f993 3000 	ldrsb.w	r3, [r3]
 80084aa:	2b04      	cmp	r3, #4
 80084ac:	d00c      	beq.n	80084c8 <check_DHCP_timeout+0x44>
 80084ae:	2b04      	cmp	r3, #4
 80084b0:	dc0d      	bgt.n	80084ce <check_DHCP_timeout+0x4a>
 80084b2:	2b01      	cmp	r3, #1
 80084b4:	d002      	beq.n	80084bc <check_DHCP_timeout+0x38>
 80084b6:	2b02      	cmp	r3, #2
 80084b8:	d003      	beq.n	80084c2 <check_DHCP_timeout+0x3e>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 80084ba:	e008      	b.n	80084ce <check_DHCP_timeout+0x4a>
					send_DHCP_DISCOVER();
 80084bc:	f7fe fea2 	bl	8007204 <send_DHCP_DISCOVER>
				break;
 80084c0:	e006      	b.n	80084d0 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 80084c2:	f7ff f86b 	bl	800759c <send_DHCP_REQUEST>
				break;
 80084c6:	e003      	b.n	80084d0 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 80084c8:	f7ff f868 	bl	800759c <send_DHCP_REQUEST>
				break;
 80084cc:	e000      	b.n	80084d0 <check_DHCP_timeout+0x4c>
				break;
 80084ce:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 80084d0:	4b1a      	ldr	r3, [pc, #104]	; (800853c <check_DHCP_timeout+0xb8>)
 80084d2:	2200      	movs	r2, #0
 80084d4:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 80084d6:	4b19      	ldr	r3, [pc, #100]	; (800853c <check_DHCP_timeout+0xb8>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	330a      	adds	r3, #10
 80084dc:	4a16      	ldr	r2, [pc, #88]	; (8008538 <check_DHCP_timeout+0xb4>)
 80084de:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 80084e0:	4b14      	ldr	r3, [pc, #80]	; (8008534 <check_DHCP_timeout+0xb0>)
 80084e2:	f993 3000 	ldrsb.w	r3, [r3]
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	3301      	adds	r3, #1
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	b25a      	sxtb	r2, r3
 80084ee:	4b11      	ldr	r3, [pc, #68]	; (8008534 <check_DHCP_timeout+0xb0>)
 80084f0:	701a      	strb	r2, [r3, #0]
 80084f2:	e01a      	b.n	800852a <check_DHCP_timeout+0xa6>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 80084f4:	4b12      	ldr	r3, [pc, #72]	; (8008540 <check_DHCP_timeout+0xbc>)
 80084f6:	f993 3000 	ldrsb.w	r3, [r3]
 80084fa:	2b04      	cmp	r3, #4
 80084fc:	d00c      	beq.n	8008518 <check_DHCP_timeout+0x94>
 80084fe:	2b04      	cmp	r3, #4
 8008500:	dc10      	bgt.n	8008524 <check_DHCP_timeout+0xa0>
 8008502:	2b01      	cmp	r3, #1
 8008504:	d002      	beq.n	800850c <check_DHCP_timeout+0x88>
 8008506:	2b02      	cmp	r3, #2
 8008508:	d006      	beq.n	8008518 <check_DHCP_timeout+0x94>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 800850a:	e00b      	b.n	8008524 <check_DHCP_timeout+0xa0>
				dhcp_state = STATE_DHCP_INIT;
 800850c:	4b0c      	ldr	r3, [pc, #48]	; (8008540 <check_DHCP_timeout+0xbc>)
 800850e:	2200      	movs	r2, #0
 8008510:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 8008512:	2300      	movs	r3, #0
 8008514:	71fb      	strb	r3, [r7, #7]
				break;
 8008516:	e006      	b.n	8008526 <check_DHCP_timeout+0xa2>
				send_DHCP_DISCOVER();
 8008518:	f7fe fe74 	bl	8007204 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 800851c:	4b08      	ldr	r3, [pc, #32]	; (8008540 <check_DHCP_timeout+0xbc>)
 800851e:	2201      	movs	r2, #1
 8008520:	701a      	strb	r2, [r3, #0]
				break;
 8008522:	e000      	b.n	8008526 <check_DHCP_timeout+0xa2>
				break;
 8008524:	bf00      	nop
		}
		reset_DHCP_timeout();
 8008526:	f000 f8e5 	bl	80086f4 <reset_DHCP_timeout>
	}
	return ret;
 800852a:	79fb      	ldrb	r3, [r7, #7]
}
 800852c:	4618      	mov	r0, r3
 800852e:	3708      	adds	r7, #8
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}
 8008534:	20001ab5 	.word	0x20001ab5
 8008538:	2000009c 	.word	0x2000009c
 800853c:	20001ab8 	.word	0x20001ab8
 8008540:	20001ab4 	.word	0x20001ab4

08008544 <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b084      	sub	sp, #16
 8008548:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 800854a:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800854e:	f7fc fd1d 	bl	8004f8c <WIZCHIP_READ>
 8008552:	4603      	mov	r3, r0
 8008554:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 8008556:	2103      	movs	r1, #3
 8008558:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800855c:	f7fc fd62 	bl	8005024 <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 8008560:	4b15      	ldr	r3, [pc, #84]	; (80085b8 <check_DHCP_leasedIP+0x74>)
 8008562:	7818      	ldrb	r0, [r3, #0]
 8008564:	f241 3388 	movw	r3, #5000	; 0x1388
 8008568:	9300      	str	r3, [sp, #0]
 800856a:	4b14      	ldr	r3, [pc, #80]	; (80085bc <check_DHCP_leasedIP+0x78>)
 800856c:	2211      	movs	r2, #17
 800856e:	4914      	ldr	r1, [pc, #80]	; (80085c0 <check_DHCP_leasedIP+0x7c>)
 8008570:	f7fd fc82 	bl	8005e78 <sendto>
 8008574:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 8008576:	79fb      	ldrb	r3, [r7, #7]
 8008578:	4619      	mov	r1, r3
 800857a:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800857e:	f7fc fd51 	bl	8005024 <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	f113 0f0d 	cmn.w	r3, #13
 8008588:	d104      	bne.n	8008594 <check_DHCP_leasedIP+0x50>
		// UDP send Timeout occurred : allocated IP address is unique, DHCP Success

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
 800858a:	480e      	ldr	r0, [pc, #56]	; (80085c4 <check_DHCP_leasedIP+0x80>)
 800858c:	f002 fb88 	bl	800aca0 <puts>
#endif

		return 1;
 8008590:	2301      	movs	r3, #1
 8008592:	e00c      	b.n	80085ae <check_DHCP_leasedIP+0x6a>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 8008594:	f7ff fa92 	bl	8007abc <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 8008598:	4b0b      	ldr	r3, [pc, #44]	; (80085c8 <check_DHCP_leasedIP+0x84>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 800859e:	bf00      	nop
 80085a0:	4b09      	ldr	r3, [pc, #36]	; (80085c8 <check_DHCP_leasedIP+0x84>)
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	1ad3      	subs	r3, r2, r3
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d9f9      	bls.n	80085a0 <check_DHCP_leasedIP+0x5c>

		return 0;
 80085ac:	2300      	movs	r3, #0
	}
}	
 80085ae:	4618      	mov	r0, r3
 80085b0:	3708      	adds	r7, #8
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	20001a95 	.word	0x20001a95
 80085bc:	20001aa4 	.word	0x20001aa4
 80085c0:	0800c27c 	.word	0x0800c27c
 80085c4:	0800c290 	.word	0x0800c290
 80085c8:	20001ab8 	.word	0x20001ab8

080085cc <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b084      	sub	sp, #16
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	4603      	mov	r3, r0
 80085d4:	6039      	str	r1, [r7, #0]
 80085d6:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 80085d8:	2300      	movs	r3, #0
 80085da:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 80085dc:	2206      	movs	r2, #6
 80085de:	493f      	ldr	r1, [pc, #252]	; (80086dc <DHCP_init+0x110>)
 80085e0:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80085e4:	f7fc fd6c 	bl	80050c0 <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 80085e8:	4b3c      	ldr	r3, [pc, #240]	; (80086dc <DHCP_init+0x110>)
 80085ea:	781a      	ldrb	r2, [r3, #0]
 80085ec:	4b3b      	ldr	r3, [pc, #236]	; (80086dc <DHCP_init+0x110>)
 80085ee:	785b      	ldrb	r3, [r3, #1]
 80085f0:	4313      	orrs	r3, r2
 80085f2:	b2da      	uxtb	r2, r3
 80085f4:	4b39      	ldr	r3, [pc, #228]	; (80086dc <DHCP_init+0x110>)
 80085f6:	789b      	ldrb	r3, [r3, #2]
 80085f8:	4313      	orrs	r3, r2
 80085fa:	b2da      	uxtb	r2, r3
 80085fc:	4b37      	ldr	r3, [pc, #220]	; (80086dc <DHCP_init+0x110>)
 80085fe:	78db      	ldrb	r3, [r3, #3]
 8008600:	4313      	orrs	r3, r2
 8008602:	b2da      	uxtb	r2, r3
 8008604:	4b35      	ldr	r3, [pc, #212]	; (80086dc <DHCP_init+0x110>)
 8008606:	791b      	ldrb	r3, [r3, #4]
 8008608:	4313      	orrs	r3, r2
 800860a:	b2da      	uxtb	r2, r3
 800860c:	4b33      	ldr	r3, [pc, #204]	; (80086dc <DHCP_init+0x110>)
 800860e:	795b      	ldrb	r3, [r3, #5]
 8008610:	4313      	orrs	r3, r2
 8008612:	b2db      	uxtb	r3, r3
 8008614:	2b00      	cmp	r3, #0
 8008616:	d117      	bne.n	8008648 <DHCP_init+0x7c>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 8008618:	4b30      	ldr	r3, [pc, #192]	; (80086dc <DHCP_init+0x110>)
 800861a:	2200      	movs	r2, #0
 800861c:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 800861e:	4b2f      	ldr	r3, [pc, #188]	; (80086dc <DHCP_init+0x110>)
 8008620:	2208      	movs	r2, #8
 8008622:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 8008624:	4b2d      	ldr	r3, [pc, #180]	; (80086dc <DHCP_init+0x110>)
 8008626:	22dc      	movs	r2, #220	; 0xdc
 8008628:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 800862a:	4b2c      	ldr	r3, [pc, #176]	; (80086dc <DHCP_init+0x110>)
 800862c:	2200      	movs	r2, #0
 800862e:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 8008630:	4b2a      	ldr	r3, [pc, #168]	; (80086dc <DHCP_init+0x110>)
 8008632:	2200      	movs	r2, #0
 8008634:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 8008636:	4b29      	ldr	r3, [pc, #164]	; (80086dc <DHCP_init+0x110>)
 8008638:	2200      	movs	r2, #0
 800863a:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 800863c:	2206      	movs	r2, #6
 800863e:	4927      	ldr	r1, [pc, #156]	; (80086dc <DHCP_init+0x110>)
 8008640:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8008644:	f7fc fd9c 	bl	8005180 <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 8008648:	4a25      	ldr	r2, [pc, #148]	; (80086e0 <DHCP_init+0x114>)
 800864a:	79fb      	ldrb	r3, [r7, #7]
 800864c:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 800864e:	4a25      	ldr	r2, [pc, #148]	; (80086e4 <DHCP_init+0x118>)
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 8008654:	4b24      	ldr	r3, [pc, #144]	; (80086e8 <DHCP_init+0x11c>)
 8008656:	4a25      	ldr	r2, [pc, #148]	; (80086ec <DHCP_init+0x120>)
 8008658:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 800865a:	4b20      	ldr	r3, [pc, #128]	; (80086dc <DHCP_init+0x110>)
 800865c:	78db      	ldrb	r3, [r3, #3]
 800865e:	461a      	mov	r2, r3
 8008660:	4b21      	ldr	r3, [pc, #132]	; (80086e8 <DHCP_init+0x11c>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4413      	add	r3, r2
 8008666:	4a20      	ldr	r2, [pc, #128]	; (80086e8 <DHCP_init+0x11c>)
 8008668:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[4];
 800866a:	4b1c      	ldr	r3, [pc, #112]	; (80086dc <DHCP_init+0x110>)
 800866c:	791b      	ldrb	r3, [r3, #4]
 800866e:	461a      	mov	r2, r3
 8008670:	4b1d      	ldr	r3, [pc, #116]	; (80086e8 <DHCP_init+0x11c>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4413      	add	r3, r2
 8008676:	4a1c      	ldr	r2, [pc, #112]	; (80086e8 <DHCP_init+0x11c>)
 8008678:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[5];
 800867a:	4b18      	ldr	r3, [pc, #96]	; (80086dc <DHCP_init+0x110>)
 800867c:	795b      	ldrb	r3, [r3, #5]
 800867e:	461a      	mov	r2, r3
 8008680:	4b19      	ldr	r3, [pc, #100]	; (80086e8 <DHCP_init+0x11c>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4413      	add	r3, r2
 8008686:	4a18      	ldr	r2, [pc, #96]	; (80086e8 <DHCP_init+0x11c>)
 8008688:	6013      	str	r3, [r2, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 800868a:	4b14      	ldr	r3, [pc, #80]	; (80086dc <DHCP_init+0x110>)
 800868c:	78da      	ldrb	r2, [r3, #3]
 800868e:	4b13      	ldr	r3, [pc, #76]	; (80086dc <DHCP_init+0x110>)
 8008690:	791b      	ldrb	r3, [r3, #4]
 8008692:	4053      	eors	r3, r2
 8008694:	b2da      	uxtb	r2, r3
 8008696:	4b11      	ldr	r3, [pc, #68]	; (80086dc <DHCP_init+0x110>)
 8008698:	795b      	ldrb	r3, [r3, #5]
 800869a:	4053      	eors	r3, r2
 800869c:	b2db      	uxtb	r3, r3
 800869e:	461a      	mov	r2, r3
 80086a0:	4b11      	ldr	r3, [pc, #68]	; (80086e8 <DHCP_init+0x11c>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4413      	add	r3, r2
 80086a6:	4a10      	ldr	r2, [pc, #64]	; (80086e8 <DHCP_init+0x11c>)
 80086a8:	6013      	str	r3, [r2, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 80086aa:	f107 030c 	add.w	r3, r7, #12
 80086ae:	2204      	movs	r2, #4
 80086b0:	4619      	mov	r1, r3
 80086b2:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80086b6:	f7fc fd63 	bl	8005180 <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 80086ba:	f107 030c 	add.w	r3, r7, #12
 80086be:	2204      	movs	r2, #4
 80086c0:	4619      	mov	r1, r3
 80086c2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80086c6:	f7fc fd5b 	bl	8005180 <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 80086ca:	f000 f813 	bl	80086f4 <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 80086ce:	4b08      	ldr	r3, [pc, #32]	; (80086f0 <DHCP_init+0x124>)
 80086d0:	2200      	movs	r2, #0
 80086d2:	701a      	strb	r2, [r3, #0]
}
 80086d4:	bf00      	nop
 80086d6:	3710      	adds	r7, #16
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}
 80086dc:	20001ac4 	.word	0x20001ac4
 80086e0:	20001a95 	.word	0x20001a95
 80086e4:	20001ac0 	.word	0x20001ac0
 80086e8:	20001abc 	.word	0x20001abc
 80086ec:	12345678 	.word	0x12345678
 80086f0:	20001ab4 	.word	0x20001ab4

080086f4 <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 80086f4:	b480      	push	{r7}
 80086f6:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 80086f8:	4b06      	ldr	r3, [pc, #24]	; (8008714 <reset_DHCP_timeout+0x20>)
 80086fa:	2200      	movs	r2, #0
 80086fc:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 80086fe:	4b06      	ldr	r3, [pc, #24]	; (8008718 <reset_DHCP_timeout+0x24>)
 8008700:	220a      	movs	r2, #10
 8008702:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 8008704:	4b05      	ldr	r3, [pc, #20]	; (800871c <reset_DHCP_timeout+0x28>)
 8008706:	2200      	movs	r2, #0
 8008708:	701a      	strb	r2, [r3, #0]
}
 800870a:	bf00      	nop
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr
 8008714:	20001ab8 	.word	0x20001ab8
 8008718:	2000009c 	.word	0x2000009c
 800871c:	20001ab5 	.word	0x20001ab5

08008720 <NibbleToHex>:
{
	return dhcp_lease_time;
}

char NibbleToHex(uint8_t nibble)
{
 8008720:	b480      	push	{r7}
 8008722:	b083      	sub	sp, #12
 8008724:	af00      	add	r7, sp, #0
 8008726:	4603      	mov	r3, r0
 8008728:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 800872a:	79fb      	ldrb	r3, [r7, #7]
 800872c:	f003 030f 	and.w	r3, r3, #15
 8008730:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 8008732:	79fb      	ldrb	r3, [r7, #7]
 8008734:	2b09      	cmp	r3, #9
 8008736:	d803      	bhi.n	8008740 <NibbleToHex+0x20>
    return nibble + '0';
 8008738:	79fb      	ldrb	r3, [r7, #7]
 800873a:	3330      	adds	r3, #48	; 0x30
 800873c:	b2db      	uxtb	r3, r3
 800873e:	e002      	b.n	8008746 <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 8008740:	79fb      	ldrb	r3, [r7, #7]
 8008742:	3337      	adds	r3, #55	; 0x37
 8008744:	b2db      	uxtb	r3, r3
}
 8008746:	4618      	mov	r0, r3
 8008748:	370c      	adds	r7, #12
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr

08008752 <get16>:
uint32_t dns_1s_tick;   // for timout of DNS processing
static uint8_t retry_count;

/* converts uint16_t from network buffer to a host byte order integer. */
uint16_t get16(uint8_t * s)
{
 8008752:	b480      	push	{r7}
 8008754:	b085      	sub	sp, #20
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
	uint16_t i;
	i = *s++ << 8;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	1c5a      	adds	r2, r3, #1
 800875e:	607a      	str	r2, [r7, #4]
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	b29b      	uxth	r3, r3
 8008764:	021b      	lsls	r3, r3, #8
 8008766:	81fb      	strh	r3, [r7, #14]
	i = i + *s;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	b29a      	uxth	r2, r3
 800876e:	89fb      	ldrh	r3, [r7, #14]
 8008770:	4413      	add	r3, r2
 8008772:	81fb      	strh	r3, [r7, #14]
	return i;
 8008774:	89fb      	ldrh	r3, [r7, #14]
}
 8008776:	4618      	mov	r0, r3
 8008778:	3714      	adds	r7, #20
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr

08008782 <put16>:

/* copies uint16_t to the network buffer with network byte order. */
uint8_t * put16(uint8_t * s, uint16_t i)
{
 8008782:	b480      	push	{r7}
 8008784:	b083      	sub	sp, #12
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
 800878a:	460b      	mov	r3, r1
 800878c:	807b      	strh	r3, [r7, #2]
	*s++ = i >> 8;
 800878e:	887b      	ldrh	r3, [r7, #2]
 8008790:	0a1b      	lsrs	r3, r3, #8
 8008792:	b299      	uxth	r1, r3
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	1c5a      	adds	r2, r3, #1
 8008798:	607a      	str	r2, [r7, #4]
 800879a:	b2ca      	uxtb	r2, r1
 800879c:	701a      	strb	r2, [r3, #0]
	*s++ = i;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	1c5a      	adds	r2, r3, #1
 80087a2:	607a      	str	r2, [r7, #4]
 80087a4:	887a      	ldrh	r2, [r7, #2]
 80087a6:	b2d2      	uxtb	r2, r2
 80087a8:	701a      	strb	r2, [r3, #0]
	return s;
 80087aa:	687b      	ldr	r3, [r7, #4]
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	370c      	adds	r7, #12
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr

080087b8 <parse_name>:
 *               buf        - is a pointer to the buffer for the human-readable form name.
 *               len        - is the MAX. size of buffer.
 * Returns     : the length of compressed message
 */
int parse_name(uint8_t * msg, uint8_t * compressed, char * buf, int16_t len)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b08b      	sub	sp, #44	; 0x2c
 80087bc:	af00      	add	r7, sp, #0
 80087be:	60f8      	str	r0, [r7, #12]
 80087c0:	60b9      	str	r1, [r7, #8]
 80087c2:	607a      	str	r2, [r7, #4]
 80087c4:	807b      	strh	r3, [r7, #2]
	uint16_t slen;		/* Length of current segment */
	uint8_t * cp;
	int clen = 0;		/* Total length of compressed name */
 80087c6:	2300      	movs	r3, #0
 80087c8:	61fb      	str	r3, [r7, #28]
	int indirect = 0;	/* Set if indirection encountered */
 80087ca:	2300      	movs	r3, #0
 80087cc:	61bb      	str	r3, [r7, #24]
	int nseg = 0;		/* Total number of segments in name */
 80087ce:	2300      	movs	r3, #0
 80087d0:	617b      	str	r3, [r7, #20]

	cp = compressed;
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	623b      	str	r3, [r7, #32]

	for (;;)
	{
		slen = *cp++;	/* Length of this segment */
 80087d6:	6a3b      	ldr	r3, [r7, #32]
 80087d8:	1c5a      	adds	r2, r3, #1
 80087da:	623a      	str	r2, [r7, #32]
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (!indirect) clen++;
 80087e0:	69bb      	ldr	r3, [r7, #24]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d102      	bne.n	80087ec <parse_name+0x34>
 80087e6:	69fb      	ldr	r3, [r7, #28]
 80087e8:	3301      	adds	r3, #1
 80087ea:	61fb      	str	r3, [r7, #28]

		if ((slen & 0xc0) == 0xc0)
 80087ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80087ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80087f2:	2bc0      	cmp	r3, #192	; 0xc0
 80087f4:	d117      	bne.n	8008826 <parse_name+0x6e>
		{
			if (!indirect)
 80087f6:	69bb      	ldr	r3, [r7, #24]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d102      	bne.n	8008802 <parse_name+0x4a>
				clen++;
 80087fc:	69fb      	ldr	r3, [r7, #28]
 80087fe:	3301      	adds	r3, #1
 8008800:	61fb      	str	r3, [r7, #28]
			indirect = 1;
 8008802:	2301      	movs	r3, #1
 8008804:	61bb      	str	r3, [r7, #24]
			/* Follow indirection */
			cp = &msg[((slen & 0x3f)<<8) + *cp];
 8008806:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008808:	021b      	lsls	r3, r3, #8
 800880a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800880e:	6a3a      	ldr	r2, [r7, #32]
 8008810:	7812      	ldrb	r2, [r2, #0]
 8008812:	4413      	add	r3, r2
 8008814:	461a      	mov	r2, r3
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	4413      	add	r3, r2
 800881a:	623b      	str	r3, [r7, #32]
			slen = *cp++;
 800881c:	6a3b      	ldr	r3, [r7, #32]
 800881e:	1c5a      	adds	r2, r3, #1
 8008820:	623a      	str	r2, [r7, #32]
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	84fb      	strh	r3, [r7, #38]	; 0x26
		}

		if (slen == 0)	/* zero length == all done */
 8008826:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008828:	2b00      	cmp	r3, #0
 800882a:	d02b      	beq.n	8008884 <parse_name+0xcc>
			break;

		len -= slen + 1;
 800882c:	887a      	ldrh	r2, [r7, #2]
 800882e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008830:	1ad3      	subs	r3, r2, r3
 8008832:	b29b      	uxth	r3, r3
 8008834:	3b01      	subs	r3, #1
 8008836:	b29b      	uxth	r3, r3
 8008838:	807b      	strh	r3, [r7, #2]

		if (len < 0) return -1;
 800883a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800883e:	2b00      	cmp	r3, #0
 8008840:	da02      	bge.n	8008848 <parse_name+0x90>
 8008842:	f04f 33ff 	mov.w	r3, #4294967295
 8008846:	e038      	b.n	80088ba <parse_name+0x102>

		if (!indirect) clen += slen;
 8008848:	69bb      	ldr	r3, [r7, #24]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d10c      	bne.n	8008868 <parse_name+0xb0>
 800884e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008850:	69fa      	ldr	r2, [r7, #28]
 8008852:	4413      	add	r3, r2
 8008854:	61fb      	str	r3, [r7, #28]

		while (slen-- != 0) *buf++ = (char)*cp++;
 8008856:	e007      	b.n	8008868 <parse_name+0xb0>
 8008858:	6a3a      	ldr	r2, [r7, #32]
 800885a:	1c53      	adds	r3, r2, #1
 800885c:	623b      	str	r3, [r7, #32]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	1c59      	adds	r1, r3, #1
 8008862:	6079      	str	r1, [r7, #4]
 8008864:	7812      	ldrb	r2, [r2, #0]
 8008866:	701a      	strb	r2, [r3, #0]
 8008868:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800886a:	1e5a      	subs	r2, r3, #1
 800886c:	84fa      	strh	r2, [r7, #38]	; 0x26
 800886e:	2b00      	cmp	r3, #0
 8008870:	d1f2      	bne.n	8008858 <parse_name+0xa0>
		*buf++ = '.';
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	1c5a      	adds	r2, r3, #1
 8008876:	607a      	str	r2, [r7, #4]
 8008878:	222e      	movs	r2, #46	; 0x2e
 800887a:	701a      	strb	r2, [r3, #0]
		nseg++;
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	3301      	adds	r3, #1
 8008880:	617b      	str	r3, [r7, #20]
		slen = *cp++;	/* Length of this segment */
 8008882:	e7a8      	b.n	80087d6 <parse_name+0x1e>
			break;
 8008884:	bf00      	nop
	}

	if (nseg == 0)
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d10a      	bne.n	80088a2 <parse_name+0xea>
	{
		/* Root name; represent as single dot */
		*buf++ = '.';
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	1c5a      	adds	r2, r3, #1
 8008890:	607a      	str	r2, [r7, #4]
 8008892:	222e      	movs	r2, #46	; 0x2e
 8008894:	701a      	strb	r2, [r3, #0]
		len--;
 8008896:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800889a:	b29b      	uxth	r3, r3
 800889c:	3b01      	subs	r3, #1
 800889e:	b29b      	uxth	r3, r3
 80088a0:	807b      	strh	r3, [r7, #2]
	}

	*buf++ = '\0';
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	1c5a      	adds	r2, r3, #1
 80088a6:	607a      	str	r2, [r7, #4]
 80088a8:	2200      	movs	r2, #0
 80088aa:	701a      	strb	r2, [r3, #0]
	len--;
 80088ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	3b01      	subs	r3, #1
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	807b      	strh	r3, [r7, #2]

	return clen;	/* Length of compressed message */
 80088b8:	69fb      	ldr	r3, [r7, #28]
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	372c      	adds	r7, #44	; 0x2c
 80088be:	46bd      	mov	sp, r7
 80088c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c4:	4770      	bx	lr

080088c6 <dns_question>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the qeustion record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_question(uint8_t * msg, uint8_t * cp)
{
 80088c6:	b580      	push	{r7, lr}
 80088c8:	b0b4      	sub	sp, #208	; 0xd0
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
 80088ce:	6039      	str	r1, [r7, #0]
	int len;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 80088d0:	f107 020c 	add.w	r2, r7, #12
 80088d4:	23c0      	movs	r3, #192	; 0xc0
 80088d6:	6839      	ldr	r1, [r7, #0]
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f7ff ff6d 	bl	80087b8 <parse_name>
 80088de:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc


	if (len == -1) return 0;
 80088e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80088e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ea:	d101      	bne.n	80088f0 <dns_question+0x2a>
 80088ec:	2300      	movs	r3, #0
 80088ee:	e00b      	b.n	8008908 <dns_question+0x42>

	cp += len;
 80088f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80088f4:	683a      	ldr	r2, [r7, #0]
 80088f6:	4413      	add	r3, r2
 80088f8:	603b      	str	r3, [r7, #0]
	cp += 2;		/* type */
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	3302      	adds	r3, #2
 80088fe:	603b      	str	r3, [r7, #0]
	cp += 2;		/* class */
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	3302      	adds	r3, #2
 8008904:	603b      	str	r3, [r7, #0]

	return cp;
 8008906:	683b      	ldr	r3, [r7, #0]
}
 8008908:	4618      	mov	r0, r3
 800890a:	37d0      	adds	r7, #208	; 0xd0
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <dns_answer>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the answer record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_answer(uint8_t * msg, uint8_t * cp, uint8_t * ip_from_dns)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b0b6      	sub	sp, #216	; 0xd8
 8008914:	af00      	add	r7, sp, #0
 8008916:	60f8      	str	r0, [r7, #12]
 8008918:	60b9      	str	r1, [r7, #8]
 800891a:	607a      	str	r2, [r7, #4]
	int len, type;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 800891c:	f107 0210 	add.w	r2, r7, #16
 8008920:	23c0      	movs	r3, #192	; 0xc0
 8008922:	68b9      	ldr	r1, [r7, #8]
 8008924:	68f8      	ldr	r0, [r7, #12]
 8008926:	f7ff ff47 	bl	80087b8 <parse_name>
 800892a:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

	if (len == -1) return 0;
 800892e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008936:	d101      	bne.n	800893c <dns_answer+0x2c>
 8008938:	2300      	movs	r3, #0
 800893a:	e0dd      	b.n	8008af8 <dns_answer+0x1e8>

	cp += len;
 800893c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008940:	68ba      	ldr	r2, [r7, #8]
 8008942:	4413      	add	r3, r2
 8008944:	60bb      	str	r3, [r7, #8]
	type = get16(cp);
 8008946:	68b8      	ldr	r0, [r7, #8]
 8008948:	f7ff ff03 	bl	8008752 <get16>
 800894c:	4603      	mov	r3, r0
 800894e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	cp += 2;		/* type */
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	3302      	adds	r3, #2
 8008956:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* class */
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	3302      	adds	r3, #2
 800895c:	60bb      	str	r3, [r7, #8]
	cp += 4;		/* ttl */
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	3304      	adds	r3, #4
 8008962:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* len */
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	3302      	adds	r3, #2
 8008968:	60bb      	str	r3, [r7, #8]


	switch (type)
 800896a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800896e:	3b01      	subs	r3, #1
 8008970:	2b0f      	cmp	r3, #15
 8008972:	f200 80bf 	bhi.w	8008af4 <dns_answer+0x1e4>
 8008976:	a201      	add	r2, pc, #4	; (adr r2, 800897c <dns_answer+0x6c>)
 8008978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800897c:	080089bd 	.word	0x080089bd
 8008980:	080089f5 	.word	0x080089f5
 8008984:	08008af5 	.word	0x08008af5
 8008988:	08008af5 	.word	0x08008af5
 800898c:	080089f5 	.word	0x080089f5
 8008990:	08008a81 	.word	0x08008a81
 8008994:	080089f5 	.word	0x080089f5
 8008998:	080089f5 	.word	0x080089f5
 800899c:	080089f5 	.word	0x080089f5
 80089a0:	08008af5 	.word	0x08008af5
 80089a4:	08008af5 	.word	0x08008af5
 80089a8:	080089f5 	.word	0x080089f5
 80089ac:	08008a21 	.word	0x08008a21
 80089b0:	08008af5 	.word	0x08008af5
 80089b4:	08008a4f 	.word	0x08008a4f
 80089b8:	08008af5 	.word	0x08008af5
	{
	case TYPE_A:
		/* Just read the address directly into the structure */
		ip_from_dns[0] = *cp++;
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	1c5a      	adds	r2, r3, #1
 80089c0:	60ba      	str	r2, [r7, #8]
 80089c2:	781a      	ldrb	r2, [r3, #0]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	701a      	strb	r2, [r3, #0]
		ip_from_dns[1] = *cp++;
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	1c5a      	adds	r2, r3, #1
 80089cc:	60ba      	str	r2, [r7, #8]
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	3201      	adds	r2, #1
 80089d2:	781b      	ldrb	r3, [r3, #0]
 80089d4:	7013      	strb	r3, [r2, #0]
		ip_from_dns[2] = *cp++;
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	1c5a      	adds	r2, r3, #1
 80089da:	60ba      	str	r2, [r7, #8]
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	3202      	adds	r2, #2
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	7013      	strb	r3, [r2, #0]
		ip_from_dns[3] = *cp++;
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	1c5a      	adds	r2, r3, #1
 80089e8:	60ba      	str	r2, [r7, #8]
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	3203      	adds	r2, #3
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	7013      	strb	r3, [r2, #0]
		break;
 80089f2:	e080      	b.n	8008af6 <dns_answer+0x1e6>
	case TYPE_MR:
	case TYPE_NS:
	case TYPE_PTR:
		/* These types all consist of a single domain name */
		/* convert it to ascii format */
		len = parse_name(msg, cp, name, MAXCNAME);
 80089f4:	f107 0210 	add.w	r2, r7, #16
 80089f8:	23c0      	movs	r3, #192	; 0xc0
 80089fa:	68b9      	ldr	r1, [r7, #8]
 80089fc:	68f8      	ldr	r0, [r7, #12]
 80089fe:	f7ff fedb 	bl	80087b8 <parse_name>
 8008a02:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 8008a06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a0e:	d101      	bne.n	8008a14 <dns_answer+0x104>
 8008a10:	2300      	movs	r3, #0
 8008a12:	e071      	b.n	8008af8 <dns_answer+0x1e8>

		cp += len;
 8008a14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008a18:	68ba      	ldr	r2, [r7, #8]
 8008a1a:	4413      	add	r3, r2
 8008a1c:	60bb      	str	r3, [r7, #8]
		break;
 8008a1e:	e06a      	b.n	8008af6 <dns_answer+0x1e6>
	case TYPE_HINFO:
		len = *cp++;
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	1c5a      	adds	r2, r3, #1
 8008a24:	60ba      	str	r2, [r7, #8]
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		cp += len;
 8008a2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008a30:	68ba      	ldr	r2, [r7, #8]
 8008a32:	4413      	add	r3, r2
 8008a34:	60bb      	str	r3, [r7, #8]

		len = *cp++;
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	1c5a      	adds	r2, r3, #1
 8008a3a:	60ba      	str	r2, [r7, #8]
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		cp += len;
 8008a42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008a46:	68ba      	ldr	r2, [r7, #8]
 8008a48:	4413      	add	r3, r2
 8008a4a:	60bb      	str	r3, [r7, #8]
		break;
 8008a4c:	e053      	b.n	8008af6 <dns_answer+0x1e6>
	case TYPE_MX:
		cp += 2;
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	3302      	adds	r3, #2
 8008a52:	60bb      	str	r3, [r7, #8]
		/* Get domain name of exchanger */
		len = parse_name(msg, cp, name, MAXCNAME);
 8008a54:	f107 0210 	add.w	r2, r7, #16
 8008a58:	23c0      	movs	r3, #192	; 0xc0
 8008a5a:	68b9      	ldr	r1, [r7, #8]
 8008a5c:	68f8      	ldr	r0, [r7, #12]
 8008a5e:	f7ff feab 	bl	80087b8 <parse_name>
 8008a62:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 8008a66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a6e:	d101      	bne.n	8008a74 <dns_answer+0x164>
 8008a70:	2300      	movs	r3, #0
 8008a72:	e041      	b.n	8008af8 <dns_answer+0x1e8>

		cp += len;
 8008a74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008a78:	68ba      	ldr	r2, [r7, #8]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	60bb      	str	r3, [r7, #8]
		break;
 8008a7e:	e03a      	b.n	8008af6 <dns_answer+0x1e6>
	case TYPE_SOA:
		/* Get domain name of name server */
		len = parse_name(msg, cp, name, MAXCNAME);
 8008a80:	f107 0210 	add.w	r2, r7, #16
 8008a84:	23c0      	movs	r3, #192	; 0xc0
 8008a86:	68b9      	ldr	r1, [r7, #8]
 8008a88:	68f8      	ldr	r0, [r7, #12]
 8008a8a:	f7ff fe95 	bl	80087b8 <parse_name>
 8008a8e:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 8008a92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a9a:	d101      	bne.n	8008aa0 <dns_answer+0x190>
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	e02b      	b.n	8008af8 <dns_answer+0x1e8>

		cp += len;
 8008aa0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008aa4:	68ba      	ldr	r2, [r7, #8]
 8008aa6:	4413      	add	r3, r2
 8008aa8:	60bb      	str	r3, [r7, #8]

		/* Get domain name of responsible person */
		len = parse_name(msg, cp, name, MAXCNAME);
 8008aaa:	f107 0210 	add.w	r2, r7, #16
 8008aae:	23c0      	movs	r3, #192	; 0xc0
 8008ab0:	68b9      	ldr	r1, [r7, #8]
 8008ab2:	68f8      	ldr	r0, [r7, #12]
 8008ab4:	f7ff fe80 	bl	80087b8 <parse_name>
 8008ab8:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 8008abc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ac4:	d101      	bne.n	8008aca <dns_answer+0x1ba>
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	e016      	b.n	8008af8 <dns_answer+0x1e8>

		cp += len;
 8008aca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008ace:	68ba      	ldr	r2, [r7, #8]
 8008ad0:	4413      	add	r3, r2
 8008ad2:	60bb      	str	r3, [r7, #8]

		cp += 4;
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	3304      	adds	r3, #4
 8008ad8:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	3304      	adds	r3, #4
 8008ade:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	3304      	adds	r3, #4
 8008ae4:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	3304      	adds	r3, #4
 8008aea:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	3304      	adds	r3, #4
 8008af0:	60bb      	str	r3, [r7, #8]
		break;
 8008af2:	e000      	b.n	8008af6 <dns_answer+0x1e6>
	case TYPE_TXT:
		/* Just stash */
		break;
	default:
		/* Ignore */
		break;
 8008af4:	bf00      	nop
	}

	return cp;
 8008af6:	68bb      	ldr	r3, [r7, #8]
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	37d8      	adds	r7, #216	; 0xd8
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <parseDNSMSG>:
 * Returns     : -1 - Domain name lenght is too big
 *                0 - Fail (Timout or parse error)
 *                1 - Success,
 */
int8_t parseDNSMSG(struct dhdr * pdhdr, uint8_t * pbuf, uint8_t * ip_from_dns)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b088      	sub	sp, #32
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	60b9      	str	r1, [r7, #8]
 8008b0a:	607a      	str	r2, [r7, #4]
	uint16_t tmp;
	uint16_t i;
	uint8_t * msg;
	uint8_t * cp;

	msg = pbuf;
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	617b      	str	r3, [r7, #20]
	memset(pdhdr, 0, sizeof(*pdhdr));
 8008b10:	2212      	movs	r2, #18
 8008b12:	2100      	movs	r1, #0
 8008b14:	68f8      	ldr	r0, [r7, #12]
 8008b16:	f001 ff55 	bl	800a9c4 <memset>

	pdhdr->id = get16(&msg[0]);
 8008b1a:	6978      	ldr	r0, [r7, #20]
 8008b1c:	f7ff fe19 	bl	8008752 <get16>
 8008b20:	4603      	mov	r3, r0
 8008b22:	461a      	mov	r2, r3
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	801a      	strh	r2, [r3, #0]
	tmp = get16(&msg[2]);
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	3302      	adds	r3, #2
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f7ff fe10 	bl	8008752 <get16>
 8008b32:	4603      	mov	r3, r0
 8008b34:	827b      	strh	r3, [r7, #18]
	if (tmp & 0x8000) pdhdr->qr = 1;
 8008b36:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	da02      	bge.n	8008b44 <parseDNSMSG+0x44>
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2201      	movs	r2, #1
 8008b42:	709a      	strb	r2, [r3, #2]

	pdhdr->opcode = (tmp >> 11) & 0xf;
 8008b44:	8a7b      	ldrh	r3, [r7, #18]
 8008b46:	0adb      	lsrs	r3, r3, #11
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	b2db      	uxtb	r3, r3
 8008b4c:	f003 030f 	and.w	r3, r3, #15
 8008b50:	b2da      	uxtb	r2, r3
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	70da      	strb	r2, [r3, #3]

	if (tmp & 0x0400) pdhdr->aa = 1;
 8008b56:	8a7b      	ldrh	r3, [r7, #18]
 8008b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d002      	beq.n	8008b66 <parseDNSMSG+0x66>
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2201      	movs	r2, #1
 8008b64:	711a      	strb	r2, [r3, #4]
	if (tmp & 0x0200) pdhdr->tc = 1;
 8008b66:	8a7b      	ldrh	r3, [r7, #18]
 8008b68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d002      	beq.n	8008b76 <parseDNSMSG+0x76>
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2201      	movs	r2, #1
 8008b74:	715a      	strb	r2, [r3, #5]
	if (tmp & 0x0100) pdhdr->rd = 1;
 8008b76:	8a7b      	ldrh	r3, [r7, #18]
 8008b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d002      	beq.n	8008b86 <parseDNSMSG+0x86>
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2201      	movs	r2, #1
 8008b84:	719a      	strb	r2, [r3, #6]
	if (tmp & 0x0080) pdhdr->ra = 1;
 8008b86:	8a7b      	ldrh	r3, [r7, #18]
 8008b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d002      	beq.n	8008b96 <parseDNSMSG+0x96>
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2201      	movs	r2, #1
 8008b94:	71da      	strb	r2, [r3, #7]

	pdhdr->rcode = tmp & 0xf;
 8008b96:	8a7b      	ldrh	r3, [r7, #18]
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	f003 030f 	and.w	r3, r3, #15
 8008b9e:	b2da      	uxtb	r2, r3
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	721a      	strb	r2, [r3, #8]
	pdhdr->qdcount = get16(&msg[4]);
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	3304      	adds	r3, #4
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f7ff fdd2 	bl	8008752 <get16>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	815a      	strh	r2, [r3, #10]
	pdhdr->ancount = get16(&msg[6]);
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	3306      	adds	r3, #6
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f7ff fdc9 	bl	8008752 <get16>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	819a      	strh	r2, [r3, #12]
	pdhdr->nscount = get16(&msg[8]);
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	3308      	adds	r3, #8
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f7ff fdc0 	bl	8008752 <get16>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	81da      	strh	r2, [r3, #14]
	pdhdr->arcount = get16(&msg[10]);
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	330a      	adds	r3, #10
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7ff fdb7 	bl	8008752 <get16>
 8008be4:	4603      	mov	r3, r0
 8008be6:	461a      	mov	r2, r3
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	821a      	strh	r2, [r3, #16]


	/* Now parse the variable length sections */
	cp = &msg[12];
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	330c      	adds	r3, #12
 8008bf0:	61bb      	str	r3, [r7, #24]

	/* Question section */
	for (i = 0; i < pdhdr->qdcount; i++)
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	83fb      	strh	r3, [r7, #30]
 8008bf6:	e00d      	b.n	8008c14 <parseDNSMSG+0x114>
	{
		cp = dns_question(msg, cp);
 8008bf8:	69b9      	ldr	r1, [r7, #24]
 8008bfa:	6978      	ldr	r0, [r7, #20]
 8008bfc:	f7ff fe63 	bl	80088c6 <dns_question>
 8008c00:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 8008c02:	69bb      	ldr	r3, [r7, #24]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d102      	bne.n	8008c0e <parseDNSMSG+0x10e>
 8008c08:	f04f 33ff 	mov.w	r3, #4294967295
 8008c0c:	e03b      	b.n	8008c86 <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->qdcount; i++)
 8008c0e:	8bfb      	ldrh	r3, [r7, #30]
 8008c10:	3301      	adds	r3, #1
 8008c12:	83fb      	strh	r3, [r7, #30]
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	895b      	ldrh	r3, [r3, #10]
 8008c18:	8bfa      	ldrh	r2, [r7, #30]
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d3ec      	bcc.n	8008bf8 <parseDNSMSG+0xf8>
	}

	/* Answer section */
	for (i = 0; i < pdhdr->ancount; i++)
 8008c1e:	2300      	movs	r3, #0
 8008c20:	83fb      	strh	r3, [r7, #30]
 8008c22:	e00e      	b.n	8008c42 <parseDNSMSG+0x142>
	{
		cp = dns_answer(msg, cp, ip_from_dns);
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	69b9      	ldr	r1, [r7, #24]
 8008c28:	6978      	ldr	r0, [r7, #20]
 8008c2a:	f7ff fe71 	bl	8008910 <dns_answer>
 8008c2e:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 8008c30:	69bb      	ldr	r3, [r7, #24]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d102      	bne.n	8008c3c <parseDNSMSG+0x13c>
 8008c36:	f04f 33ff 	mov.w	r3, #4294967295
 8008c3a:	e024      	b.n	8008c86 <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->ancount; i++)
 8008c3c:	8bfb      	ldrh	r3, [r7, #30]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	83fb      	strh	r3, [r7, #30]
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	899b      	ldrh	r3, [r3, #12]
 8008c46:	8bfa      	ldrh	r2, [r7, #30]
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d3eb      	bcc.n	8008c24 <parseDNSMSG+0x124>
	}

	/* Name server (authority) section */
	for (i = 0; i < pdhdr->nscount; i++)
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	83fb      	strh	r3, [r7, #30]
 8008c50:	e002      	b.n	8008c58 <parseDNSMSG+0x158>
 8008c52:	8bfb      	ldrh	r3, [r7, #30]
 8008c54:	3301      	adds	r3, #1
 8008c56:	83fb      	strh	r3, [r7, #30]
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	89db      	ldrh	r3, [r3, #14]
 8008c5c:	8bfa      	ldrh	r2, [r7, #30]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d3f7      	bcc.n	8008c52 <parseDNSMSG+0x152>
	{
		;
	}

	/* Additional section */
	for (i = 0; i < pdhdr->arcount; i++)
 8008c62:	2300      	movs	r3, #0
 8008c64:	83fb      	strh	r3, [r7, #30]
 8008c66:	e002      	b.n	8008c6e <parseDNSMSG+0x16e>
 8008c68:	8bfb      	ldrh	r3, [r7, #30]
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	83fb      	strh	r3, [r7, #30]
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	8a1b      	ldrh	r3, [r3, #16]
 8008c72:	8bfa      	ldrh	r2, [r7, #30]
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d3f7      	bcc.n	8008c68 <parseDNSMSG+0x168>
	{
		;
	}

	if(pdhdr->rcode == 0) return 1;		// No error
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	7a1b      	ldrb	r3, [r3, #8]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d101      	bne.n	8008c84 <parseDNSMSG+0x184>
 8008c80:	2301      	movs	r3, #1
 8008c82:	e000      	b.n	8008c86 <parseDNSMSG+0x186>
	else return 0;
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3720      	adds	r7, #32
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
	...

08008c90 <dns_makequery>:
 *               buf  - is a pointer to the buffer for DNS message.
 *               len  - is the MAX. size of buffer.
 * Returns     : the pointer to the DNS message.
 */
int16_t dns_makequery(uint16_t op, char * name, uint8_t * buf, uint16_t len)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b0b8      	sub	sp, #224	; 0xe0
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	60b9      	str	r1, [r7, #8]
 8008c98:	607a      	str	r2, [r7, #4]
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	81fb      	strh	r3, [r7, #14]
 8008ca0:	4613      	mov	r3, r2
 8008ca2:	81bb      	strh	r3, [r7, #12]
	char sname[MAXCNAME];
	char *dname;
	uint16_t p;
	uint16_t dlen;

	cp = buf;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

	DNS_MSGID++;
 8008caa:	4b57      	ldr	r3, [pc, #348]	; (8008e08 <dns_makequery+0x178>)
 8008cac:	881b      	ldrh	r3, [r3, #0]
 8008cae:	3301      	adds	r3, #1
 8008cb0:	b29a      	uxth	r2, r3
 8008cb2:	4b55      	ldr	r3, [pc, #340]	; (8008e08 <dns_makequery+0x178>)
 8008cb4:	801a      	strh	r2, [r3, #0]
	cp = put16(cp, DNS_MSGID);
 8008cb6:	4b54      	ldr	r3, [pc, #336]	; (8008e08 <dns_makequery+0x178>)
 8008cb8:	881b      	ldrh	r3, [r3, #0]
 8008cba:	4619      	mov	r1, r3
 8008cbc:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8008cc0:	f7ff fd5f 	bl	8008782 <put16>
 8008cc4:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	p = (op << 11) | 0x0100;			/* Recursion desired */
 8008cc8:	89fb      	ldrh	r3, [r7, #14]
 8008cca:	02db      	lsls	r3, r3, #11
 8008ccc:	b21b      	sxth	r3, r3
 8008cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cd2:	b21b      	sxth	r3, r3
 8008cd4:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
	cp = put16(cp, p);
 8008cd8:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8008cdc:	4619      	mov	r1, r3
 8008cde:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8008ce2:	f7ff fd4e 	bl	8008782 <put16>
 8008ce6:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 1);
 8008cea:	2101      	movs	r1, #1
 8008cec:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8008cf0:	f7ff fd47 	bl	8008782 <put16>
 8008cf4:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 8008cf8:	2100      	movs	r1, #0
 8008cfa:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8008cfe:	f7ff fd40 	bl	8008782 <put16>
 8008d02:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 8008d06:	2100      	movs	r1, #0
 8008d08:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8008d0c:	f7ff fd39 	bl	8008782 <put16>
 8008d10:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 8008d14:	2100      	movs	r1, #0
 8008d16:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8008d1a:	f7ff fd32 	bl	8008782 <put16>
 8008d1e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

	strcpy(sname, name);
 8008d22:	f107 0310 	add.w	r3, r7, #16
 8008d26:	68b9      	ldr	r1, [r7, #8]
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f002 f841 	bl	800adb0 <strcpy>
	dname = sname;
 8008d2e:	f107 0310 	add.w	r3, r7, #16
 8008d32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	dlen = strlen(dname);
 8008d36:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8008d3a:	f7f7 fa71 	bl	8000220 <strlen>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
	for (;;)
	{
		/* Look for next dot */
		cp1 = strchr(dname, '.');
 8008d44:	212e      	movs	r1, #46	; 0x2e
 8008d46:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8008d4a:	f002 f824 	bl	800ad96 <strchr>
 8008d4e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0

		if (cp1 != NULL) len = cp1 - dname;	/* More to come */
 8008d52:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d006      	beq.n	8008d68 <dns_makequery+0xd8>
 8008d5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008d5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008d62:	1ad3      	subs	r3, r2, r3
 8008d64:	81bb      	strh	r3, [r7, #12]
 8008d66:	e002      	b.n	8008d6e <dns_makequery+0xde>
		else len = dlen;			/* Last component */
 8008d68:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8008d6c:	81bb      	strh	r3, [r7, #12]

		*cp++ = len;				/* Write length of component */
 8008d6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d72:	1c5a      	adds	r2, r3, #1
 8008d74:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008d78:	89ba      	ldrh	r2, [r7, #12]
 8008d7a:	b2d2      	uxtb	r2, r2
 8008d7c:	701a      	strb	r2, [r3, #0]
		if (len == 0) break;
 8008d7e:	89bb      	ldrh	r3, [r7, #12]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d029      	beq.n	8008dd8 <dns_makequery+0x148>

		/* Copy component up to (but not including) dot */
		strncpy((char *)cp, dname, len);
 8008d84:	89bb      	ldrh	r3, [r7, #12]
 8008d86:	461a      	mov	r2, r3
 8008d88:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8008d8c:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8008d90:	f002 f82a 	bl	800ade8 <strncpy>
		cp += len;
 8008d94:	89bb      	ldrh	r3, [r7, #12]
 8008d96:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008d9a:	4413      	add	r3, r2
 8008d9c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		if (cp1 == NULL)
 8008da0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d107      	bne.n	8008db8 <dns_makequery+0x128>
		{
			*cp++ = 0;			/* Last one; write null and finish */
 8008da8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008dac:	1c5a      	adds	r2, r3, #1
 8008dae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008db2:	2200      	movs	r2, #0
 8008db4:	701a      	strb	r2, [r3, #0]
			break;
 8008db6:	e010      	b.n	8008dda <dns_makequery+0x14a>
		}
		dname += len+1;
 8008db8:	89bb      	ldrh	r3, [r7, #12]
 8008dba:	3301      	adds	r3, #1
 8008dbc:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8008dc0:	4413      	add	r3, r2
 8008dc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		dlen -= len+1;
 8008dc6:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 8008dca:	89bb      	ldrh	r3, [r7, #12]
 8008dcc:	1ad3      	subs	r3, r2, r3
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	3b01      	subs	r3, #1
 8008dd2:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
		cp1 = strchr(dname, '.');
 8008dd6:	e7b5      	b.n	8008d44 <dns_makequery+0xb4>
		if (len == 0) break;
 8008dd8:	bf00      	nop
	}

	cp = put16(cp, 0x0001);				/* type */
 8008dda:	2101      	movs	r1, #1
 8008ddc:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8008de0:	f7ff fccf 	bl	8008782 <put16>
 8008de4:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0x0001);				/* class */
 8008de8:	2101      	movs	r1, #1
 8008dea:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8008dee:	f7ff fcc8 	bl	8008782 <put16>
 8008df2:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

	return ((int16_t)((uint32_t)(cp) - (uint32_t)(buf)));
 8008df6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	1ad3      	subs	r3, r2, r3
 8008dfe:	b21b      	sxth	r3, r3
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	37e0      	adds	r7, #224	; 0xe0
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}
 8008e08:	20001ad2 	.word	0x20001ad2

08008e0c <check_DNS_timeout>:
 * Returns     : -1 - timeout occurred, 0 - timer over, but no timeout, 1 - no timer over, no timeout occur
 * Note        : timeout : retry count and timer both over.
 */

int8_t check_DNS_timeout(void)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	af00      	add	r7, sp, #0

	if(dns_1s_tick >= DNS_WAIT_TIME)
 8008e10:	4b0f      	ldr	r3, [pc, #60]	; (8008e50 <check_DNS_timeout+0x44>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	2b02      	cmp	r3, #2
 8008e16:	d914      	bls.n	8008e42 <check_DNS_timeout+0x36>
	{
		dns_1s_tick = 0;
 8008e18:	4b0d      	ldr	r3, [pc, #52]	; (8008e50 <check_DNS_timeout+0x44>)
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	601a      	str	r2, [r3, #0]
		if(retry_count >= MAX_DNS_RETRY) {
 8008e1e:	4b0d      	ldr	r3, [pc, #52]	; (8008e54 <check_DNS_timeout+0x48>)
 8008e20:	781b      	ldrb	r3, [r3, #0]
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d905      	bls.n	8008e32 <check_DNS_timeout+0x26>
			retry_count = 0;
 8008e26:	4b0b      	ldr	r3, [pc, #44]	; (8008e54 <check_DNS_timeout+0x48>)
 8008e28:	2200      	movs	r2, #0
 8008e2a:	701a      	strb	r2, [r3, #0]
			return -1; // timeout occurred
 8008e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8008e30:	e008      	b.n	8008e44 <check_DNS_timeout+0x38>
		}
		retry_count++;
 8008e32:	4b08      	ldr	r3, [pc, #32]	; (8008e54 <check_DNS_timeout+0x48>)
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	3301      	adds	r3, #1
 8008e38:	b2da      	uxtb	r2, r3
 8008e3a:	4b06      	ldr	r3, [pc, #24]	; (8008e54 <check_DNS_timeout+0x48>)
 8008e3c:	701a      	strb	r2, [r3, #0]
		return 0; // timer over, but no timeout
 8008e3e:	2300      	movs	r3, #0
 8008e40:	e000      	b.n	8008e44 <check_DNS_timeout+0x38>
	}

	return 1; // no timer over, no timeout occur
 8008e42:	2301      	movs	r3, #1
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	46bd      	mov	sp, r7
 8008e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4c:	4770      	bx	lr
 8008e4e:	bf00      	nop
 8008e50:	20001ad4 	.word	0x20001ad4
 8008e54:	20001ad8 	.word	0x20001ad8

08008e58 <DNS_init>:



/* DNS CLIENT INIT */
void DNS_init(uint8_t s, uint8_t * buf)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b083      	sub	sp, #12
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	4603      	mov	r3, r0
 8008e60:	6039      	str	r1, [r7, #0]
 8008e62:	71fb      	strb	r3, [r7, #7]
	DNS_SOCKET = s; // SOCK_DNS
 8008e64:	4a07      	ldr	r2, [pc, #28]	; (8008e84 <DNS_init+0x2c>)
 8008e66:	79fb      	ldrb	r3, [r7, #7]
 8008e68:	7013      	strb	r3, [r2, #0]
	pDNSMSG = buf; // User's shared buffer
 8008e6a:	4a07      	ldr	r2, [pc, #28]	; (8008e88 <DNS_init+0x30>)
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	6013      	str	r3, [r2, #0]
	DNS_MSGID = DNS_MSG_ID;
 8008e70:	4b06      	ldr	r3, [pc, #24]	; (8008e8c <DNS_init+0x34>)
 8008e72:	f241 1222 	movw	r2, #4386	; 0x1122
 8008e76:	801a      	strh	r2, [r3, #0]
}
 8008e78:	bf00      	nop
 8008e7a:	370c      	adds	r7, #12
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr
 8008e84:	20001ad0 	.word	0x20001ad0
 8008e88:	20001acc 	.word	0x20001acc
 8008e8c:	20001ad2 	.word	0x20001ad2

08008e90 <DNS_run>:

/* DNS CLIENT RUN */
int8_t DNS_run(uint8_t * dns_ip, uint8_t * name, uint8_t * ip_from_dns)
{
 8008e90:	b5b0      	push	{r4, r5, r7, lr}
 8008e92:	b090      	sub	sp, #64	; 0x40
 8008e94:	af04      	add	r7, sp, #16
 8008e96:	60f8      	str	r0, [r7, #12]
 8008e98:	60b9      	str	r1, [r7, #8]
 8008e9a:	607a      	str	r2, [r7, #4]
	struct dhdr dhp;
	uint8_t ip[4];
	uint16_t len, port;
	int8_t ret_check_timeout;

	retry_count = 0;
 8008e9c:	4b5a      	ldr	r3, [pc, #360]	; (8009008 <DNS_run+0x178>)
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	701a      	strb	r2, [r3, #0]
	dns_1s_tick = 0;
 8008ea2:	4b5a      	ldr	r3, [pc, #360]	; (800900c <DNS_run+0x17c>)
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	601a      	str	r2, [r3, #0]

   // Socket open
   socket(DNS_SOCKET, Sn_MR_UDP, 0, 0);
 8008ea8:	4b59      	ldr	r3, [pc, #356]	; (8009010 <DNS_run+0x180>)
 8008eaa:	7818      	ldrb	r0, [r3, #0]
 8008eac:	2300      	movs	r3, #0
 8008eae:	2200      	movs	r2, #0
 8008eb0:	2102      	movs	r1, #2
 8008eb2:	f7fc fb5b 	bl	800556c <socket>

#ifdef _DNS_DEBUG_
	printf("> DNS Query to DNS Server : %d.%d.%d.%d\r\n", dns_ip[0], dns_ip[1], dns_ip[2], dns_ip[3]);
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	4619      	mov	r1, r3
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	781b      	ldrb	r3, [r3, #0]
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	3302      	adds	r3, #2
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	4618      	mov	r0, r3
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	3303      	adds	r3, #3
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	9300      	str	r3, [sp, #0]
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	484f      	ldr	r0, [pc, #316]	; (8009014 <DNS_run+0x184>)
 8008ed8:	f001 fe5c 	bl	800ab94 <iprintf>
#endif

	len = dns_makequery(0, (char *)name, pDNSMSG, MAX_DNS_BUF_SIZE);
 8008edc:	4b4e      	ldr	r3, [pc, #312]	; (8009018 <DNS_run+0x188>)
 8008ede:	681a      	ldr	r2, [r3, #0]
 8008ee0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ee4:	68b9      	ldr	r1, [r7, #8]
 8008ee6:	2000      	movs	r0, #0
 8008ee8:	f7ff fed2 	bl	8008c90 <dns_makequery>
 8008eec:	4603      	mov	r3, r0
 8008eee:	85fb      	strh	r3, [r7, #46]	; 0x2e
	sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 8008ef0:	4b47      	ldr	r3, [pc, #284]	; (8009010 <DNS_run+0x180>)
 8008ef2:	7818      	ldrb	r0, [r3, #0]
 8008ef4:	4b48      	ldr	r3, [pc, #288]	; (8009018 <DNS_run+0x188>)
 8008ef6:	6819      	ldr	r1, [r3, #0]
 8008ef8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008efa:	2335      	movs	r3, #53	; 0x35
 8008efc:	9300      	str	r3, [sp, #0]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f7fc ffba 	bl	8005e78 <sendto>

	while (1)
	{
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 8008f04:	4b42      	ldr	r3, [pc, #264]	; (8009010 <DNS_run+0x180>)
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f7fc f9e4 	bl	80052d6 <getSn_RX_RSR>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008f12:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d03d      	beq.n	8008f94 <DNS_run+0x104>
		{
			if (len > MAX_DNS_BUF_SIZE) len = MAX_DNS_BUF_SIZE;
 8008f18:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008f1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f1e:	d902      	bls.n	8008f26 <DNS_run+0x96>
 8008f20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f24:	85fb      	strh	r3, [r7, #46]	; 0x2e
			len = recvfrom(DNS_SOCKET, pDNSMSG, len, ip, &port);
 8008f26:	4b3a      	ldr	r3, [pc, #232]	; (8009010 <DNS_run+0x180>)
 8008f28:	7818      	ldrb	r0, [r3, #0]
 8008f2a:	4b3b      	ldr	r3, [pc, #236]	; (8009018 <DNS_run+0x188>)
 8008f2c:	6819      	ldr	r1, [r3, #0]
 8008f2e:	f107 0414 	add.w	r4, r7, #20
 8008f32:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008f34:	f107 0312 	add.w	r3, r7, #18
 8008f38:	9300      	str	r3, [sp, #0]
 8008f3a:	4623      	mov	r3, r4
 8008f3c:	f7fd f8d2 	bl	80060e4 <recvfrom>
 8008f40:	4603      	mov	r3, r0
 8008f42:	85fb      	strh	r3, [r7, #46]	; 0x2e
      #ifdef _DNS_DEBUG_
	      printf("> Receive DNS message from %d.%d.%d.%d(%d). len = %d\r\n", ip[0], ip[1], ip[2], ip[3],port,len);
 8008f44:	7d3b      	ldrb	r3, [r7, #20]
 8008f46:	4618      	mov	r0, r3
 8008f48:	7d7b      	ldrb	r3, [r7, #21]
 8008f4a:	461c      	mov	r4, r3
 8008f4c:	7dbb      	ldrb	r3, [r7, #22]
 8008f4e:	461d      	mov	r5, r3
 8008f50:	7dfb      	ldrb	r3, [r7, #23]
 8008f52:	461a      	mov	r2, r3
 8008f54:	8a7b      	ldrh	r3, [r7, #18]
 8008f56:	4619      	mov	r1, r3
 8008f58:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008f5a:	9302      	str	r3, [sp, #8]
 8008f5c:	9101      	str	r1, [sp, #4]
 8008f5e:	9200      	str	r2, [sp, #0]
 8008f60:	462b      	mov	r3, r5
 8008f62:	4622      	mov	r2, r4
 8008f64:	4601      	mov	r1, r0
 8008f66:	482d      	ldr	r0, [pc, #180]	; (800901c <DNS_run+0x18c>)
 8008f68:	f001 fe14 	bl	800ab94 <iprintf>
      #endif
         ret = parseDNSMSG(&dhp, pDNSMSG, ip_from_dns);
 8008f6c:	4b2a      	ldr	r3, [pc, #168]	; (8009018 <DNS_run+0x188>)
 8008f6e:	6819      	ldr	r1, [r3, #0]
 8008f70:	f107 0318 	add.w	r3, r7, #24
 8008f74:	687a      	ldr	r2, [r7, #4]
 8008f76:	4618      	mov	r0, r3
 8008f78:	f7ff fdc2 	bl	8008b00 <parseDNSMSG>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			break;
 8008f82:	bf00      	nop
			printf("> DNS Timeout\r\n");
#endif
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
		}
	}
	close(DNS_SOCKET);
 8008f84:	4b22      	ldr	r3, [pc, #136]	; (8009010 <DNS_run+0x180>)
 8008f86:	781b      	ldrb	r3, [r3, #0]
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f7fc fc05 	bl	8005798 <close>
	// Return value
	// 0 > :  failed / 1 - success
	return ret;
 8008f8e:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8008f92:	e034      	b.n	8008ffe <DNS_run+0x16e>
		ret_check_timeout = check_DNS_timeout();
 8008f94:	f7ff ff3a 	bl	8008e0c <check_DNS_timeout>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		if (ret_check_timeout < 0) {
 8008f9e:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	da19      	bge.n	8008fda <DNS_run+0x14a>
			printf("> DNS Server is not responding : %d.%d.%d.%d\r\n", dns_ip[0], dns_ip[1], dns_ip[2], dns_ip[3]);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	4619      	mov	r1, r3
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	3301      	adds	r3, #1
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	3302      	adds	r3, #2
 8008fb8:	781b      	ldrb	r3, [r3, #0]
 8008fba:	4618      	mov	r0, r3
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	3303      	adds	r3, #3
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	9300      	str	r3, [sp, #0]
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	4816      	ldr	r0, [pc, #88]	; (8009020 <DNS_run+0x190>)
 8008fc8:	f001 fde4 	bl	800ab94 <iprintf>
			close(DNS_SOCKET);
 8008fcc:	4b10      	ldr	r3, [pc, #64]	; (8009010 <DNS_run+0x180>)
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f7fc fbe1 	bl	8005798 <close>
			return 0; // timeout occurred
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	e011      	b.n	8008ffe <DNS_run+0x16e>
		else if (ret_check_timeout == 0) {
 8008fda:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d190      	bne.n	8008f04 <DNS_run+0x74>
			printf("> DNS Timeout\r\n");
 8008fe2:	4810      	ldr	r0, [pc, #64]	; (8009024 <DNS_run+0x194>)
 8008fe4:	f001 fe5c 	bl	800aca0 <puts>
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 8008fe8:	4b09      	ldr	r3, [pc, #36]	; (8009010 <DNS_run+0x180>)
 8008fea:	7818      	ldrb	r0, [r3, #0]
 8008fec:	4b0a      	ldr	r3, [pc, #40]	; (8009018 <DNS_run+0x188>)
 8008fee:	6819      	ldr	r1, [r3, #0]
 8008ff0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008ff2:	2335      	movs	r3, #53	; 0x35
 8008ff4:	9300      	str	r3, [sp, #0]
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	f7fc ff3e 	bl	8005e78 <sendto>
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 8008ffc:	e782      	b.n	8008f04 <DNS_run+0x74>
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3730      	adds	r7, #48	; 0x30
 8009002:	46bd      	mov	sp, r7
 8009004:	bdb0      	pop	{r4, r5, r7, pc}
 8009006:	bf00      	nop
 8009008:	20001ad8 	.word	0x20001ad8
 800900c:	20001ad4 	.word	0x20001ad4
 8009010:	20001ad0 	.word	0x20001ad0
 8009014:	0800c2ac 	.word	0x0800c2ac
 8009018:	20001acc 	.word	0x20001acc
 800901c:	0800c2d8 	.word	0x0800c2d8
 8009020:	0800c310 	.word	0x0800c310
 8009024:	0800c340 	.word	0x0800c340

08009028 <NewMessageData>:
 * Contributors:
 *    Allan Stockdill-Mander/Ian Craggs - initial API and implementation and/or initial documentation
 *******************************************************************************/
#include "MQTTClient.h"

static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
 8009028:	b480      	push	{r7}
 800902a:	b085      	sub	sp, #20
 800902c:	af00      	add	r7, sp, #0
 800902e:	60f8      	str	r0, [r7, #12]
 8009030:	60b9      	str	r1, [r7, #8]
 8009032:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	68ba      	ldr	r2, [r7, #8]
 8009038:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	601a      	str	r2, [r3, #0]
}
 8009040:	bf00      	nop
 8009042:	3714      	adds	r7, #20
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr

0800904c <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
 800904c:	b480      	push	{r7}
 800904e:	b083      	sub	sp, #12
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800905c:	4293      	cmp	r3, r2
 800905e:	d003      	beq.n	8009068 <getNextPacketId+0x1c>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	3301      	adds	r3, #1
 8009066:	e000      	b.n	800906a <getNextPacketId+0x1e>
 8009068:	2301      	movs	r3, #1
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	6013      	str	r3, [r2, #0]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
}
 8009072:	4618      	mov	r0, r3
 8009074:	370c      	adds	r7, #12
 8009076:	46bd      	mov	sp, r7
 8009078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907c:	4770      	bx	lr

0800907e <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 800907e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009080:	b087      	sub	sp, #28
 8009082:	af00      	add	r7, sp, #0
 8009084:	60f8      	str	r0, [r7, #12]
 8009086:	60b9      	str	r1, [r7, #8]
 8009088:	607a      	str	r2, [r7, #4]
    int rc = FAILURE,
 800908a:	f04f 33ff 	mov.w	r3, #4294967295
 800908e:	617b      	str	r3, [r7, #20]
        sent = 0;
 8009090:	2300      	movs	r3, #0
 8009092:	613b      	str	r3, [r7, #16]

    while (sent < length && !TimerIsExpired(timer))
 8009094:	e018      	b.n	80090c8 <sendPacket+0x4a>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800909a:	689c      	ldr	r4, [r3, #8]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	691a      	ldr	r2, [r3, #16]
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	18d6      	adds	r6, r2, r3
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f000 fcd9 	bl	8009a60 <TimerLeftMS>
 80090ae:	4603      	mov	r3, r0
 80090b0:	68ba      	ldr	r2, [r7, #8]
 80090b2:	4631      	mov	r1, r6
 80090b4:	4628      	mov	r0, r5
 80090b6:	47a0      	blx	r4
 80090b8:	6178      	str	r0, [r7, #20]
        if (rc < 0)  // there was an error writing the data
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	db0e      	blt.n	80090de <sendPacket+0x60>
            break;
        sent += rc;
 80090c0:	693a      	ldr	r2, [r7, #16]
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	4413      	add	r3, r2
 80090c6:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
 80090c8:	693a      	ldr	r2, [r7, #16]
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	429a      	cmp	r2, r3
 80090ce:	da07      	bge.n	80090e0 <sendPacket+0x62>
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 fc83 	bl	80099dc <TimerIsExpired>
 80090d6:	4603      	mov	r3, r0
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d0dc      	beq.n	8009096 <sendPacket+0x18>
 80090dc:	e000      	b.n	80090e0 <sendPacket+0x62>
            break;
 80090de:	bf00      	nop
    }
    if (sent == length)
 80090e0:	693a      	ldr	r2, [r7, #16]
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d10b      	bne.n	8009100 <sendPacket+0x82>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	699b      	ldr	r3, [r3, #24]
 80090f2:	4619      	mov	r1, r3
 80090f4:	4610      	mov	r0, r2
 80090f6:	f000 fc9b 	bl	8009a30 <TimerCountdown>
        rc = SUCCESSS;
 80090fa:	2300      	movs	r3, #0
 80090fc:	617b      	str	r3, [r7, #20]
 80090fe:	e002      	b.n	8009106 <sendPacket+0x88>
    }
    else
        rc = FAILURE;
 8009100:	f04f 33ff 	mov.w	r3, #4294967295
 8009104:	617b      	str	r3, [r7, #20]
    return rc;
 8009106:	697b      	ldr	r3, [r7, #20]
}
 8009108:	4618      	mov	r0, r3
 800910a:	371c      	adds	r7, #28
 800910c:	46bd      	mov	sp, r7
 800910e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009110 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b086      	sub	sp, #24
 8009114:	af00      	add	r7, sp, #0
 8009116:	60f8      	str	r0, [r7, #12]
 8009118:	60b9      	str	r1, [r7, #8]
 800911a:	607a      	str	r2, [r7, #4]
 800911c:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	68ba      	ldr	r2, [r7, #8]
 8009122:	651a      	str	r2, [r3, #80]	; 0x50

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8009124:	2300      	movs	r3, #0
 8009126:	617b      	str	r3, [r7, #20]
 8009128:	e009      	b.n	800913e <MQTTClientInit+0x2e>
        c->messageHandlers[i].topicFilter = 0;
 800912a:	68fa      	ldr	r2, [r7, #12]
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	3304      	adds	r3, #4
 8009130:	00db      	lsls	r3, r3, #3
 8009132:	4413      	add	r3, r2
 8009134:	2200      	movs	r2, #0
 8009136:	605a      	str	r2, [r3, #4]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	3301      	adds	r3, #1
 800913c:	617b      	str	r3, [r7, #20]
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	2b04      	cmp	r3, #4
 8009142:	ddf2      	ble.n	800912a <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	683a      	ldr	r2, [r7, #0]
 800914e:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	6a3a      	ldr	r2, [r7, #32]
 8009154:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800915a:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009160:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2200      	movs	r2, #0
 8009166:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	2200      	movs	r2, #0
 800916c:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2200      	movs	r2, #0
 8009172:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2201      	movs	r2, #1
 8009178:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	3354      	adds	r3, #84	; 0x54
 800917e:	4618      	mov	r0, r3
 8009180:	f000 fc1f 	bl	80099c2 <TimerInit>
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
 8009184:	bf00      	nop
 8009186:	3718      	adds	r7, #24
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
 800918c:	b590      	push	{r4, r7, lr}
 800918e:	b08b      	sub	sp, #44	; 0x2c
 8009190:	af00      	add	r7, sp, #0
 8009192:	60f8      	str	r0, [r7, #12]
 8009194:	60b9      	str	r1, [r7, #8]
 8009196:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 8009198:	2301      	movs	r3, #1
 800919a:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
 800919c:	2300      	movs	r3, #0
 800919e:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 80091a0:	2304      	movs	r3, #4
 80091a2:	61fb      	str	r3, [r7, #28]

    *value = 0;
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	2200      	movs	r2, #0
 80091a8:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 80091aa:	f04f 33ff 	mov.w	r3, #4294967295
 80091ae:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 80091b0:	6a3b      	ldr	r3, [r7, #32]
 80091b2:	3301      	adds	r3, #1
 80091b4:	623b      	str	r3, [r7, #32]
 80091b6:	6a3a      	ldr	r2, [r7, #32]
 80091b8:	69fb      	ldr	r3, [r7, #28]
 80091ba:	429a      	cmp	r2, r3
 80091bc:	dd03      	ble.n	80091c6 <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 80091be:	f04f 33ff 	mov.w	r3, #4294967295
 80091c2:	61bb      	str	r3, [r7, #24]
            goto exit;
 80091c4:	e021      	b.n	800920a <decodePacket+0x7e>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091ca:	685c      	ldr	r4, [r3, #4]
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80091d0:	f107 0117 	add.w	r1, r7, #23
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2201      	movs	r2, #1
 80091d8:	47a0      	blx	r4
 80091da:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 80091dc:	69bb      	ldr	r3, [r7, #24]
 80091de:	2b01      	cmp	r3, #1
 80091e0:	d112      	bne.n	8009208 <decodePacket+0x7c>
            goto exit;
        *value += (i & 127) * multiplier;
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	7dfb      	ldrb	r3, [r7, #23]
 80091e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80091ee:	fb01 f303 	mul.w	r3, r1, r3
 80091f2:	441a      	add	r2, r3
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 80091f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091fa:	01db      	lsls	r3, r3, #7
 80091fc:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
 80091fe:	7dfb      	ldrb	r3, [r7, #23]
 8009200:	b25b      	sxtb	r3, r3
 8009202:	2b00      	cmp	r3, #0
 8009204:	dbd1      	blt.n	80091aa <decodePacket+0x1e>
exit:
 8009206:	e000      	b.n	800920a <decodePacket+0x7e>
            goto exit;
 8009208:	bf00      	nop
    return len;
 800920a:	6a3b      	ldr	r3, [r7, #32]
}
 800920c:	4618      	mov	r0, r3
 800920e:	372c      	adds	r7, #44	; 0x2c
 8009210:	46bd      	mov	sp, r7
 8009212:	bd90      	pop	{r4, r7, pc}

08009214 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
 8009214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009216:	b089      	sub	sp, #36	; 0x24
 8009218:	af00      	add	r7, sp, #0
 800921a:	60f8      	str	r0, [r7, #12]
 800921c:	60b9      	str	r1, [r7, #8]
    int rc = FAILURE;
 800921e:	f04f 33ff 	mov.w	r3, #4294967295
 8009222:	61fb      	str	r3, [r7, #28]
    MQTTHeader header = {0};
 8009224:	2300      	movs	r3, #0
 8009226:	617b      	str	r3, [r7, #20]
    int len = 0;
 8009228:	2300      	movs	r3, #0
 800922a:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 800922c:	2300      	movs	r3, #0
 800922e:	613b      	str	r3, [r7, #16]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009234:	685c      	ldr	r4, [r3, #4]
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	695e      	ldr	r6, [r3, #20]
 800923e:	68b8      	ldr	r0, [r7, #8]
 8009240:	f000 fc0e 	bl	8009a60 <TimerLeftMS>
 8009244:	4603      	mov	r3, r0
 8009246:	2201      	movs	r2, #1
 8009248:	4631      	mov	r1, r6
 800924a:	4628      	mov	r0, r5
 800924c:	47a0      	blx	r4
 800924e:	4603      	mov	r3, r0
 8009250:	2b01      	cmp	r3, #1
 8009252:	d13b      	bne.n	80092cc <readPacket+0xb8>
        goto exit;

    len = 1;
 8009254:	2301      	movs	r3, #1
 8009256:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 8009258:	68b8      	ldr	r0, [r7, #8]
 800925a:	f000 fc01 	bl	8009a60 <TimerLeftMS>
 800925e:	4602      	mov	r2, r0
 8009260:	f107 0310 	add.w	r3, r7, #16
 8009264:	4619      	mov	r1, r3
 8009266:	68f8      	ldr	r0, [r7, #12]
 8009268:	f7ff ff90 	bl	800918c <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	695b      	ldr	r3, [r3, #20]
 8009270:	3301      	adds	r3, #1
 8009272:	693a      	ldr	r2, [r7, #16]
 8009274:	4611      	mov	r1, r2
 8009276:	4618      	mov	r0, r3
 8009278:	f000 ff57 	bl	800a12a <MQTTPacket_encode>
 800927c:	4602      	mov	r2, r0
 800927e:	69bb      	ldr	r3, [r7, #24]
 8009280:	4413      	add	r3, r2
 8009282:	61bb      	str	r3, [r7, #24]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	2b00      	cmp	r3, #0
 8009288:	dd16      	ble.n	80092b8 <readPacket+0xa4>
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800928e:	685c      	ldr	r4, [r3, #4]
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	695a      	ldr	r2, [r3, #20]
 8009298:	69bb      	ldr	r3, [r7, #24]
 800929a:	18d6      	adds	r6, r2, r3
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	607b      	str	r3, [r7, #4]
 80092a0:	68b8      	ldr	r0, [r7, #8]
 80092a2:	f000 fbdd 	bl	8009a60 <TimerLeftMS>
 80092a6:	4603      	mov	r3, r0
 80092a8:	687a      	ldr	r2, [r7, #4]
 80092aa:	4631      	mov	r1, r6
 80092ac:	4628      	mov	r0, r5
 80092ae:	47a0      	blx	r4
 80092b0:	4602      	mov	r2, r0
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d10b      	bne.n	80092d0 <readPacket+0xbc>
        goto exit;

    header.byte = c->readbuf[0];
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	695b      	ldr	r3, [r3, #20]
 80092bc:	781b      	ldrb	r3, [r3, #0]
 80092be:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 80092c0:	7d3b      	ldrb	r3, [r7, #20]
 80092c2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80092c6:	b2db      	uxtb	r3, r3
 80092c8:	61fb      	str	r3, [r7, #28]
 80092ca:	e002      	b.n	80092d2 <readPacket+0xbe>
        goto exit;
 80092cc:	bf00      	nop
 80092ce:	e000      	b.n	80092d2 <readPacket+0xbe>
        goto exit;
 80092d0:	bf00      	nop
exit:
    return rc;
 80092d2:	69fb      	ldr	r3, [r7, #28]
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3724      	adds	r7, #36	; 0x24
 80092d8:	46bd      	mov	sp, r7
 80092da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080092dc <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 80092dc:	b480      	push	{r7}
 80092de:	b087      	sub	sp, #28
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	689b      	ldr	r3, [r3, #8]
 80092ee:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	461a      	mov	r2, r3
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	4413      	add	r3, r2
 80092fa:	60bb      	str	r3, [r7, #8]

    while (*curf && curn < curn_end)
 80092fc:	e039      	b.n	8009372 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	2b2f      	cmp	r3, #47	; 0x2f
 8009304:	d103      	bne.n	800930e <isTopicMatched+0x32>
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	2b2f      	cmp	r3, #47	; 0x2f
 800930c:	d13a      	bne.n	8009384 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	2b2b      	cmp	r3, #43	; 0x2b
 8009314:	d009      	beq.n	800932a <isTopicMatched+0x4e>
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	781b      	ldrb	r3, [r3, #0]
 800931a:	2b23      	cmp	r3, #35	; 0x23
 800931c:	d005      	beq.n	800932a <isTopicMatched+0x4e>
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	781a      	ldrb	r2, [r3, #0]
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	429a      	cmp	r2, r3
 8009328:	d12e      	bne.n	8009388 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	2b2b      	cmp	r3, #43	; 0x2b
 8009330:	d112      	bne.n	8009358 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	3301      	adds	r3, #1
 8009336:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 8009338:	e005      	b.n	8009346 <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	3301      	adds	r3, #1
 800933e:	613b      	str	r3, [r7, #16]
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	3301      	adds	r3, #1
 8009344:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 8009346:	68fa      	ldr	r2, [r7, #12]
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	429a      	cmp	r2, r3
 800934c:	d20b      	bcs.n	8009366 <isTopicMatched+0x8a>
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	2b2f      	cmp	r3, #47	; 0x2f
 8009354:	d1f1      	bne.n	800933a <isTopicMatched+0x5e>
 8009356:	e006      	b.n	8009366 <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	2b23      	cmp	r3, #35	; 0x23
 800935e:	d102      	bne.n	8009366 <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	3b01      	subs	r3, #1
 8009364:	613b      	str	r3, [r7, #16]
        curf++;
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	3301      	adds	r3, #1
 800936a:	617b      	str	r3, [r7, #20]
        curn++;
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	3301      	adds	r3, #1
 8009370:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	781b      	ldrb	r3, [r3, #0]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d007      	beq.n	800938a <isTopicMatched+0xae>
 800937a:	693a      	ldr	r2, [r7, #16]
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	429a      	cmp	r2, r3
 8009380:	d3bd      	bcc.n	80092fe <isTopicMatched+0x22>
 8009382:	e002      	b.n	800938a <isTopicMatched+0xae>
            break;
 8009384:	bf00      	nop
 8009386:	e000      	b.n	800938a <isTopicMatched+0xae>
            break;
 8009388:	bf00      	nop
    };

    return (curn == curn_end) && (*curf == '\0');
 800938a:	693a      	ldr	r2, [r7, #16]
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	429a      	cmp	r2, r3
 8009390:	d105      	bne.n	800939e <isTopicMatched+0xc2>
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d101      	bne.n	800939e <isTopicMatched+0xc2>
 800939a:	2301      	movs	r3, #1
 800939c:	e000      	b.n	80093a0 <isTopicMatched+0xc4>
 800939e:	2300      	movs	r3, #0
 80093a0:	b2db      	uxtb	r3, r3
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	371c      	adds	r7, #28
 80093a6:	46bd      	mov	sp, r7
 80093a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ac:	4770      	bx	lr

080093ae <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 80093ae:	b580      	push	{r7, lr}
 80093b0:	b08a      	sub	sp, #40	; 0x28
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	60f8      	str	r0, [r7, #12]
 80093b6:	60b9      	str	r1, [r7, #8]
 80093b8:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 80093ba:	f04f 33ff 	mov.w	r3, #4294967295
 80093be:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80093c0:	2300      	movs	r3, #0
 80093c2:	627b      	str	r3, [r7, #36]	; 0x24
 80093c4:	e03f      	b.n	8009446 <deliverMessage+0x98>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 80093c6:	68fa      	ldr	r2, [r7, #12]
 80093c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ca:	3304      	adds	r3, #4
 80093cc:	00db      	lsls	r3, r3, #3
 80093ce:	4413      	add	r3, r2
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d034      	beq.n	8009440 <deliverMessage+0x92>
 80093d6:	68fa      	ldr	r2, [r7, #12]
 80093d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093da:	3304      	adds	r3, #4
 80093dc:	00db      	lsls	r3, r3, #3
 80093de:	4413      	add	r3, r2
 80093e0:	685b      	ldr	r3, [r3, #4]
 80093e2:	4619      	mov	r1, r3
 80093e4:	68b8      	ldr	r0, [r7, #8]
 80093e6:	f001 f86f 	bl	800a4c8 <MQTTPacket_equals>
 80093ea:	4603      	mov	r3, r0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d10c      	bne.n	800940a <deliverMessage+0x5c>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 80093f0:	68fa      	ldr	r2, [r7, #12]
 80093f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f4:	3304      	adds	r3, #4
 80093f6:	00db      	lsls	r3, r3, #3
 80093f8:	4413      	add	r3, r2
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	68b9      	ldr	r1, [r7, #8]
 80093fe:	4618      	mov	r0, r3
 8009400:	f7ff ff6c 	bl	80092dc <isTopicMatched>
 8009404:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 8009406:	2b00      	cmp	r3, #0
 8009408:	d01a      	beq.n	8009440 <deliverMessage+0x92>
        {
            if (c->messageHandlers[i].fp != NULL)
 800940a:	68fa      	ldr	r2, [r7, #12]
 800940c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800940e:	3304      	adds	r3, #4
 8009410:	00db      	lsls	r3, r3, #3
 8009412:	4413      	add	r3, r2
 8009414:	689b      	ldr	r3, [r3, #8]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d012      	beq.n	8009440 <deliverMessage+0x92>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
 800941a:	f107 0318 	add.w	r3, r7, #24
 800941e:	687a      	ldr	r2, [r7, #4]
 8009420:	68b9      	ldr	r1, [r7, #8]
 8009422:	4618      	mov	r0, r3
 8009424:	f7ff fe00 	bl	8009028 <NewMessageData>
                c->messageHandlers[i].fp(&md);
 8009428:	68fa      	ldr	r2, [r7, #12]
 800942a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800942c:	3304      	adds	r3, #4
 800942e:	00db      	lsls	r3, r3, #3
 8009430:	4413      	add	r3, r2
 8009432:	689b      	ldr	r3, [r3, #8]
 8009434:	f107 0218 	add.w	r2, r7, #24
 8009438:	4610      	mov	r0, r2
 800943a:	4798      	blx	r3
                rc = SUCCESSS;
 800943c:	2300      	movs	r3, #0
 800943e:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8009440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009442:	3301      	adds	r3, #1
 8009444:	627b      	str	r3, [r7, #36]	; 0x24
 8009446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009448:	2b04      	cmp	r3, #4
 800944a:	ddbc      	ble.n	80093c6 <deliverMessage+0x18>
            }
        }
    }

    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 800944c:	6a3b      	ldr	r3, [r7, #32]
 800944e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009452:	d112      	bne.n	800947a <deliverMessage+0xcc>
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009458:	2b00      	cmp	r3, #0
 800945a:	d00e      	beq.n	800947a <deliverMessage+0xcc>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 800945c:	f107 0310 	add.w	r3, r7, #16
 8009460:	687a      	ldr	r2, [r7, #4]
 8009462:	68b9      	ldr	r1, [r7, #8]
 8009464:	4618      	mov	r0, r3
 8009466:	f7ff fddf 	bl	8009028 <NewMessageData>
        c->defaultMessageHandler(&md);
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800946e:	f107 0210 	add.w	r2, r7, #16
 8009472:	4610      	mov	r0, r2
 8009474:	4798      	blx	r3
        rc = SUCCESSS;
 8009476:	2300      	movs	r3, #0
 8009478:	623b      	str	r3, [r7, #32]
    }

    return rc;
 800947a:	6a3b      	ldr	r3, [r7, #32]
}
 800947c:	4618      	mov	r0, r3
 800947e:	3728      	adds	r7, #40	; 0x28
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <keepalive>:


int keepalive(MQTTClient* c)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b086      	sub	sp, #24
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
 800948c:	f04f 33ff 	mov.w	r3, #4294967295
 8009490:	617b      	str	r3, [r7, #20]

    if (c->keepAliveInterval == 0)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	699b      	ldr	r3, [r3, #24]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d102      	bne.n	80094a0 <keepalive+0x1c>
    {
        rc = SUCCESSS;
 800949a:	2300      	movs	r3, #0
 800949c:	617b      	str	r3, [r7, #20]
        goto exit;
 800949e:	e033      	b.n	8009508 <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	3354      	adds	r3, #84	; 0x54
 80094a4:	4618      	mov	r0, r3
 80094a6:	f000 fa99 	bl	80099dc <TimerIsExpired>
 80094aa:	4603      	mov	r3, r0
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d02a      	beq.n	8009506 <keepalive+0x82>
    {
        if (!c->ping_outstanding)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	7f1b      	ldrb	r3, [r3, #28]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d126      	bne.n	8009506 <keepalive+0x82>
        {
            Timer timer;
            TimerInit(&timer);
 80094b8:	f107 0308 	add.w	r3, r7, #8
 80094bc:	4618      	mov	r0, r3
 80094be:	f000 fa80 	bl	80099c2 <TimerInit>
            TimerCountdownMS(&timer, 1000);
 80094c2:	f107 0308 	add.w	r3, r7, #8
 80094c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80094ca:	4618      	mov	r0, r3
 80094cc:	f000 fa9c 	bl	8009a08 <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	691a      	ldr	r2, [r3, #16]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	689b      	ldr	r3, [r3, #8]
 80094d8:	4619      	mov	r1, r3
 80094da:	4610      	mov	r0, r2
 80094dc:	f000 fd59 	bl	8009f92 <MQTTSerialize_pingreq>
 80094e0:	6138      	str	r0, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESSS) // send the ping packet
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	dd0f      	ble.n	8009508 <keepalive+0x84>
 80094e8:	f107 0308 	add.w	r3, r7, #8
 80094ec:	461a      	mov	r2, r3
 80094ee:	6939      	ldr	r1, [r7, #16]
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f7ff fdc4 	bl	800907e <sendPacket>
 80094f6:	6178      	str	r0, [r7, #20]
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d104      	bne.n	8009508 <keepalive+0x84>
                c->ping_outstanding = 1;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2201      	movs	r2, #1
 8009502:	771a      	strb	r2, [r3, #28]
 8009504:	e000      	b.n	8009508 <keepalive+0x84>
        }
    }

exit:
 8009506:	bf00      	nop
    return rc;
 8009508:	697b      	ldr	r3, [r7, #20]
}
 800950a:	4618      	mov	r0, r3
 800950c:	3718      	adds	r7, #24
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}
	...

08009514 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 8009514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009516:	b095      	sub	sp, #84	; 0x54
 8009518:	af06      	add	r7, sp, #24
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
 800951e:	6839      	ldr	r1, [r7, #0]
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f7ff fe77 	bl	8009214 <readPacket>
 8009526:	4603      	mov	r3, r0
 8009528:	85fb      	strh	r3, [r7, #46]	; 0x2e

    int len = 0,
 800952a:	2300      	movs	r3, #0
 800952c:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESSS;
 800952e:	2300      	movs	r3, #0
 8009530:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
 8009532:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009534:	3b02      	subs	r3, #2
 8009536:	2b0b      	cmp	r3, #11
 8009538:	f200 80c0 	bhi.w	80096bc <cycle+0x1a8>
 800953c:	a201      	add	r2, pc, #4	; (adr r2, 8009544 <cycle+0x30>)
 800953e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009542:	bf00      	nop
 8009544:	080096bd 	.word	0x080096bd
 8009548:	08009575 	.word	0x08009575
 800954c:	080096bd 	.word	0x080096bd
 8009550:	0800963d 	.word	0x0800963d
 8009554:	080096bd 	.word	0x080096bd
 8009558:	080096bd 	.word	0x080096bd
 800955c:	080096bd 	.word	0x080096bd
 8009560:	080096bd 	.word	0x080096bd
 8009564:	080096bd 	.word	0x080096bd
 8009568:	080096bd 	.word	0x080096bd
 800956c:	080096bd 	.word	0x080096bd
 8009570:	080096af 	.word	0x080096af
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 800957c:	4616      	mov	r6, r2
 800957e:	f107 0210 	add.w	r2, r7, #16
 8009582:	1d15      	adds	r5, r2, #4
 8009584:	f107 0210 	add.w	r2, r7, #16
 8009588:	1c54      	adds	r4, r2, #1
 800958a:	f107 010c 	add.w	r1, r7, #12
 800958e:	f107 0210 	add.w	r2, r7, #16
 8009592:	1c90      	adds	r0, r2, #2
 8009594:	9604      	str	r6, [sp, #16]
 8009596:	9303      	str	r3, [sp, #12]
 8009598:	f107 0310 	add.w	r3, r7, #16
 800959c:	330c      	adds	r3, #12
 800959e:	9302      	str	r3, [sp, #8]
 80095a0:	f107 0310 	add.w	r3, r7, #16
 80095a4:	3308      	adds	r3, #8
 80095a6:	9301      	str	r3, [sp, #4]
 80095a8:	f107 0320 	add.w	r3, r7, #32
 80095ac:	9300      	str	r3, [sp, #0]
 80095ae:	462b      	mov	r3, r5
 80095b0:	4622      	mov	r2, r4
 80095b2:	f000 fcfd 	bl	8009fb0 <MQTTDeserialize_publish>
 80095b6:	4603      	mov	r3, r0
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	f040 8083 	bne.w	80096c4 <cycle+0x1b0>
                goto exit;
            msg.qos = (enum QoS)intQoS;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	b2db      	uxtb	r3, r3
 80095c2:	743b      	strb	r3, [r7, #16]
            deliverMessage(c, &topicName, &msg);
 80095c4:	f107 0210 	add.w	r2, r7, #16
 80095c8:	f107 0320 	add.w	r3, r7, #32
 80095cc:	4619      	mov	r1, r3
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f7ff feed 	bl	80093ae <deliverMessage>
            if (msg.qos != QOS0)
 80095d4:	7c3b      	ldrb	r3, [r7, #16]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d06d      	beq.n	80096b6 <cycle+0x1a2>
            {
                if (msg.qos == QOS1)
 80095da:	7c3b      	ldrb	r3, [r7, #16]
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d10c      	bne.n	80095fa <cycle+0xe6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6918      	ldr	r0, [r3, #16]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	689b      	ldr	r3, [r3, #8]
 80095e8:	4619      	mov	r1, r3
 80095ea:	8abb      	ldrh	r3, [r7, #20]
 80095ec:	9300      	str	r3, [sp, #0]
 80095ee:	2300      	movs	r3, #0
 80095f0:	2204      	movs	r2, #4
 80095f2:	f000 ffa0 	bl	800a536 <MQTTSerialize_ack>
 80095f6:	6378      	str	r0, [r7, #52]	; 0x34
 80095f8:	e00e      	b.n	8009618 <cycle+0x104>
                else if (msg.qos == QOS2)
 80095fa:	7c3b      	ldrb	r3, [r7, #16]
 80095fc:	2b02      	cmp	r3, #2
 80095fe:	d10b      	bne.n	8009618 <cycle+0x104>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6918      	ldr	r0, [r3, #16]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	689b      	ldr	r3, [r3, #8]
 8009608:	4619      	mov	r1, r3
 800960a:	8abb      	ldrh	r3, [r7, #20]
 800960c:	9300      	str	r3, [sp, #0]
 800960e:	2300      	movs	r3, #0
 8009610:	2205      	movs	r2, #5
 8009612:	f000 ff90 	bl	800a536 <MQTTSerialize_ack>
 8009616:	6378      	str	r0, [r7, #52]	; 0x34
                if (len <= 0)
 8009618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800961a:	2b00      	cmp	r3, #0
 800961c:	dc03      	bgt.n	8009626 <cycle+0x112>
                    rc = FAILURE;
 800961e:	f04f 33ff 	mov.w	r3, #4294967295
 8009622:	633b      	str	r3, [r7, #48]	; 0x30
 8009624:	e005      	b.n	8009632 <cycle+0x11e>
                else
                    rc = sendPacket(c, len, timer);
 8009626:	683a      	ldr	r2, [r7, #0]
 8009628:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f7ff fd27 	bl	800907e <sendPacket>
 8009630:	6338      	str	r0, [r7, #48]	; 0x30
                if (rc == FAILURE)
 8009632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009638:	d13d      	bne.n	80096b6 <cycle+0x1a2>
                    goto exit; // there was a problem
 800963a:	e044      	b.n	80096c6 <cycle+0x1b2>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	695c      	ldr	r4, [r3, #20]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	68db      	ldr	r3, [r3, #12]
 8009644:	f107 020a 	add.w	r2, r7, #10
 8009648:	f107 0109 	add.w	r1, r7, #9
 800964c:	f107 0008 	add.w	r0, r7, #8
 8009650:	9300      	str	r3, [sp, #0]
 8009652:	4623      	mov	r3, r4
 8009654:	f000 fd1e 	bl	800a094 <MQTTDeserialize_ack>
 8009658:	4603      	mov	r3, r0
 800965a:	2b01      	cmp	r3, #1
 800965c:	d003      	beq.n	8009666 <cycle+0x152>
                rc = FAILURE;
 800965e:	f04f 33ff 	mov.w	r3, #4294967295
 8009662:	633b      	str	r3, [r7, #48]	; 0x30
 8009664:	e01e      	b.n	80096a4 <cycle+0x190>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6918      	ldr	r0, [r3, #16]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	689b      	ldr	r3, [r3, #8]
 800966e:	4619      	mov	r1, r3
 8009670:	897b      	ldrh	r3, [r7, #10]
 8009672:	9300      	str	r3, [sp, #0]
 8009674:	2300      	movs	r3, #0
 8009676:	2206      	movs	r2, #6
 8009678:	f000 ff5d 	bl	800a536 <MQTTSerialize_ack>
 800967c:	6378      	str	r0, [r7, #52]	; 0x34
 800967e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009680:	2b00      	cmp	r3, #0
 8009682:	dc03      	bgt.n	800968c <cycle+0x178>
                rc = FAILURE;
 8009684:	f04f 33ff 	mov.w	r3, #4294967295
 8009688:	633b      	str	r3, [r7, #48]	; 0x30
 800968a:	e00b      	b.n	80096a4 <cycle+0x190>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESSS) // send the PUBREL packet
 800968c:	683a      	ldr	r2, [r7, #0]
 800968e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f7ff fcf4 	bl	800907e <sendPacket>
 8009696:	6338      	str	r0, [r7, #48]	; 0x30
 8009698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800969a:	2b00      	cmp	r3, #0
 800969c:	d002      	beq.n	80096a4 <cycle+0x190>
                rc = FAILURE; // there was a problem
 800969e:	f04f 33ff 	mov.w	r3, #4294967295
 80096a2:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
 80096a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096aa:	d106      	bne.n	80096ba <cycle+0x1a6>
                goto exit; // there was a problem
 80096ac:	e00b      	b.n	80096c6 <cycle+0x1b2>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2200      	movs	r2, #0
 80096b2:	771a      	strb	r2, [r3, #28]
            break;
 80096b4:	e002      	b.n	80096bc <cycle+0x1a8>
            break;
 80096b6:	bf00      	nop
 80096b8:	e000      	b.n	80096bc <cycle+0x1a8>
            break;
 80096ba:	bf00      	nop
    }
    keepalive(c);
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f7ff fee1 	bl	8009484 <keepalive>
 80096c2:	e000      	b.n	80096c6 <cycle+0x1b2>
                goto exit;
 80096c4:	bf00      	nop
exit:
    if (rc == SUCCESSS)
 80096c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d101      	bne.n	80096d0 <cycle+0x1bc>
        rc = packet_type;
 80096cc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80096ce:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
 80096d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	373c      	adds	r7, #60	; 0x3c
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096da:	bf00      	nop

080096dc <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b086      	sub	sp, #24
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	6039      	str	r1, [r7, #0]
    int rc = SUCCESSS;
 80096e6:	2300      	movs	r3, #0
 80096e8:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
 80096ea:	f107 030c 	add.w	r3, r7, #12
 80096ee:	4618      	mov	r0, r3
 80096f0:	f000 f967 	bl	80099c2 <TimerInit>
    TimerCountdownMS(&timer, timeout_ms);
 80096f4:	683a      	ldr	r2, [r7, #0]
 80096f6:	f107 030c 	add.w	r3, r7, #12
 80096fa:	4611      	mov	r1, r2
 80096fc:	4618      	mov	r0, r3
 80096fe:	f000 f983 	bl	8009a08 <TimerCountdownMS>

    if (cycle(c, &timer) == FAILURE)
 8009702:	f107 030c 	add.w	r3, r7, #12
 8009706:	4619      	mov	r1, r3
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f7ff ff03 	bl	8009514 <cycle>
 800970e:	4603      	mov	r3, r0
 8009710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009714:	d102      	bne.n	800971c <MQTTYield+0x40>
    {
        rc = FAILURE;
 8009716:	f04f 33ff 	mov.w	r3, #4294967295
 800971a:	617b      	str	r3, [r7, #20]
    }

    return rc;
 800971c:	697b      	ldr	r3, [r7, #20]
}
 800971e:	4618      	mov	r0, r3
 8009720:	3718      	adds	r7, #24
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}

08009726 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 8009726:	b580      	push	{r7, lr}
 8009728:	b086      	sub	sp, #24
 800972a:	af00      	add	r7, sp, #0
 800972c:	60f8      	str	r0, [r7, #12]
 800972e:	60b9      	str	r1, [r7, #8]
 8009730:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 8009732:	f04f 33ff 	mov.w	r3, #4294967295
 8009736:	617b      	str	r3, [r7, #20]

    do
    {
        if (TimerIsExpired(timer))
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 f94f 	bl	80099dc <TimerIsExpired>
 800973e:	4603      	mov	r3, r0
 8009740:	2b00      	cmp	r3, #0
 8009742:	d109      	bne.n	8009758 <waitfor+0x32>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);
 8009744:	6879      	ldr	r1, [r7, #4]
 8009746:	68f8      	ldr	r0, [r7, #12]
 8009748:	f7ff fee4 	bl	8009514 <cycle>
 800974c:	6178      	str	r0, [r7, #20]
 800974e:	697a      	ldr	r2, [r7, #20]
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	429a      	cmp	r2, r3
 8009754:	d1f0      	bne.n	8009738 <waitfor+0x12>
 8009756:	e000      	b.n	800975a <waitfor+0x34>
            break; // we timed out
 8009758:	bf00      	nop

    return rc;
 800975a:	697b      	ldr	r3, [r7, #20]
}
 800975c:	4618      	mov	r0, r3
 800975e:	3718      	adds	r7, #24
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b09e      	sub	sp, #120	; 0x78
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
 800976e:	f04f 33ff 	mov.w	r3, #4294967295
 8009772:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 8009774:	4a3d      	ldr	r2, [pc, #244]	; (800986c <MQTTConnect+0x108>)
 8009776:	f107 0310 	add.w	r3, r7, #16
 800977a:	4611      	mov	r1, r2
 800977c:	2258      	movs	r2, #88	; 0x58
 800977e:	4618      	mov	r0, r3
 8009780:	f001 f912 	bl	800a9a8 <memcpy>
    int len = 0;
 8009784:	2300      	movs	r3, #0
 8009786:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6a1b      	ldr	r3, [r3, #32]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d15d      	bne.n	800984c <MQTTConnect+0xe8>
		goto exit;

    TimerInit(&connect_timer);
 8009790:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009794:	4618      	mov	r0, r3
 8009796:	f000 f914 	bl	80099c2 <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	685a      	ldr	r2, [r3, #4]
 800979e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80097a2:	4611      	mov	r1, r2
 80097a4:	4618      	mov	r0, r3
 80097a6:	f000 f92f 	bl	8009a08 <TimerCountdownMS>

    if (options == 0)
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d102      	bne.n	80097b6 <MQTTConnect+0x52>
        options = &default_options; /* set default options if none were supplied */
 80097b0:	f107 0310 	add.w	r3, r7, #16
 80097b4:	603b      	str	r3, [r7, #0]

    c->keepAliveInterval = options->keepAliveInterval;
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	8b1b      	ldrh	r3, [r3, #24]
 80097ba:	461a      	mov	r2, r3
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	699b      	ldr	r3, [r3, #24]
 80097ca:	4619      	mov	r1, r3
 80097cc:	4610      	mov	r0, r2
 80097ce:	f000 f92f 	bl	8009a30 <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6918      	ldr	r0, [r3, #16]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	689b      	ldr	r3, [r3, #8]
 80097da:	683a      	ldr	r2, [r7, #0]
 80097dc:	4619      	mov	r1, r3
 80097de:	f000 fa5f 	bl	8009ca0 <MQTTSerialize_connect>
 80097e2:	6738      	str	r0, [r7, #112]	; 0x70
 80097e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	dd32      	ble.n	8009850 <MQTTConnect+0xec>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESSS)  // send the connect packet
 80097ea:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80097ee:	461a      	mov	r2, r3
 80097f0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f7ff fc43 	bl	800907e <sendPacket>
 80097f8:	6778      	str	r0, [r7, #116]	; 0x74
 80097fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d129      	bne.n	8009854 <MQTTConnect+0xf0>
        goto exit; // there was a problem

    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 8009800:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009804:	461a      	mov	r2, r3
 8009806:	2102      	movs	r1, #2
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f7ff ff8c 	bl	8009726 <waitfor>
 800980e:	4603      	mov	r3, r0
 8009810:	2b02      	cmp	r3, #2
 8009812:	d117      	bne.n	8009844 <MQTTConnect+0xe0>
    {
        unsigned char connack_rc = 255;
 8009814:	23ff      	movs	r3, #255	; 0xff
 8009816:	73fb      	strb	r3, [r7, #15]
        unsigned char sessionPresent = 0;
 8009818:	2300      	movs	r3, #0
 800981a:	73bb      	strb	r3, [r7, #14]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	695a      	ldr	r2, [r3, #20]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	68db      	ldr	r3, [r3, #12]
 8009824:	f107 010f 	add.w	r1, r7, #15
 8009828:	f107 000e 	add.w	r0, r7, #14
 800982c:	f000 fb24 	bl	8009e78 <MQTTDeserialize_connack>
 8009830:	4603      	mov	r3, r0
 8009832:	2b01      	cmp	r3, #1
 8009834:	d102      	bne.n	800983c <MQTTConnect+0xd8>
            rc = connack_rc;
 8009836:	7bfb      	ldrb	r3, [r7, #15]
 8009838:	677b      	str	r3, [r7, #116]	; 0x74
 800983a:	e00c      	b.n	8009856 <MQTTConnect+0xf2>
        else
            rc = FAILURE;
 800983c:	f04f 33ff 	mov.w	r3, #4294967295
 8009840:	677b      	str	r3, [r7, #116]	; 0x74
 8009842:	e008      	b.n	8009856 <MQTTConnect+0xf2>
    }
    else
        rc = FAILURE;
 8009844:	f04f 33ff 	mov.w	r3, #4294967295
 8009848:	677b      	str	r3, [r7, #116]	; 0x74
 800984a:	e004      	b.n	8009856 <MQTTConnect+0xf2>
		goto exit;
 800984c:	bf00      	nop
 800984e:	e002      	b.n	8009856 <MQTTConnect+0xf2>
        goto exit;
 8009850:	bf00      	nop
 8009852:	e000      	b.n	8009856 <MQTTConnect+0xf2>
        goto exit; // there was a problem
 8009854:	bf00      	nop

exit:
    if (rc == SUCCESSS)
 8009856:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009858:	2b00      	cmp	r3, #0
 800985a:	d102      	bne.n	8009862 <MQTTConnect+0xfe>
        c->isconnected = 1;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2201      	movs	r2, #1
 8009860:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
 8009862:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 8009864:	4618      	mov	r0, r3
 8009866:	3778      	adds	r7, #120	; 0x78
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}
 800986c:	0800c350 	.word	0x0800c350

08009870 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler messageHandler)
{
 8009870:	b5b0      	push	{r4, r5, r7, lr}
 8009872:	b094      	sub	sp, #80	; 0x50
 8009874:	af04      	add	r7, sp, #16
 8009876:	60f8      	str	r0, [r7, #12]
 8009878:	60b9      	str	r1, [r7, #8]
 800987a:	603b      	str	r3, [r7, #0]
 800987c:	4613      	mov	r3, r2
 800987e:	71fb      	strb	r3, [r7, #7]
    int rc = FAILURE;
 8009880:	f04f 33ff 	mov.w	r3, #4294967295
 8009884:	63fb      	str	r3, [r7, #60]	; 0x3c
    Timer timer;
    int len = 0;
 8009886:	2300      	movs	r3, #0
 8009888:	637b      	str	r3, [r7, #52]	; 0x34
    MQTTString topic = MQTTString_initializer;
 800988a:	2300      	movs	r3, #0
 800988c:	623b      	str	r3, [r7, #32]
 800988e:	2300      	movs	r3, #0
 8009890:	627b      	str	r3, [r7, #36]	; 0x24
 8009892:	2300      	movs	r3, #0
 8009894:	62bb      	str	r3, [r7, #40]	; 0x28
    topic.cstring = (char *)topicFilter;
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	623b      	str	r3, [r7, #32]
    // This was added because enum QoS was previously typed to *int which resulted in HardFault and unaligned integer read.
    // This coping below makes sure the parameter for MQTTSerialize_subscribe is always char no matter what compiler is using for enums
    char charQos = (char)qos;
 800989a:	79fb      	ldrb	r3, [r7, #7]
 800989c:	77fb      	strb	r3, [r7, #31]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	6a1b      	ldr	r3, [r3, #32]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	f000 8083 	beq.w	80099ae <MQTTSubscribe+0x13e>
		goto exit;

    TimerInit(&timer);
 80098a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80098ac:	4618      	mov	r0, r3
 80098ae:	f000 f888 	bl	80099c2 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	685a      	ldr	r2, [r3, #4]
 80098b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80098ba:	4611      	mov	r1, r2
 80098bc:	4618      	mov	r0, r3
 80098be:	f000 f8a3 	bl	8009a08 <TimerCountdownMS>

    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, &charQos);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	691c      	ldr	r4, [r3, #16]
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	689b      	ldr	r3, [r3, #8]
 80098ca:	461d      	mov	r5, r3
 80098cc:	68f8      	ldr	r0, [r7, #12]
 80098ce:	f7ff fbbd 	bl	800904c <getNextPacketId>
 80098d2:	4603      	mov	r3, r0
 80098d4:	b29a      	uxth	r2, r3
 80098d6:	f107 031f 	add.w	r3, r7, #31
 80098da:	9302      	str	r3, [sp, #8]
 80098dc:	f107 0320 	add.w	r3, r7, #32
 80098e0:	9301      	str	r3, [sp, #4]
 80098e2:	2301      	movs	r3, #1
 80098e4:	9300      	str	r3, [sp, #0]
 80098e6:	4613      	mov	r3, r2
 80098e8:	2200      	movs	r2, #0
 80098ea:	4629      	mov	r1, r5
 80098ec:	4620      	mov	r0, r4
 80098ee:	f000 fe9e 	bl	800a62e <MQTTSerialize_subscribe>
 80098f2:	6378      	str	r0, [r7, #52]	; 0x34
    if (len <= 0)
 80098f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	dd5b      	ble.n	80099b2 <MQTTSubscribe+0x142>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESSS) // send the subscribe packet
 80098fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80098fe:	461a      	mov	r2, r3
 8009900:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009902:	68f8      	ldr	r0, [r7, #12]
 8009904:	f7ff fbbb 	bl	800907e <sendPacket>
 8009908:	63f8      	str	r0, [r7, #60]	; 0x3c
 800990a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800990c:	2b00      	cmp	r3, #0
 800990e:	d152      	bne.n	80099b6 <MQTTSubscribe+0x146>
        goto exit;             // there was a problem

    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback
 8009910:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009914:	461a      	mov	r2, r3
 8009916:	2109      	movs	r1, #9
 8009918:	68f8      	ldr	r0, [r7, #12]
 800991a:	f7ff ff04 	bl	8009726 <waitfor>
 800991e:	4603      	mov	r3, r0
 8009920:	2b09      	cmp	r3, #9
 8009922:	d140      	bne.n	80099a6 <MQTTSubscribe+0x136>
    {
        int count = 0, grantedQoS = -1;
 8009924:	2300      	movs	r3, #0
 8009926:	61bb      	str	r3, [r7, #24]
 8009928:	f04f 33ff 	mov.w	r3, #4294967295
 800992c:	617b      	str	r3, [r7, #20]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	695b      	ldr	r3, [r3, #20]
 8009932:	68fa      	ldr	r2, [r7, #12]
 8009934:	68d2      	ldr	r2, [r2, #12]
 8009936:	4614      	mov	r4, r2
 8009938:	f107 0114 	add.w	r1, r7, #20
 800993c:	f107 0218 	add.w	r2, r7, #24
 8009940:	f107 0012 	add.w	r0, r7, #18
 8009944:	9401      	str	r4, [sp, #4]
 8009946:	9300      	str	r3, [sp, #0]
 8009948:	460b      	mov	r3, r1
 800994a:	2101      	movs	r1, #1
 800994c:	f000 fee9 	bl	800a722 <MQTTDeserialize_suback>
 8009950:	4603      	mov	r3, r0
 8009952:	2b01      	cmp	r3, #1
 8009954:	d101      	bne.n	800995a <MQTTSubscribe+0xea>
            rc = grantedQoS; // 0, 1, 2 or 0x80
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (rc != 0x80)
 800995a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800995c:	2b80      	cmp	r3, #128	; 0x80
 800995e:	d02b      	beq.n	80099b8 <MQTTSubscribe+0x148>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8009960:	2300      	movs	r3, #0
 8009962:	63bb      	str	r3, [r7, #56]	; 0x38
 8009964:	e01b      	b.n	800999e <MQTTSubscribe+0x12e>
            {
                if (c->messageHandlers[i].topicFilter == 0)
 8009966:	68fa      	ldr	r2, [r7, #12]
 8009968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800996a:	3304      	adds	r3, #4
 800996c:	00db      	lsls	r3, r3, #3
 800996e:	4413      	add	r3, r2
 8009970:	685b      	ldr	r3, [r3, #4]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d110      	bne.n	8009998 <MQTTSubscribe+0x128>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
 8009976:	68fa      	ldr	r2, [r7, #12]
 8009978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800997a:	3304      	adds	r3, #4
 800997c:	00db      	lsls	r3, r3, #3
 800997e:	4413      	add	r3, r2
 8009980:	68ba      	ldr	r2, [r7, #8]
 8009982:	605a      	str	r2, [r3, #4]
                    c->messageHandlers[i].fp = messageHandler;
 8009984:	68fa      	ldr	r2, [r7, #12]
 8009986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009988:	3304      	adds	r3, #4
 800998a:	00db      	lsls	r3, r3, #3
 800998c:	4413      	add	r3, r2
 800998e:	683a      	ldr	r2, [r7, #0]
 8009990:	609a      	str	r2, [r3, #8]
                    rc = 0;
 8009992:	2300      	movs	r3, #0
 8009994:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8009996:	e00f      	b.n	80099b8 <MQTTSubscribe+0x148>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8009998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800999a:	3301      	adds	r3, #1
 800999c:	63bb      	str	r3, [r7, #56]	; 0x38
 800999e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099a0:	2b04      	cmp	r3, #4
 80099a2:	dde0      	ble.n	8009966 <MQTTSubscribe+0xf6>
 80099a4:	e008      	b.n	80099b8 <MQTTSubscribe+0x148>
                }
            }
        }
    }
    else
        rc = FAILURE;
 80099a6:	f04f 33ff 	mov.w	r3, #4294967295
 80099aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099ac:	e004      	b.n	80099b8 <MQTTSubscribe+0x148>
		goto exit;
 80099ae:	bf00      	nop
 80099b0:	e002      	b.n	80099b8 <MQTTSubscribe+0x148>
        goto exit;
 80099b2:	bf00      	nop
 80099b4:	e000      	b.n	80099b8 <MQTTSubscribe+0x148>
        goto exit;             // there was a problem
 80099b6:	bf00      	nop

exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
 80099b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3740      	adds	r7, #64	; 0x40
 80099be:	46bd      	mov	sp, r7
 80099c0:	bdb0      	pop	{r4, r5, r7, pc}

080099c2 <TimerInit>:
/*
 * @brief Timer Initialize
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
void TimerInit(Timer* timer) {
 80099c2:	b480      	push	{r7}
 80099c4:	b083      	sub	sp, #12
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
	timer->end_time = 0;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2200      	movs	r2, #0
 80099ce:	605a      	str	r2, [r3, #4]
}
 80099d0:	bf00      	nop
 80099d2:	370c      	adds	r7, #12
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr

080099dc <TimerIsExpired>:
/*
 * @brief expired Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
char TimerIsExpired(Timer* timer) {
 80099dc:	b480      	push	{r7}
 80099de:	b085      	sub	sp, #20
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	685a      	ldr	r2, [r3, #4]
 80099e8:	4b06      	ldr	r3, [pc, #24]	; (8009a04 <TimerIsExpired+0x28>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	1ad3      	subs	r3, r2, r3
 80099ee:	60fb      	str	r3, [r7, #12]
	return (left < 0);
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	0fdb      	lsrs	r3, r3, #31
 80099f4:	b2db      	uxtb	r3, r3
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3714      	adds	r7, #20
 80099fa:	46bd      	mov	sp, r7
 80099fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a00:	4770      	bx	lr
 8009a02:	bf00      	nop
 8009a04:	20001adc 	.word	0x20001adc

08009a08 <TimerCountdownMS>:
 * @brief Countdown millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdownMS(Timer* timer, unsigned int timeout) {
 8009a08:	b480      	push	{r7}
 8009a0a:	b083      	sub	sp, #12
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + timeout;
 8009a12:	4b06      	ldr	r3, [pc, #24]	; (8009a2c <TimerCountdownMS+0x24>)
 8009a14:	681a      	ldr	r2, [r3, #0]
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	441a      	add	r2, r3
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	605a      	str	r2, [r3, #4]
}
 8009a1e:	bf00      	nop
 8009a20:	370c      	adds	r7, #12
 8009a22:	46bd      	mov	sp, r7
 8009a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a28:	4770      	bx	lr
 8009a2a:	bf00      	nop
 8009a2c:	20001adc 	.word	0x20001adc

08009a30 <TimerCountdown>:
 * @brief Countdown second Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdown(Timer* timer, unsigned int timeout) {
 8009a30:	b480      	push	{r7}
 8009a32:	b083      	sub	sp, #12
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + (timeout * 1000);
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009a40:	fb03 f202 	mul.w	r2, r3, r2
 8009a44:	4b05      	ldr	r3, [pc, #20]	; (8009a5c <TimerCountdown+0x2c>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	441a      	add	r2, r3
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	605a      	str	r2, [r3, #4]
}
 8009a4e:	bf00      	nop
 8009a50:	370c      	adds	r7, #12
 8009a52:	46bd      	mov	sp, r7
 8009a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a58:	4770      	bx	lr
 8009a5a:	bf00      	nop
 8009a5c:	20001adc 	.word	0x20001adc

08009a60 <TimerLeftMS>:
/*
 * @brief left millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
int TimerLeftMS(Timer* timer) {
 8009a60:	b480      	push	{r7}
 8009a62:	b085      	sub	sp, #20
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	685a      	ldr	r2, [r3, #4]
 8009a6c:	4b06      	ldr	r3, [pc, #24]	; (8009a88 <TimerLeftMS+0x28>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	1ad3      	subs	r3, r2, r3
 8009a72:	60fb      	str	r3, [r7, #12]
	return (left < 0) ? 0 : left;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3714      	adds	r7, #20
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a84:	4770      	bx	lr
 8009a86:	bf00      	nop
 8009a88:	20001adc 	.word	0x20001adc

08009a8c <NewNetwork>:
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 *         sn : socket number where x can be (0..7).
 * @retval None
 */
void NewNetwork(Network* n, int sn) {
 8009a8c:	b480      	push	{r7}
 8009a8e:	b083      	sub	sp, #12
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	6039      	str	r1, [r7, #0]
	n->my_socket = sn;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	683a      	ldr	r2, [r7, #0]
 8009a9a:	601a      	str	r2, [r3, #0]
	n->mqttread = w5x00_read;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	4a07      	ldr	r2, [pc, #28]	; (8009abc <NewNetwork+0x30>)
 8009aa0:	605a      	str	r2, [r3, #4]
	n->mqttwrite = w5x00_write;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	4a06      	ldr	r2, [pc, #24]	; (8009ac0 <NewNetwork+0x34>)
 8009aa6:	609a      	str	r2, [r3, #8]
	n->disconnect = w5x00_disconnect;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	4a06      	ldr	r2, [pc, #24]	; (8009ac4 <NewNetwork+0x38>)
 8009aac:	60da      	str	r2, [r3, #12]
}
 8009aae:	bf00      	nop
 8009ab0:	370c      	adds	r7, #12
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab8:	4770      	bx	lr
 8009aba:	bf00      	nop
 8009abc:	08009ac9 	.word	0x08009ac9
 8009ac0:	08009b23 	.word	0x08009b23
 8009ac4:	08009b6b 	.word	0x08009b6b

08009ac8 <w5x00_read>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval received data length or SOCKERR code
 */
int w5x00_read(Network* n, unsigned char* buffer, int len, long time)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b084      	sub	sp, #16
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	60f8      	str	r0, [r7, #12]
 8009ad0:	60b9      	str	r1, [r7, #8]
 8009ad2:	607a      	str	r2, [r7, #4]
 8009ad4:	603b      	str	r3, [r7, #0]

	if((getSn_SR(n->my_socket) == SOCK_ESTABLISHED) && (getSn_RX_RSR(n->my_socket)>0))
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	009b      	lsls	r3, r3, #2
 8009adc:	3301      	adds	r3, #1
 8009ade:	00db      	lsls	r3, r3, #3
 8009ae0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f7fb fa51 	bl	8004f8c <WIZCHIP_READ>
 8009aea:	4603      	mov	r3, r0
 8009aec:	2b17      	cmp	r3, #23
 8009aee:	d113      	bne.n	8009b18 <w5x00_read+0x50>
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	b2db      	uxtb	r3, r3
 8009af6:	4618      	mov	r0, r3
 8009af8:	f7fb fbed 	bl	80052d6 <getSn_RX_RSR>
 8009afc:	4603      	mov	r3, r0
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d00a      	beq.n	8009b18 <w5x00_read+0x50>
		return recv(n->my_socket, buffer, len);
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	687a      	ldr	r2, [r7, #4]
 8009b0a:	b292      	uxth	r2, r2
 8009b0c:	68b9      	ldr	r1, [r7, #8]
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f7fc f8fc 	bl	8005d0c <recv>
 8009b14:	4603      	mov	r3, r0
 8009b16:	e000      	b.n	8009b1a <w5x00_read+0x52>

	return SOCK_ERROR;
 8009b18:	2300      	movs	r3, #0
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3710      	adds	r7, #16
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}

08009b22 <w5x00_write>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval length of data sent or SOCKERR code
 */
int w5x00_write(Network* n, unsigned char* buffer, int len, long time)
{
 8009b22:	b580      	push	{r7, lr}
 8009b24:	b084      	sub	sp, #16
 8009b26:	af00      	add	r7, sp, #0
 8009b28:	60f8      	str	r0, [r7, #12]
 8009b2a:	60b9      	str	r1, [r7, #8]
 8009b2c:	607a      	str	r2, [r7, #4]
 8009b2e:	603b      	str	r3, [r7, #0]
	if(getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	009b      	lsls	r3, r3, #2
 8009b36:	3301      	adds	r3, #1
 8009b38:	00db      	lsls	r3, r3, #3
 8009b3a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f7fb fa24 	bl	8004f8c <WIZCHIP_READ>
 8009b44:	4603      	mov	r3, r0
 8009b46:	2b17      	cmp	r3, #23
 8009b48:	d10a      	bne.n	8009b60 <w5x00_write+0x3e>
		return send(n->my_socket, buffer, len);
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	b2db      	uxtb	r3, r3
 8009b50:	687a      	ldr	r2, [r7, #4]
 8009b52:	b292      	uxth	r2, r2
 8009b54:	68b9      	ldr	r1, [r7, #8]
 8009b56:	4618      	mov	r0, r3
 8009b58:	f7fb ffde 	bl	8005b18 <send>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	e000      	b.n	8009b62 <w5x00_write+0x40>

	return SOCK_ERROR;
 8009b60:	2300      	movs	r3, #0
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3710      	adds	r7, #16
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}

08009b6a <w5x00_disconnect>:
 * @brief disconnect function
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 */
void w5x00_disconnect(Network* n)
{
 8009b6a:	b580      	push	{r7, lr}
 8009b6c:	b082      	sub	sp, #8
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	6078      	str	r0, [r7, #4]
	disconnect(n->my_socket);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f7fb ff57 	bl	8005a2c <disconnect>
}
 8009b7e:	bf00      	nop
 8009b80:	3708      	adds	r7, #8
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}

08009b86 <ConnectNetwork>:
 *         ip : server iP.
 *         port : server port.
 * @retval SOCKOK code or SOCKERR code
 */
int ConnectNetwork(Network* n, uint8_t* ip, uint16_t port)
{
 8009b86:	b580      	push	{r7, lr}
 8009b88:	b086      	sub	sp, #24
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	60f8      	str	r0, [r7, #12]
 8009b8e:	60b9      	str	r1, [r7, #8]
 8009b90:	4613      	mov	r3, r2
 8009b92:	80fb      	strh	r3, [r7, #6]
	uint16_t myport = 12345;
 8009b94:	f243 0339 	movw	r3, #12345	; 0x3039
 8009b98:	82fb      	strh	r3, [r7, #22]

	if(socket(n->my_socket, Sn_MR_TCP, myport, 0) != n->my_socket)
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	b2d8      	uxtb	r0, r3
 8009ba0:	8afa      	ldrh	r2, [r7, #22]
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	2101      	movs	r1, #1
 8009ba6:	f7fb fce1 	bl	800556c <socket>
 8009baa:	4603      	mov	r3, r0
 8009bac:	461a      	mov	r2, r3
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d001      	beq.n	8009bba <ConnectNetwork+0x34>
		return SOCK_ERROR;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	e00d      	b.n	8009bd6 <ConnectNetwork+0x50>

	if(connect(n->my_socket, ip, port) != SOCK_OK)
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	b2db      	uxtb	r3, r3
 8009bc0:	88fa      	ldrh	r2, [r7, #6]
 8009bc2:	68b9      	ldr	r1, [r7, #8]
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f7fb fe55 	bl	8005874 <connect>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	2b01      	cmp	r3, #1
 8009bce:	d001      	beq.n	8009bd4 <ConnectNetwork+0x4e>
		return SOCK_ERROR;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	e000      	b.n	8009bd6 <ConnectNetwork+0x50>

	return SOCK_OK;
 8009bd4:	2301      	movs	r3, #1
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3718      	adds	r7, #24
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}

08009bde <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 8009bde:	b590      	push	{r4, r7, lr}
 8009be0:	b085      	sub	sp, #20
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6078      	str	r0, [r7, #4]
	int len = 0;
 8009be6:	2300      	movs	r3, #0
 8009be8:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	7a1b      	ldrb	r3, [r3, #8]
 8009bee:	2b03      	cmp	r3, #3
 8009bf0:	d102      	bne.n	8009bf8 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 8009bf2:	230c      	movs	r3, #12
 8009bf4:	60fb      	str	r3, [r7, #12]
 8009bf6:	e005      	b.n	8009c04 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	7a1b      	ldrb	r3, [r3, #8]
 8009bfc:	2b04      	cmp	r3, #4
 8009bfe:	d101      	bne.n	8009c04 <MQTTSerialize_connectLength+0x26>
		len = 10;
 8009c00:	230a      	movs	r3, #10
 8009c02:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	330c      	adds	r3, #12
 8009c08:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009c0c:	f000 fc43 	bl	800a496 <MQTTstrlen>
 8009c10:	4603      	mov	r3, r0
 8009c12:	3302      	adds	r3, #2
 8009c14:	68fa      	ldr	r2, [r7, #12]
 8009c16:	4413      	add	r3, r2
 8009c18:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	7edb      	ldrb	r3, [r3, #27]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d013      	beq.n	8009c4a <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	3324      	adds	r3, #36	; 0x24
 8009c26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009c2a:	f000 fc34 	bl	800a496 <MQTTstrlen>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	1c9c      	adds	r4, r3, #2
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	3330      	adds	r3, #48	; 0x30
 8009c36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009c3a:	f000 fc2c 	bl	800a496 <MQTTstrlen>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	4423      	add	r3, r4
 8009c42:	3302      	adds	r3, #2
 8009c44:	68fa      	ldr	r2, [r7, #12]
 8009c46:	4413      	add	r3, r2
 8009c48:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d103      	bne.n	8009c5a <MQTTSerialize_connectLength+0x7c>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d00a      	beq.n	8009c70 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	3340      	adds	r3, #64	; 0x40
 8009c5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009c62:	f000 fc18 	bl	800a496 <MQTTstrlen>
 8009c66:	4603      	mov	r3, r0
 8009c68:	3302      	adds	r3, #2
 8009c6a:	68fa      	ldr	r2, [r7, #12]
 8009c6c:	4413      	add	r3, r2
 8009c6e:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d103      	bne.n	8009c80 <MQTTSerialize_connectLength+0xa2>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d00a      	beq.n	8009c96 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	334c      	adds	r3, #76	; 0x4c
 8009c84:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009c88:	f000 fc05 	bl	800a496 <MQTTstrlen>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	3302      	adds	r3, #2
 8009c90:	68fa      	ldr	r2, [r7, #12]
 8009c92:	4413      	add	r3, r2
 8009c94:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 8009c96:	68fb      	ldr	r3, [r7, #12]
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3714      	adds	r7, #20
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd90      	pop	{r4, r7, pc}

08009ca0 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b08a      	sub	sp, #40	; 0x28
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	60f8      	str	r0, [r7, #12]
 8009ca8:	60b9      	str	r1, [r7, #8]
 8009caa:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	617b      	str	r3, [r7, #20]
	int len = 0;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	623b      	str	r3, [r7, #32]
	int rc = -1;
 8009cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8009cc0:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f7ff ff8b 	bl	8009bde <MQTTSerialize_connectLength>
 8009cc8:	6238      	str	r0, [r7, #32]
 8009cca:	6a38      	ldr	r0, [r7, #32]
 8009ccc:	f000 fa98 	bl	800a200 <MQTTPacket_len>
 8009cd0:	4602      	mov	r2, r0
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	da03      	bge.n	8009ce0 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8009cd8:	f06f 0301 	mvn.w	r3, #1
 8009cdc:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 8009cde:	e0c2      	b.n	8009e66 <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 8009ce4:	7e3b      	ldrb	r3, [r7, #24]
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	f362 1307 	bfi	r3, r2, #4, #4
 8009cec:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8009cee:	7e3a      	ldrb	r2, [r7, #24]
 8009cf0:	f107 031c 	add.w	r3, r7, #28
 8009cf4:	4611      	mov	r1, r2
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f000 fb11 	bl	800a31e <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 8009cfc:	69fb      	ldr	r3, [r7, #28]
 8009cfe:	6a39      	ldr	r1, [r7, #32]
 8009d00:	4618      	mov	r0, r3
 8009d02:	f000 fa12 	bl	800a12a <MQTTPacket_encode>
 8009d06:	4602      	mov	r2, r0
 8009d08:	69fb      	ldr	r3, [r7, #28]
 8009d0a:	4413      	add	r3, r2
 8009d0c:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	7a1b      	ldrb	r3, [r3, #8]
 8009d12:	2b04      	cmp	r3, #4
 8009d14:	d10c      	bne.n	8009d30 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 8009d16:	f107 031c 	add.w	r3, r7, #28
 8009d1a:	4955      	ldr	r1, [pc, #340]	; (8009e70 <MQTTSerialize_connect+0x1d0>)
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f000 fb3c 	bl	800a39a <writeCString>
		writeChar(&ptr, (char) 4);
 8009d22:	f107 031c 	add.w	r3, r7, #28
 8009d26:	2104      	movs	r1, #4
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f000 faf8 	bl	800a31e <writeChar>
 8009d2e:	e00b      	b.n	8009d48 <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 8009d30:	f107 031c 	add.w	r3, r7, #28
 8009d34:	494f      	ldr	r1, [pc, #316]	; (8009e74 <MQTTSerialize_connect+0x1d4>)
 8009d36:	4618      	mov	r0, r3
 8009d38:	f000 fb2f 	bl	800a39a <writeCString>
		writeChar(&ptr, (char) 3);
 8009d3c:	f107 031c 	add.w	r3, r7, #28
 8009d40:	2103      	movs	r1, #3
 8009d42:	4618      	mov	r0, r3
 8009d44:	f000 faeb 	bl	800a31e <writeChar>
	}

	flags.all = 0;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	7e9b      	ldrb	r3, [r3, #26]
 8009d50:	f003 0301 	and.w	r3, r3, #1
 8009d54:	b2da      	uxtb	r2, r3
 8009d56:	7d3b      	ldrb	r3, [r7, #20]
 8009d58:	f362 0341 	bfi	r3, r2, #1, #1
 8009d5c:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	7edb      	ldrb	r3, [r3, #27]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	bf14      	ite	ne
 8009d66:	2301      	movne	r3, #1
 8009d68:	2300      	moveq	r3, #0
 8009d6a:	b2da      	uxtb	r2, r3
 8009d6c:	7d3b      	ldrb	r3, [r7, #20]
 8009d6e:	f362 0382 	bfi	r3, r2, #2, #1
 8009d72:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 8009d74:	7d3b      	ldrb	r3, [r7, #20]
 8009d76:	f003 0304 	and.w	r3, r3, #4
 8009d7a:	b2db      	uxtb	r3, r3
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d013      	beq.n	8009da8 <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d86:	f003 0303 	and.w	r3, r3, #3
 8009d8a:	b2da      	uxtb	r2, r3
 8009d8c:	7d3b      	ldrb	r3, [r7, #20]
 8009d8e:	f362 03c4 	bfi	r3, r2, #3, #2
 8009d92:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d9a:	f003 0301 	and.w	r3, r3, #1
 8009d9e:	b2da      	uxtb	r2, r3
 8009da0:	7d3b      	ldrb	r3, [r7, #20]
 8009da2:	f362 1345 	bfi	r3, r2, #5, #1
 8009da6:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d103      	bne.n	8009db8 <MQTTSerialize_connect+0x118>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d003      	beq.n	8009dc0 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 8009db8:	7d3b      	ldrb	r3, [r7, #20]
 8009dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dbe:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d103      	bne.n	8009dd0 <MQTTSerialize_connect+0x130>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d003      	beq.n	8009dd8 <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 8009dd0:	7d3b      	ldrb	r3, [r7, #20]
 8009dd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dd6:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 8009dd8:	7d3a      	ldrb	r2, [r7, #20]
 8009dda:	f107 031c 	add.w	r3, r7, #28
 8009dde:	4611      	mov	r1, r2
 8009de0:	4618      	mov	r0, r3
 8009de2:	f000 fa9c 	bl	800a31e <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	8b1b      	ldrh	r3, [r3, #24]
 8009dea:	461a      	mov	r2, r3
 8009dec:	f107 031c 	add.w	r3, r7, #28
 8009df0:	4611      	mov	r1, r2
 8009df2:	4618      	mov	r0, r3
 8009df4:	f000 faa8 	bl	800a348 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f107 001c 	add.w	r0, r7, #28
 8009dfe:	330c      	adds	r3, #12
 8009e00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009e02:	f000 fae9 	bl	800a3d8 <writeMQTTString>
	if (options->willFlag)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	7edb      	ldrb	r3, [r3, #27]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d00d      	beq.n	8009e2a <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f107 001c 	add.w	r0, r7, #28
 8009e14:	3324      	adds	r3, #36	; 0x24
 8009e16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009e18:	f000 fade 	bl	800a3d8 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f107 001c 	add.w	r0, r7, #28
 8009e22:	3330      	adds	r3, #48	; 0x30
 8009e24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009e26:	f000 fad7 	bl	800a3d8 <writeMQTTString>
	}
	if (flags.bits.username)
 8009e2a:	7d3b      	ldrb	r3, [r7, #20]
 8009e2c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009e30:	b2db      	uxtb	r3, r3
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d006      	beq.n	8009e44 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f107 001c 	add.w	r0, r7, #28
 8009e3c:	3340      	adds	r3, #64	; 0x40
 8009e3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009e40:	f000 faca 	bl	800a3d8 <writeMQTTString>
	if (flags.bits.password)
 8009e44:	7d3b      	ldrb	r3, [r7, #20]
 8009e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e4a:	b2db      	uxtb	r3, r3
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d006      	beq.n	8009e5e <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f107 001c 	add.w	r0, r7, #28
 8009e56:	334c      	adds	r3, #76	; 0x4c
 8009e58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009e5a:	f000 fabd 	bl	800a3d8 <writeMQTTString>

	rc = ptr - buf;
 8009e5e:	69fa      	ldr	r2, [r7, #28]
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	1ad3      	subs	r3, r2, r3
 8009e64:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 8009e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3728      	adds	r7, #40	; 0x28
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}
 8009e70:	0800c3a8 	.word	0x0800c3a8
 8009e74:	0800c3b0 	.word	0x0800c3b0

08009e78 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b08a      	sub	sp, #40	; 0x28
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	60f8      	str	r0, [r7, #12]
 8009e80:	60b9      	str	r1, [r7, #8]
 8009e82:	607a      	str	r2, [r7, #4]
 8009e84:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8009e86:	2300      	movs	r3, #0
 8009e88:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8009e92:	2300      	movs	r3, #0
 8009e94:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 8009e96:	2300      	movs	r3, #0
 8009e98:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8009e9a:	f107 0318 	add.w	r3, r7, #24
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f000 fa29 	bl	800a2f6 <readChar>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 8009ea8:	7f3b      	ldrb	r3, [r7, #28]
 8009eaa:	f023 030f 	bic.w	r3, r3, #15
 8009eae:	b2db      	uxtb	r3, r3
 8009eb0:	2b20      	cmp	r3, #32
 8009eb2:	d12e      	bne.n	8009f12 <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8009eb4:	69bb      	ldr	r3, [r7, #24]
 8009eb6:	f107 0214 	add.w	r2, r7, #20
 8009eba:	4611      	mov	r1, r2
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f000 f9e9 	bl	800a294 <MQTTPacket_decodeBuf>
 8009ec2:	6278      	str	r0, [r7, #36]	; 0x24
 8009ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ec6:	69bb      	ldr	r3, [r7, #24]
 8009ec8:	4413      	add	r3, r2
 8009eca:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8009ecc:	69bb      	ldr	r3, [r7, #24]
 8009ece:	697a      	ldr	r2, [r7, #20]
 8009ed0:	4413      	add	r3, r2
 8009ed2:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 8009ed4:	69bb      	ldr	r3, [r7, #24]
 8009ed6:	6a3a      	ldr	r2, [r7, #32]
 8009ed8:	1ad3      	subs	r3, r2, r3
 8009eda:	2b01      	cmp	r3, #1
 8009edc:	dd1b      	ble.n	8009f16 <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 8009ede:	f107 0318 	add.w	r3, r7, #24
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f000 fa07 	bl	800a2f6 <readChar>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 8009eec:	7c3b      	ldrb	r3, [r7, #16]
 8009eee:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009ef2:	b2db      	uxtb	r3, r3
 8009ef4:	461a      	mov	r2, r3
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 8009efa:	f107 0318 	add.w	r3, r7, #24
 8009efe:	4618      	mov	r0, r3
 8009f00:	f000 f9f9 	bl	800a2f6 <readChar>
 8009f04:	4603      	mov	r3, r0
 8009f06:	461a      	mov	r2, r3
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	701a      	strb	r2, [r3, #0]

	rc = 1;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	627b      	str	r3, [r7, #36]	; 0x24
 8009f10:	e002      	b.n	8009f18 <MQTTDeserialize_connack+0xa0>
		goto exit;
 8009f12:	bf00      	nop
 8009f14:	e000      	b.n	8009f18 <MQTTDeserialize_connack+0xa0>
		goto exit;
 8009f16:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8009f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3728      	adds	r7, #40	; 0x28
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}

08009f22 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 8009f22:	b580      	push	{r7, lr}
 8009f24:	b088      	sub	sp, #32
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	60f8      	str	r0, [r7, #12]
 8009f2a:	60b9      	str	r1, [r7, #8]
 8009f2c:	4613      	mov	r3, r2
 8009f2e:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 8009f30:	2300      	movs	r3, #0
 8009f32:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 8009f34:	f04f 33ff 	mov.w	r3, #4294967295
 8009f38:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	2b01      	cmp	r3, #1
 8009f42:	dc03      	bgt.n	8009f4c <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8009f44:	f06f 0301 	mvn.w	r3, #1
 8009f48:	61fb      	str	r3, [r7, #28]
		goto exit;
 8009f4a:	e01d      	b.n	8009f88 <MQTTSerialize_zero+0x66>
	}
	header.byte = 0;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 8009f50:	79fb      	ldrb	r3, [r7, #7]
 8009f52:	f003 030f 	and.w	r3, r3, #15
 8009f56:	b2da      	uxtb	r2, r3
 8009f58:	7e3b      	ldrb	r3, [r7, #24]
 8009f5a:	f362 1307 	bfi	r3, r2, #4, #4
 8009f5e:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8009f60:	7e3a      	ldrb	r2, [r7, #24]
 8009f62:	f107 0314 	add.w	r3, r7, #20
 8009f66:	4611      	mov	r1, r2
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f000 f9d8 	bl	800a31e <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	2100      	movs	r1, #0
 8009f72:	4618      	mov	r0, r3
 8009f74:	f000 f8d9 	bl	800a12a <MQTTPacket_encode>
 8009f78:	4602      	mov	r2, r0
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	4413      	add	r3, r2
 8009f7e:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 8009f80:	697a      	ldr	r2, [r7, #20]
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	1ad3      	subs	r3, r2, r3
 8009f86:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8009f88:	69fb      	ldr	r3, [r7, #28]
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3720      	adds	r7, #32
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}

08009f92 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 8009f92:	b580      	push	{r7, lr}
 8009f94:	b082      	sub	sp, #8
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	6078      	str	r0, [r7, #4]
 8009f9a:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 8009f9c:	220c      	movs	r2, #12
 8009f9e:	6839      	ldr	r1, [r7, #0]
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f7ff ffbe 	bl	8009f22 <MQTTSerialize_zero>
 8009fa6:	4603      	mov	r3, r0
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3708      	adds	r7, #8
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}

08009fb0 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b08a      	sub	sp, #40	; 0x28
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	60f8      	str	r0, [r7, #12]
 8009fb8:	60b9      	str	r1, [r7, #8]
 8009fba:	607a      	str	r2, [r7, #4]
 8009fbc:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8009fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fc4:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8009fd2:	f107 0318 	add.w	r3, r7, #24
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f000 f98d 	bl	800a2f6 <readChar>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 8009fe0:	7f3b      	ldrb	r3, [r7, #28]
 8009fe2:	f023 030f 	bic.w	r3, r3, #15
 8009fe6:	b2db      	uxtb	r3, r3
 8009fe8:	2b30      	cmp	r3, #48	; 0x30
 8009fea:	d14b      	bne.n	800a084 <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 8009fec:	7f3b      	ldrb	r3, [r7, #28]
 8009fee:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009ff2:	b2db      	uxtb	r3, r3
 8009ff4:	461a      	mov	r2, r3
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 8009ffa:	7f3b      	ldrb	r3, [r7, #28]
 8009ffc:	f3c3 0341 	ubfx	r3, r3, #1, #2
 800a000:	b2db      	uxtb	r3, r3
 800a002:	461a      	mov	r2, r3
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 800a008:	7f3b      	ldrb	r3, [r7, #28]
 800a00a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a00e:	b2db      	uxtb	r3, r3
 800a010:	461a      	mov	r2, r3
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800a016:	69bb      	ldr	r3, [r7, #24]
 800a018:	f107 0214 	add.w	r2, r7, #20
 800a01c:	4611      	mov	r1, r2
 800a01e:	4618      	mov	r0, r3
 800a020:	f000 f938 	bl	800a294 <MQTTPacket_decodeBuf>
 800a024:	6278      	str	r0, [r7, #36]	; 0x24
 800a026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a028:	69bb      	ldr	r3, [r7, #24]
 800a02a:	4413      	add	r3, r2
 800a02c:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800a02e:	69bb      	ldr	r3, [r7, #24]
 800a030:	697a      	ldr	r2, [r7, #20]
 800a032:	4413      	add	r3, r2
 800a034:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 800a036:	f107 0318 	add.w	r3, r7, #24
 800a03a:	6a3a      	ldr	r2, [r7, #32]
 800a03c:	4619      	mov	r1, r3
 800a03e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a040:	f000 f9f8 	bl	800a434 <readMQTTLenString>
 800a044:	4603      	mov	r3, r0
 800a046:	2b00      	cmp	r3, #0
 800a048:	d01e      	beq.n	800a088 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 800a04a:	69bb      	ldr	r3, [r7, #24]
 800a04c:	6a3a      	ldr	r2, [r7, #32]
 800a04e:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 800a050:	2b00      	cmp	r3, #0
 800a052:	db19      	blt.n	800a088 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	dd08      	ble.n	800a06e <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 800a05c:	f107 0318 	add.w	r3, r7, #24
 800a060:	4618      	mov	r0, r3
 800a062:	f000 f92d 	bl	800a2c0 <readInt>
 800a066:	4603      	mov	r3, r0
 800a068:	b29a      	uxth	r2, r3
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 800a06e:	69bb      	ldr	r3, [r7, #24]
 800a070:	6a3a      	ldr	r2, [r7, #32]
 800a072:	1ad2      	subs	r2, r2, r3
 800a074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a076:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 800a078:	69ba      	ldr	r2, [r7, #24]
 800a07a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a07c:	601a      	str	r2, [r3, #0]
	rc = 1;
 800a07e:	2301      	movs	r3, #1
 800a080:	627b      	str	r3, [r7, #36]	; 0x24
 800a082:	e002      	b.n	800a08a <MQTTDeserialize_publish+0xda>
		goto exit;
 800a084:	bf00      	nop
 800a086:	e000      	b.n	800a08a <MQTTDeserialize_publish+0xda>
		goto exit;
 800a088:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800a08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3728      	adds	r7, #40	; 0x28
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}

0800a094 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b08a      	sub	sp, #40	; 0x28
 800a098:	af00      	add	r7, sp, #0
 800a09a:	60f8      	str	r0, [r7, #12]
 800a09c:	60b9      	str	r1, [r7, #8]
 800a09e:	607a      	str	r2, [r7, #4]
 800a0a0:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800a0b2:	f107 0318 	add.w	r3, r7, #24
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f000 f91d 	bl	800a2f6 <readChar>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 800a0c0:	7f3b      	ldrb	r3, [r7, #28]
 800a0c2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a0c6:	b2db      	uxtb	r3, r3
 800a0c8:	461a      	mov	r2, r3
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 800a0ce:	7f3b      	ldrb	r3, [r7, #28]
 800a0d0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800a0d4:	b2db      	uxtb	r3, r3
 800a0d6:	461a      	mov	r2, r3
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800a0dc:	69bb      	ldr	r3, [r7, #24]
 800a0de:	f107 0214 	add.w	r2, r7, #20
 800a0e2:	4611      	mov	r1, r2
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f000 f8d5 	bl	800a294 <MQTTPacket_decodeBuf>
 800a0ea:	6278      	str	r0, [r7, #36]	; 0x24
 800a0ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0ee:	69bb      	ldr	r3, [r7, #24]
 800a0f0:	4413      	add	r3, r2
 800a0f2:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800a0f4:	69bb      	ldr	r3, [r7, #24]
 800a0f6:	697a      	ldr	r2, [r7, #20]
 800a0f8:	4413      	add	r3, r2
 800a0fa:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 800a0fc:	69bb      	ldr	r3, [r7, #24]
 800a0fe:	6a3a      	ldr	r2, [r7, #32]
 800a100:	1ad3      	subs	r3, r2, r3
 800a102:	2b01      	cmp	r3, #1
 800a104:	dd0b      	ble.n	800a11e <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 800a106:	f107 0318 	add.w	r3, r7, #24
 800a10a:	4618      	mov	r0, r3
 800a10c:	f000 f8d8 	bl	800a2c0 <readInt>
 800a110:	4603      	mov	r3, r0
 800a112:	b29a      	uxth	r2, r3
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	801a      	strh	r2, [r3, #0]

	rc = 1;
 800a118:	2301      	movs	r3, #1
 800a11a:	627b      	str	r3, [r7, #36]	; 0x24
 800a11c:	e000      	b.n	800a120 <MQTTDeserialize_ack+0x8c>
		goto exit;
 800a11e:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800a120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a122:	4618      	mov	r0, r3
 800a124:	3728      	adds	r7, #40	; 0x28
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}

0800a12a <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 800a12a:	b480      	push	{r7}
 800a12c:	b085      	sub	sp, #20
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6078      	str	r0, [r7, #4]
 800a132:	6039      	str	r1, [r7, #0]
	int rc = 0;
 800a134:	2300      	movs	r3, #0
 800a136:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	425a      	negs	r2, r3
 800a13c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a140:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a144:	bf58      	it	pl
 800a146:	4253      	negpl	r3, r2
 800a148:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	da00      	bge.n	800a152 <MQTTPacket_encode+0x28>
 800a150:	337f      	adds	r3, #127	; 0x7f
 800a152:	11db      	asrs	r3, r3, #7
 800a154:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	dd03      	ble.n	800a164 <MQTTPacket_encode+0x3a>
			d |= 0x80;
 800a15c:	7afb      	ldrb	r3, [r7, #11]
 800a15e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a162:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	1c5a      	adds	r2, r3, #1
 800a168:	60fa      	str	r2, [r7, #12]
 800a16a:	461a      	mov	r2, r3
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	4413      	add	r3, r2
 800a170:	7afa      	ldrb	r2, [r7, #11]
 800a172:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	2b00      	cmp	r3, #0
 800a178:	dcde      	bgt.n	800a138 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 800a17a:	68fb      	ldr	r3, [r7, #12]
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3714      	adds	r7, #20
 800a180:	46bd      	mov	sp, r7
 800a182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a186:	4770      	bx	lr

0800a188 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b086      	sub	sp, #24
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 800a192:	2301      	movs	r3, #1
 800a194:	617b      	str	r3, [r7, #20]
	int len = 0;
 800a196:	2300      	movs	r3, #0
 800a198:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	2200      	movs	r2, #0
 800a19e:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 800a1a0:	f04f 33ff 	mov.w	r3, #4294967295
 800a1a4:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	3301      	adds	r3, #1
 800a1aa:	613b      	str	r3, [r7, #16]
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	2b04      	cmp	r3, #4
 800a1b0:	dd03      	ble.n	800a1ba <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 800a1b2:	f04f 33ff 	mov.w	r3, #4294967295
 800a1b6:	60fb      	str	r3, [r7, #12]
			goto exit;
 800a1b8:	e01d      	b.n	800a1f6 <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 800a1ba:	f107 020b 	add.w	r2, r7, #11
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2101      	movs	r1, #1
 800a1c2:	4610      	mov	r0, r2
 800a1c4:	4798      	blx	r3
 800a1c6:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	2b01      	cmp	r3, #1
 800a1cc:	d112      	bne.n	800a1f4 <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	681a      	ldr	r2, [r3, #0]
 800a1d2:	7afb      	ldrb	r3, [r7, #11]
 800a1d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1d8:	6979      	ldr	r1, [r7, #20]
 800a1da:	fb01 f303 	mul.w	r3, r1, r3
 800a1de:	441a      	add	r2, r3
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	01db      	lsls	r3, r3, #7
 800a1e8:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 800a1ea:	7afb      	ldrb	r3, [r7, #11]
 800a1ec:	b25b      	sxtb	r3, r3
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	dbd6      	blt.n	800a1a0 <MQTTPacket_decode+0x18>
exit:
 800a1f2:	e000      	b.n	800a1f6 <MQTTPacket_decode+0x6e>
			goto exit;
 800a1f4:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 800a1f6:	693b      	ldr	r3, [r7, #16]
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3718      	adds	r7, #24
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}

0800a200 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 800a200:	b480      	push	{r7}
 800a202:	b083      	sub	sp, #12
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	3301      	adds	r3, #1
 800a20c:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2b7f      	cmp	r3, #127	; 0x7f
 800a212:	dc03      	bgt.n	800a21c <MQTTPacket_len+0x1c>
		rem_len += 1;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	3301      	adds	r3, #1
 800a218:	607b      	str	r3, [r7, #4]
 800a21a:	e012      	b.n	800a242 <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a222:	da03      	bge.n	800a22c <MQTTPacket_len+0x2c>
		rem_len += 2;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	3302      	adds	r3, #2
 800a228:	607b      	str	r3, [r7, #4]
 800a22a:	e00a      	b.n	800a242 <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	4a08      	ldr	r2, [pc, #32]	; (800a250 <MQTTPacket_len+0x50>)
 800a230:	4293      	cmp	r3, r2
 800a232:	dc03      	bgt.n	800a23c <MQTTPacket_len+0x3c>
		rem_len += 3;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	3303      	adds	r3, #3
 800a238:	607b      	str	r3, [r7, #4]
 800a23a:	e002      	b.n	800a242 <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	3304      	adds	r3, #4
 800a240:	607b      	str	r3, [r7, #4]
	return rem_len;
 800a242:	687b      	ldr	r3, [r7, #4]
}
 800a244:	4618      	mov	r0, r3
 800a246:	370c      	adds	r7, #12
 800a248:	46bd      	mov	sp, r7
 800a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24e:	4770      	bx	lr
 800a250:	001ffffe 	.word	0x001ffffe

0800a254 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 800a254:	b480      	push	{r7}
 800a256:	b085      	sub	sp, #20
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 800a25e:	2300      	movs	r3, #0
 800a260:	60fb      	str	r3, [r7, #12]
 800a262:	e00a      	b.n	800a27a <bufchar+0x26>
		*c = *bufptr++;
 800a264:	4b0a      	ldr	r3, [pc, #40]	; (800a290 <bufchar+0x3c>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	1c5a      	adds	r2, r3, #1
 800a26a:	4909      	ldr	r1, [pc, #36]	; (800a290 <bufchar+0x3c>)
 800a26c:	600a      	str	r2, [r1, #0]
 800a26e:	781a      	ldrb	r2, [r3, #0]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	3301      	adds	r3, #1
 800a278:	60fb      	str	r3, [r7, #12]
 800a27a:	68fa      	ldr	r2, [r7, #12]
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	429a      	cmp	r2, r3
 800a280:	dbf0      	blt.n	800a264 <bufchar+0x10>
	return count;
 800a282:	683b      	ldr	r3, [r7, #0]
}
 800a284:	4618      	mov	r0, r3
 800a286:	3714      	adds	r7, #20
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr
 800a290:	20001ae0 	.word	0x20001ae0

0800a294 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b082      	sub	sp, #8
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 800a29e:	4a06      	ldr	r2, [pc, #24]	; (800a2b8 <MQTTPacket_decodeBuf+0x24>)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 800a2a4:	6839      	ldr	r1, [r7, #0]
 800a2a6:	4805      	ldr	r0, [pc, #20]	; (800a2bc <MQTTPacket_decodeBuf+0x28>)
 800a2a8:	f7ff ff6e 	bl	800a188 <MQTTPacket_decode>
 800a2ac:	4603      	mov	r3, r0
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3708      	adds	r7, #8
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
 800a2b6:	bf00      	nop
 800a2b8:	20001ae0 	.word	0x20001ae0
 800a2bc:	0800a255 	.word	0x0800a255

0800a2c0 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b085      	sub	sp, #20
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	781b      	ldrb	r3, [r3, #0]
 800a2d2:	021b      	lsls	r3, r3, #8
 800a2d4:	68fa      	ldr	r2, [r7, #12]
 800a2d6:	3201      	adds	r2, #1
 800a2d8:	7812      	ldrb	r2, [r2, #0]
 800a2da:	4413      	add	r3, r2
 800a2dc:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	1c9a      	adds	r2, r3, #2
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	601a      	str	r2, [r3, #0]
	return len;
 800a2e8:	68bb      	ldr	r3, [r7, #8]
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3714      	adds	r7, #20
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr

0800a2f6 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 800a2f6:	b480      	push	{r7}
 800a2f8:	b085      	sub	sp, #20
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	781b      	ldrb	r3, [r3, #0]
 800a304:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	1c5a      	adds	r2, r3, #1
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	601a      	str	r2, [r3, #0]
	return c;
 800a310:	7bfb      	ldrb	r3, [r7, #15]
}
 800a312:	4618      	mov	r0, r3
 800a314:	3714      	adds	r7, #20
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	4770      	bx	lr

0800a31e <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 800a31e:	b480      	push	{r7}
 800a320:	b083      	sub	sp, #12
 800a322:	af00      	add	r7, sp, #0
 800a324:	6078      	str	r0, [r7, #4]
 800a326:	460b      	mov	r3, r1
 800a328:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	78fa      	ldrb	r2, [r7, #3]
 800a330:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	1c5a      	adds	r2, r3, #1
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	601a      	str	r2, [r3, #0]
}
 800a33c:	bf00      	nop
 800a33e:	370c      	adds	r7, #12
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr

0800a348 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 800a348:	b480      	push	{r7}
 800a34a:	b083      	sub	sp, #12
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	2b00      	cmp	r3, #0
 800a356:	da00      	bge.n	800a35a <writeInt+0x12>
 800a358:	33ff      	adds	r3, #255	; 0xff
 800a35a:	121b      	asrs	r3, r3, #8
 800a35c:	461a      	mov	r2, r3
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	b2d2      	uxtb	r2, r2
 800a364:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	1c5a      	adds	r2, r3, #1
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	425a      	negs	r2, r3
 800a374:	b2db      	uxtb	r3, r3
 800a376:	b2d2      	uxtb	r2, r2
 800a378:	bf58      	it	pl
 800a37a:	4253      	negpl	r3, r2
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	6812      	ldr	r2, [r2, #0]
 800a380:	b2db      	uxtb	r3, r3
 800a382:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	1c5a      	adds	r2, r3, #1
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	601a      	str	r2, [r3, #0]
}
 800a38e:	bf00      	nop
 800a390:	370c      	adds	r7, #12
 800a392:	46bd      	mov	sp, r7
 800a394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a398:	4770      	bx	lr

0800a39a <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 800a39a:	b580      	push	{r7, lr}
 800a39c:	b084      	sub	sp, #16
 800a39e:	af00      	add	r7, sp, #0
 800a3a0:	6078      	str	r0, [r7, #4]
 800a3a2:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 800a3a4:	6838      	ldr	r0, [r7, #0]
 800a3a6:	f7f5 ff3b 	bl	8000220 <strlen>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 800a3ae:	68f9      	ldr	r1, [r7, #12]
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f7ff ffc9 	bl	800a348 <writeInt>
	memcpy(*pptr, string, len);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	68fa      	ldr	r2, [r7, #12]
 800a3bc:	6839      	ldr	r1, [r7, #0]
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f000 faf2 	bl	800a9a8 <memcpy>
	*pptr += len;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681a      	ldr	r2, [r3, #0]
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	441a      	add	r2, r3
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	601a      	str	r2, [r3, #0]
}
 800a3d0:	bf00      	nop
 800a3d2:	3710      	adds	r7, #16
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}

0800a3d8 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b084      	sub	sp, #16
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	60f8      	str	r0, [r7, #12]
 800a3e0:	4638      	mov	r0, r7
 800a3e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	dd12      	ble.n	800a412 <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	4619      	mov	r1, r3
 800a3f0:	68f8      	ldr	r0, [r7, #12]
 800a3f2:	f7ff ffa9 	bl	800a348 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	68b9      	ldr	r1, [r7, #8]
 800a3fc:	687a      	ldr	r2, [r7, #4]
 800a3fe:	4618      	mov	r0, r3
 800a400:	f000 fad2 	bl	800a9a8 <memcpy>
		*pptr += mqttstring.lenstring.len;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	687a      	ldr	r2, [r7, #4]
 800a40a:	441a      	add	r2, r3
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 800a410:	e00c      	b.n	800a42c <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d005      	beq.n	800a424 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	4619      	mov	r1, r3
 800a41c:	68f8      	ldr	r0, [r7, #12]
 800a41e:	f7ff ffbc 	bl	800a39a <writeCString>
}
 800a422:	e003      	b.n	800a42c <writeMQTTString+0x54>
		writeInt(pptr, 0);
 800a424:	2100      	movs	r1, #0
 800a426:	68f8      	ldr	r0, [r7, #12]
 800a428:	f7ff ff8e 	bl	800a348 <writeInt>
}
 800a42c:	bf00      	nop
 800a42e:	3710      	adds	r7, #16
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b086      	sub	sp, #24
 800a438:	af00      	add	r7, sp, #0
 800a43a:	60f8      	str	r0, [r7, #12]
 800a43c:	60b9      	str	r1, [r7, #8]
 800a43e:	607a      	str	r2, [r7, #4]
	int rc = 0;
 800a440:	2300      	movs	r3, #0
 800a442:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	687a      	ldr	r2, [r7, #4]
 800a44a:	1ad3      	subs	r3, r2, r3
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	dd1a      	ble.n	800a486 <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 800a450:	68b8      	ldr	r0, [r7, #8]
 800a452:	f7ff ff35 	bl	800a2c0 <readInt>
 800a456:	4602      	mov	r2, r0
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	68fa      	ldr	r2, [r7, #12]
 800a462:	6852      	ldr	r2, [r2, #4]
 800a464:	4413      	add	r3, r2
 800a466:	687a      	ldr	r2, [r7, #4]
 800a468:	429a      	cmp	r2, r3
 800a46a:	d30c      	bcc.n	800a486 <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	681a      	ldr	r2, [r3, #0]
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	68fa      	ldr	r2, [r7, #12]
 800a47a:	6852      	ldr	r2, [r2, #4]
 800a47c:	441a      	add	r2, r3
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	601a      	str	r2, [r3, #0]
			rc = 1;
 800a482:	2301      	movs	r3, #1
 800a484:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2200      	movs	r2, #0
 800a48a:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 800a48c:	697b      	ldr	r3, [r7, #20]
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3718      	adds	r7, #24
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}

0800a496 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 800a496:	b580      	push	{r7, lr}
 800a498:	b086      	sub	sp, #24
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	1d3b      	adds	r3, r7, #4
 800a49e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d006      	beq.n	800a4ba <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f7f5 feb6 	bl	8000220 <strlen>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	617b      	str	r3, [r7, #20]
 800a4b8:	e001      	b.n	800a4be <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	617b      	str	r3, [r7, #20]
	return rc;
 800a4be:	697b      	ldr	r3, [r7, #20]
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3718      	adds	r7, #24
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}

0800a4c8 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b086      	sub	sp, #24
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	6039      	str	r1, [r7, #0]
	int alen = 0,
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	617b      	str	r3, [r7, #20]
		blen = 0;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d00a      	beq.n	800a4f8 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f7f5 fe97 	bl	8000220 <strlen>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	617b      	str	r3, [r7, #20]
 800a4f6:	e005      	b.n	800a504 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	689b      	ldr	r3, [r3, #8]
 800a4fc:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	685b      	ldr	r3, [r3, #4]
 800a502:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 800a504:	6838      	ldr	r0, [r7, #0]
 800a506:	f7f5 fe8b 	bl	8000220 <strlen>
 800a50a:	4603      	mov	r3, r0
 800a50c:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 800a50e:	697a      	ldr	r2, [r7, #20]
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	429a      	cmp	r2, r3
 800a514:	d10a      	bne.n	800a52c <MQTTPacket_equals+0x64>
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	461a      	mov	r2, r3
 800a51a:	6839      	ldr	r1, [r7, #0]
 800a51c:	6938      	ldr	r0, [r7, #16]
 800a51e:	f000 fc4f 	bl	800adc0 <strncmp>
 800a522:	4603      	mov	r3, r0
 800a524:	2b00      	cmp	r3, #0
 800a526:	d101      	bne.n	800a52c <MQTTPacket_equals+0x64>
 800a528:	2301      	movs	r3, #1
 800a52a:	e000      	b.n	800a52e <MQTTPacket_equals+0x66>
 800a52c:	2300      	movs	r3, #0
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3718      	adds	r7, #24
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}

0800a536 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 800a536:	b580      	push	{r7, lr}
 800a538:	b088      	sub	sp, #32
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	60f8      	str	r0, [r7, #12]
 800a53e:	60b9      	str	r1, [r7, #8]
 800a540:	4611      	mov	r1, r2
 800a542:	461a      	mov	r2, r3
 800a544:	460b      	mov	r3, r1
 800a546:	71fb      	strb	r3, [r7, #7]
 800a548:	4613      	mov	r3, r2
 800a54a:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 800a54c:	2300      	movs	r3, #0
 800a54e:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 800a550:	2300      	movs	r3, #0
 800a552:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	2b03      	cmp	r3, #3
 800a55c:	dc03      	bgt.n	800a566 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800a55e:	f06f 0301 	mvn.w	r3, #1
 800a562:	61fb      	str	r3, [r7, #28]
		goto exit;
 800a564:	e037      	b.n	800a5d6 <MQTTSerialize_ack+0xa0>
	}
	header.bits.type = packettype;
 800a566:	79fb      	ldrb	r3, [r7, #7]
 800a568:	f003 030f 	and.w	r3, r3, #15
 800a56c:	b2da      	uxtb	r2, r3
 800a56e:	7e3b      	ldrb	r3, [r7, #24]
 800a570:	f362 1307 	bfi	r3, r2, #4, #4
 800a574:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 800a576:	79bb      	ldrb	r3, [r7, #6]
 800a578:	f003 0301 	and.w	r3, r3, #1
 800a57c:	b2da      	uxtb	r2, r3
 800a57e:	7e3b      	ldrb	r3, [r7, #24]
 800a580:	f362 03c3 	bfi	r3, r2, #3, #1
 800a584:	763b      	strb	r3, [r7, #24]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 800a586:	79fb      	ldrb	r3, [r7, #7]
 800a588:	2b06      	cmp	r3, #6
 800a58a:	bf0c      	ite	eq
 800a58c:	2301      	moveq	r3, #1
 800a58e:	2300      	movne	r3, #0
 800a590:	b2db      	uxtb	r3, r3
 800a592:	f003 0303 	and.w	r3, r3, #3
 800a596:	b2da      	uxtb	r2, r3
 800a598:	7e3b      	ldrb	r3, [r7, #24]
 800a59a:	f362 0342 	bfi	r3, r2, #1, #2
 800a59e:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 800a5a0:	7e3a      	ldrb	r2, [r7, #24]
 800a5a2:	f107 0314 	add.w	r3, r7, #20
 800a5a6:	4611      	mov	r1, r2
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f7ff feb8 	bl	800a31e <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	2102      	movs	r1, #2
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f7ff fdb9 	bl	800a12a <MQTTPacket_encode>
 800a5b8:	4602      	mov	r2, r0
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	4413      	add	r3, r2
 800a5be:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 800a5c0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a5c2:	f107 0314 	add.w	r3, r7, #20
 800a5c6:	4611      	mov	r1, r2
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f7ff febd 	bl	800a348 <writeInt>
	rc = ptr - buf;
 800a5ce:	697a      	ldr	r2, [r7, #20]
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	1ad3      	subs	r3, r2, r3
 800a5d4:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800a5d6:	69fb      	ldr	r3, [r7, #28]
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3720      	adds	r7, #32
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}

0800a5e0 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b084      	sub	sp, #16
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
 800a5e8:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 800a5ea:	2302      	movs	r3, #2
 800a5ec:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	60fb      	str	r3, [r7, #12]
 800a5f2:	e013      	b.n	800a61c <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 800a5f4:	68fa      	ldr	r2, [r7, #12]
 800a5f6:	4613      	mov	r3, r2
 800a5f8:	005b      	lsls	r3, r3, #1
 800a5fa:	4413      	add	r3, r2
 800a5fc:	009b      	lsls	r3, r3, #2
 800a5fe:	461a      	mov	r2, r3
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	4413      	add	r3, r2
 800a604:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a608:	f7ff ff45 	bl	800a496 <MQTTstrlen>
 800a60c:	4603      	mov	r3, r0
 800a60e:	3303      	adds	r3, #3
 800a610:	68ba      	ldr	r2, [r7, #8]
 800a612:	4413      	add	r3, r2
 800a614:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	3301      	adds	r3, #1
 800a61a:	60fb      	str	r3, [r7, #12]
 800a61c:	68fa      	ldr	r2, [r7, #12]
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	429a      	cmp	r2, r3
 800a622:	dbe7      	blt.n	800a5f4 <MQTTSerialize_subscribeLength+0x14>
	return len;
 800a624:	68bb      	ldr	r3, [r7, #8]
}
 800a626:	4618      	mov	r0, r3
 800a628:	3710      	adds	r7, #16
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}

0800a62e <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], char requestedQoSs[])
{
 800a62e:	b580      	push	{r7, lr}
 800a630:	b08a      	sub	sp, #40	; 0x28
 800a632:	af00      	add	r7, sp, #0
 800a634:	60f8      	str	r0, [r7, #12]
 800a636:	60b9      	str	r1, [r7, #8]
 800a638:	4611      	mov	r1, r2
 800a63a:	461a      	mov	r2, r3
 800a63c:	460b      	mov	r3, r1
 800a63e:	71fb      	strb	r3, [r7, #7]
 800a640:	4613      	mov	r3, r2
 800a642:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
 800a648:	2300      	movs	r3, #0
 800a64a:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
 800a64c:	2300      	movs	r3, #0
 800a64e:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 800a650:	2300      	movs	r3, #0
 800a652:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
 800a654:	2300      	movs	r3, #0
 800a656:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 800a658:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a65a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a65c:	f7ff ffc0 	bl	800a5e0 <MQTTSerialize_subscribeLength>
 800a660:	61f8      	str	r0, [r7, #28]
 800a662:	69f8      	ldr	r0, [r7, #28]
 800a664:	f7ff fdcc 	bl	800a200 <MQTTPacket_len>
 800a668:	4602      	mov	r2, r0
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	4293      	cmp	r3, r2
 800a66e:	da03      	bge.n	800a678 <MQTTSerialize_subscribe+0x4a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800a670:	f06f 0301 	mvn.w	r3, #1
 800a674:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 800a676:	e04f      	b.n	800a718 <MQTTSerialize_subscribe+0xea>
	}

	header.byte = 0;
 800a678:	2300      	movs	r3, #0
 800a67a:	753b      	strb	r3, [r7, #20]
	header.bits.type = SUBSCRIBE;
 800a67c:	7d3b      	ldrb	r3, [r7, #20]
 800a67e:	2208      	movs	r2, #8
 800a680:	f362 1307 	bfi	r3, r2, #4, #4
 800a684:	753b      	strb	r3, [r7, #20]
	header.bits.dup = dup;
 800a686:	79fb      	ldrb	r3, [r7, #7]
 800a688:	f003 0301 	and.w	r3, r3, #1
 800a68c:	b2da      	uxtb	r2, r3
 800a68e:	7d3b      	ldrb	r3, [r7, #20]
 800a690:	f362 03c3 	bfi	r3, r2, #3, #1
 800a694:	753b      	strb	r3, [r7, #20]
	header.bits.qos = 1;
 800a696:	7d3b      	ldrb	r3, [r7, #20]
 800a698:	2201      	movs	r2, #1
 800a69a:	f362 0342 	bfi	r3, r2, #1, #2
 800a69e:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 800a6a0:	7d3a      	ldrb	r2, [r7, #20]
 800a6a2:	f107 0318 	add.w	r3, r7, #24
 800a6a6:	4611      	mov	r1, r2
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f7ff fe38 	bl	800a31e <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 800a6ae:	69bb      	ldr	r3, [r7, #24]
 800a6b0:	69f9      	ldr	r1, [r7, #28]
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f7ff fd39 	bl	800a12a <MQTTPacket_encode>
 800a6b8:	4602      	mov	r2, r0
 800a6ba:	69bb      	ldr	r3, [r7, #24]
 800a6bc:	4413      	add	r3, r2
 800a6be:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
 800a6c0:	88ba      	ldrh	r2, [r7, #4]
 800a6c2:	f107 0318 	add.w	r3, r7, #24
 800a6c6:	4611      	mov	r1, r2
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f7ff fe3d 	bl	800a348 <writeInt>

	for (i = 0; i < count; ++i)
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	623b      	str	r3, [r7, #32]
 800a6d2:	e019      	b.n	800a708 <MQTTSerialize_subscribe+0xda>
	{
		writeMQTTString(&ptr, topicFilters[i]);
 800a6d4:	6a3a      	ldr	r2, [r7, #32]
 800a6d6:	4613      	mov	r3, r2
 800a6d8:	005b      	lsls	r3, r3, #1
 800a6da:	4413      	add	r3, r2
 800a6dc:	009b      	lsls	r3, r3, #2
 800a6de:	461a      	mov	r2, r3
 800a6e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6e2:	4413      	add	r3, r2
 800a6e4:	f107 0018 	add.w	r0, r7, #24
 800a6e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a6ea:	f7ff fe75 	bl	800a3d8 <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 800a6ee:	6a3b      	ldr	r3, [r7, #32]
 800a6f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a6f2:	4413      	add	r3, r2
 800a6f4:	781a      	ldrb	r2, [r3, #0]
 800a6f6:	f107 0318 	add.w	r3, r7, #24
 800a6fa:	4611      	mov	r1, r2
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f7ff fe0e 	bl	800a31e <writeChar>
	for (i = 0; i < count; ++i)
 800a702:	6a3b      	ldr	r3, [r7, #32]
 800a704:	3301      	adds	r3, #1
 800a706:	623b      	str	r3, [r7, #32]
 800a708:	6a3a      	ldr	r2, [r7, #32]
 800a70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a70c:	429a      	cmp	r2, r3
 800a70e:	dbe1      	blt.n	800a6d4 <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 800a710:	69ba      	ldr	r2, [r7, #24]
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	1ad3      	subs	r3, r2, r3
 800a716:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800a718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3728      	adds	r7, #40	; 0x28
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}

0800a722 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
 800a722:	b580      	push	{r7, lr}
 800a724:	b08a      	sub	sp, #40	; 0x28
 800a726:	af00      	add	r7, sp, #0
 800a728:	60f8      	str	r0, [r7, #12]
 800a72a:	60b9      	str	r1, [r7, #8]
 800a72c:	607a      	str	r2, [r7, #4]
 800a72e:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800a730:	2300      	movs	r3, #0
 800a732:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800a734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a736:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800a738:	2300      	movs	r3, #0
 800a73a:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800a73c:	2300      	movs	r3, #0
 800a73e:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800a740:	f107 0318 	add.w	r3, r7, #24
 800a744:	4618      	mov	r0, r3
 800a746:	f7ff fdd6 	bl	800a2f6 <readChar>
 800a74a:	4603      	mov	r3, r0
 800a74c:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != SUBACK)
 800a74e:	7f3b      	ldrb	r3, [r7, #28]
 800a750:	f023 030f 	bic.w	r3, r3, #15
 800a754:	b2db      	uxtb	r3, r3
 800a756:	2b90      	cmp	r3, #144	; 0x90
 800a758:	d142      	bne.n	800a7e0 <MQTTDeserialize_suback+0xbe>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800a75a:	69bb      	ldr	r3, [r7, #24]
 800a75c:	f107 0214 	add.w	r2, r7, #20
 800a760:	4611      	mov	r1, r2
 800a762:	4618      	mov	r0, r3
 800a764:	f7ff fd96 	bl	800a294 <MQTTPacket_decodeBuf>
 800a768:	6278      	str	r0, [r7, #36]	; 0x24
 800a76a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a76c:	69bb      	ldr	r3, [r7, #24]
 800a76e:	4413      	add	r3, r2
 800a770:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800a772:	69bb      	ldr	r3, [r7, #24]
 800a774:	697a      	ldr	r2, [r7, #20]
 800a776:	4413      	add	r3, r2
 800a778:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 800a77a:	69bb      	ldr	r3, [r7, #24]
 800a77c:	6a3a      	ldr	r2, [r7, #32]
 800a77e:	1ad3      	subs	r3, r2, r3
 800a780:	2b01      	cmp	r3, #1
 800a782:	dd2f      	ble.n	800a7e4 <MQTTDeserialize_suback+0xc2>
		goto exit;

	*packetid = readInt(&curdata);
 800a784:	f107 0318 	add.w	r3, r7, #24
 800a788:	4618      	mov	r0, r3
 800a78a:	f7ff fd99 	bl	800a2c0 <readInt>
 800a78e:	4603      	mov	r3, r0
 800a790:	b29a      	uxth	r2, r3
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	801a      	strh	r2, [r3, #0]

	*count = 0;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2200      	movs	r2, #0
 800a79a:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 800a79c:	e019      	b.n	800a7d2 <MQTTDeserialize_suback+0xb0>
	{
		if (*count > maxcount)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	68ba      	ldr	r2, [r7, #8]
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	da03      	bge.n	800a7b0 <MQTTDeserialize_suback+0x8e>
		{
			rc = -1;
 800a7a8:	f04f 33ff 	mov.w	r3, #4294967295
 800a7ac:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
 800a7ae:	e01a      	b.n	800a7e6 <MQTTDeserialize_suback+0xc4>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
 800a7b0:	f107 0318 	add.w	r3, r7, #24
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f7ff fd9e 	bl	800a2f6 <readChar>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	4618      	mov	r0, r3
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	1c59      	adds	r1, r3, #1
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	6011      	str	r1, [r2, #0]
 800a7c8:	009b      	lsls	r3, r3, #2
 800a7ca:	683a      	ldr	r2, [r7, #0]
 800a7cc:	4413      	add	r3, r2
 800a7ce:	4602      	mov	r2, r0
 800a7d0:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 800a7d2:	69bb      	ldr	r3, [r7, #24]
 800a7d4:	6a3a      	ldr	r2, [r7, #32]
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	d8e1      	bhi.n	800a79e <MQTTDeserialize_suback+0x7c>
	}

	rc = 1;
 800a7da:	2301      	movs	r3, #1
 800a7dc:	627b      	str	r3, [r7, #36]	; 0x24
 800a7de:	e002      	b.n	800a7e6 <MQTTDeserialize_suback+0xc4>
		goto exit;
 800a7e0:	bf00      	nop
 800a7e2:	e000      	b.n	800a7e6 <MQTTDeserialize_suback+0xc4>
		goto exit;
 800a7e4:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800a7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3728      	adds	r7, #40	; 0x28
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <W5500Initialze>:
extern uint8_t uartBuf;

extern wiz_NetInfo gWIZNETINFO;

void W5500Initialze(void)
{
 800a7f0:	b590      	push	{r4, r7, lr}
 800a7f2:	b087      	sub	sp, #28
 800a7f4:	af00      	add	r7, sp, #0
	unsigned char temp;
	unsigned char W5500FifoSize[2][8] = {{2,2,2,2,2,2,2,2,},{2,2,2,2,2,2,2,2}};
 800a7f6:	4b2b      	ldr	r3, [pc, #172]	; (800a8a4 <W5500Initialze+0xb4>)
 800a7f8:	1d3c      	adds	r4, r7, #4
 800a7fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a7fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	W5500DeSelect();
 800a800:	f000 f89c 	bl	800a93c <W5500DeSelect>

	/* spi function register */
	reg_wizchip_spi_cbfunc(W5500ReadByte, W5500WriteByte);
 800a804:	4928      	ldr	r1, [pc, #160]	; (800a8a8 <W5500Initialze+0xb8>)
 800a806:	4829      	ldr	r0, [pc, #164]	; (800a8ac <W5500Initialze+0xbc>)
 800a808:	f7fb fecc 	bl	80065a4 <reg_wizchip_spi_cbfunc>
//	reg_wizchip_spiburst_cbfunc(W5500ReadBytes, W5500WriteBytes);

	/* CS function register */
	reg_wizchip_cs_cbfunc(W5500Select,W5500DeSelect);
 800a80c:	4928      	ldr	r1, [pc, #160]	; (800a8b0 <W5500Initialze+0xc0>)
 800a80e:	4829      	ldr	r0, [pc, #164]	; (800a8b4 <W5500Initialze+0xc4>)
 800a810:	f7fb fea2 	bl	8006558 <reg_wizchip_cs_cbfunc>

	if(ctlwizchip(CW_INIT_WIZCHIP,(void*)W5500FifoSize) == -1)
 800a814:	1d3b      	adds	r3, r7, #4
 800a816:	4619      	mov	r1, r3
 800a818:	2001      	movs	r0, #1
 800a81a:	f7fb feef 	bl	80065fc <ctlwizchip>
 800a81e:	4603      	mov	r3, r0
 800a820:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a824:	d113      	bne.n	800a84e <W5500Initialze+0x5e>
	{
		uartBufLen = sprintf((char*)uartBuf, "W5500 initialized fail.\n\r");
 800a826:	4b24      	ldr	r3, [pc, #144]	; (800a8b8 <W5500Initialze+0xc8>)
 800a828:	781b      	ldrb	r3, [r3, #0]
 800a82a:	4924      	ldr	r1, [pc, #144]	; (800a8bc <W5500Initialze+0xcc>)
 800a82c:	4618      	mov	r0, r3
 800a82e:	f000 fa4f 	bl	800acd0 <siprintf>
 800a832:	4603      	mov	r3, r0
 800a834:	b2da      	uxtb	r2, r3
 800a836:	4b22      	ldr	r3, [pc, #136]	; (800a8c0 <W5500Initialze+0xd0>)
 800a838:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)uartBuf, uartBufLen, 100);
 800a83a:	4b1f      	ldr	r3, [pc, #124]	; (800a8b8 <W5500Initialze+0xc8>)
 800a83c:	781b      	ldrb	r3, [r3, #0]
 800a83e:	4619      	mov	r1, r3
 800a840:	4b1f      	ldr	r3, [pc, #124]	; (800a8c0 <W5500Initialze+0xd0>)
 800a842:	781b      	ldrb	r3, [r3, #0]
 800a844:	b29a      	uxth	r2, r3
 800a846:	2364      	movs	r3, #100	; 0x64
 800a848:	481e      	ldr	r0, [pc, #120]	; (800a8c4 <W5500Initialze+0xd4>)
 800a84a:	f7f9 fd85 	bl	8004358 <HAL_UART_Transmit>
	}

	do{//check phy status.
		if(ctlwizchip(CW_GET_PHYLINK,(void*)&temp) == -1){
 800a84e:	f107 0317 	add.w	r3, r7, #23
 800a852:	4619      	mov	r1, r3
 800a854:	200f      	movs	r0, #15
 800a856:	f7fb fed1 	bl	80065fc <ctlwizchip>
 800a85a:	4603      	mov	r3, r0
 800a85c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a860:	d113      	bne.n	800a88a <W5500Initialze+0x9a>
			uartBufLen = sprintf((char*)uartBuf, "Unknown PHY link status.\n\r");
 800a862:	4b15      	ldr	r3, [pc, #84]	; (800a8b8 <W5500Initialze+0xc8>)
 800a864:	781b      	ldrb	r3, [r3, #0]
 800a866:	4918      	ldr	r1, [pc, #96]	; (800a8c8 <W5500Initialze+0xd8>)
 800a868:	4618      	mov	r0, r3
 800a86a:	f000 fa31 	bl	800acd0 <siprintf>
 800a86e:	4603      	mov	r3, r0
 800a870:	b2da      	uxtb	r2, r3
 800a872:	4b13      	ldr	r3, [pc, #76]	; (800a8c0 <W5500Initialze+0xd0>)
 800a874:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*)uartBuf, uartBufLen, 100);
 800a876:	4b10      	ldr	r3, [pc, #64]	; (800a8b8 <W5500Initialze+0xc8>)
 800a878:	781b      	ldrb	r3, [r3, #0]
 800a87a:	4619      	mov	r1, r3
 800a87c:	4b10      	ldr	r3, [pc, #64]	; (800a8c0 <W5500Initialze+0xd0>)
 800a87e:	781b      	ldrb	r3, [r3, #0]
 800a880:	b29a      	uxth	r2, r3
 800a882:	2364      	movs	r3, #100	; 0x64
 800a884:	480f      	ldr	r0, [pc, #60]	; (800a8c4 <W5500Initialze+0xd4>)
 800a886:	f7f9 fd67 	bl	8004358 <HAL_UART_Transmit>
		}
		HAL_Delay(500);
 800a88a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a88e:	f7f7 fb93 	bl	8001fb8 <HAL_Delay>
	}while(temp == PHY_LINK_OFF);
 800a892:	7dfb      	ldrb	r3, [r7, #23]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d0da      	beq.n	800a84e <W5500Initialze+0x5e>

}
 800a898:	bf00      	nop
 800a89a:	bf00      	nop
 800a89c:	371c      	adds	r7, #28
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd90      	pop	{r4, r7, pc}
 800a8a2:	bf00      	nop
 800a8a4:	0800c3f0 	.word	0x0800c3f0
 800a8a8:	0800a8cd 	.word	0x0800a8cd
 800a8ac:	0800a8f1 	.word	0x0800a8f1
 800a8b0:	0800a93d 	.word	0x0800a93d
 800a8b4:	0800a925 	.word	0x0800a925
 800a8b8:	20001934 	.word	0x20001934
 800a8bc:	0800c3b8 	.word	0x0800c3b8
 800a8c0:	20001974 	.word	0x20001974
 800a8c4:	200019e0 	.word	0x200019e0
 800a8c8:	0800c3d4 	.word	0x0800c3d4

0800a8cc <W5500WriteByte>:
{
	HAL_GPIO_WritePin(W5500_RST_GPIO_Port, W5500_RST_Pin, GPIO_PIN_SET);
}

void W5500WriteByte(uint8_t byte)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b082      	sub	sp, #8
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&byte, 1, HAL_MAX_DELAY);
 800a8d6:	1df9      	adds	r1, r7, #7
 800a8d8:	f04f 33ff 	mov.w	r3, #4294967295
 800a8dc:	2201      	movs	r2, #1
 800a8de:	4803      	ldr	r0, [pc, #12]	; (800a8ec <W5500WriteByte+0x20>)
 800a8e0:	f7f8 fe7d 	bl	80035de <HAL_SPI_Transmit>
}
 800a8e4:	bf00      	nop
 800a8e6:	3708      	adds	r7, #8
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}
 800a8ec:	20001978 	.word	0x20001978

0800a8f0 <W5500ReadByte>:

uint8_t W5500ReadByte(void)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b082      	sub	sp, #8
 800a8f4:	af00      	add	r7, sp, #0
	char rxData[5] = {0,0,0,0,0};
 800a8f6:	4a09      	ldr	r2, [pc, #36]	; (800a91c <W5500ReadByte+0x2c>)
 800a8f8:	463b      	mov	r3, r7
 800a8fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a8fe:	6018      	str	r0, [r3, #0]
 800a900:	3304      	adds	r3, #4
 800a902:	7019      	strb	r1, [r3, #0]
	HAL_SPI_Receive(&hspi1, (uint8_t*)rxData, 1, HAL_MAX_DELAY);
 800a904:	4639      	mov	r1, r7
 800a906:	f04f 33ff 	mov.w	r3, #4294967295
 800a90a:	2201      	movs	r2, #1
 800a90c:	4804      	ldr	r0, [pc, #16]	; (800a920 <W5500ReadByte+0x30>)
 800a90e:	f7f8 ffd4 	bl	80038ba <HAL_SPI_Receive>
	return rxData[0];
 800a912:	783b      	ldrb	r3, [r7, #0]
}
 800a914:	4618      	mov	r0, r3
 800a916:	3708      	adds	r7, #8
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}
 800a91c:	0800c400 	.word	0x0800c400
 800a920:	20001978 	.word	0x20001978

0800a924 <W5500Select>:
//}



inline W5500Select()
{
 800a924:	b580      	push	{r7, lr}
 800a926:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_RESET);
 800a928:	2200      	movs	r2, #0
 800a92a:	2110      	movs	r1, #16
 800a92c:	4802      	ldr	r0, [pc, #8]	; (800a938 <W5500Select+0x14>)
 800a92e:	f7f7 fdcb 	bl	80024c8 <HAL_GPIO_WritePin>
}
 800a932:	bf00      	nop
 800a934:	bd80      	pop	{r7, pc}
 800a936:	bf00      	nop
 800a938:	48000400 	.word	0x48000400

0800a93c <W5500DeSelect>:

inline W5500DeSelect()
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_SET);
 800a940:	2201      	movs	r2, #1
 800a942:	2110      	movs	r1, #16
 800a944:	4802      	ldr	r0, [pc, #8]	; (800a950 <W5500DeSelect+0x14>)
 800a946:	f7f7 fdbf 	bl	80024c8 <HAL_GPIO_WritePin>
}
 800a94a:	bf00      	nop
 800a94c:	bd80      	pop	{r7, pc}
 800a94e:	bf00      	nop
 800a950:	48000400 	.word	0x48000400

0800a954 <__errno>:
 800a954:	4b01      	ldr	r3, [pc, #4]	; (800a95c <__errno+0x8>)
 800a956:	6818      	ldr	r0, [r3, #0]
 800a958:	4770      	bx	lr
 800a95a:	bf00      	nop
 800a95c:	200000b4 	.word	0x200000b4

0800a960 <__libc_init_array>:
 800a960:	b570      	push	{r4, r5, r6, lr}
 800a962:	4d0d      	ldr	r5, [pc, #52]	; (800a998 <__libc_init_array+0x38>)
 800a964:	4c0d      	ldr	r4, [pc, #52]	; (800a99c <__libc_init_array+0x3c>)
 800a966:	1b64      	subs	r4, r4, r5
 800a968:	10a4      	asrs	r4, r4, #2
 800a96a:	2600      	movs	r6, #0
 800a96c:	42a6      	cmp	r6, r4
 800a96e:	d109      	bne.n	800a984 <__libc_init_array+0x24>
 800a970:	4d0b      	ldr	r5, [pc, #44]	; (800a9a0 <__libc_init_array+0x40>)
 800a972:	4c0c      	ldr	r4, [pc, #48]	; (800a9a4 <__libc_init_array+0x44>)
 800a974:	f001 fa88 	bl	800be88 <_init>
 800a978:	1b64      	subs	r4, r4, r5
 800a97a:	10a4      	asrs	r4, r4, #2
 800a97c:	2600      	movs	r6, #0
 800a97e:	42a6      	cmp	r6, r4
 800a980:	d105      	bne.n	800a98e <__libc_init_array+0x2e>
 800a982:	bd70      	pop	{r4, r5, r6, pc}
 800a984:	f855 3b04 	ldr.w	r3, [r5], #4
 800a988:	4798      	blx	r3
 800a98a:	3601      	adds	r6, #1
 800a98c:	e7ee      	b.n	800a96c <__libc_init_array+0xc>
 800a98e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a992:	4798      	blx	r3
 800a994:	3601      	adds	r6, #1
 800a996:	e7f2      	b.n	800a97e <__libc_init_array+0x1e>
 800a998:	0800c610 	.word	0x0800c610
 800a99c:	0800c610 	.word	0x0800c610
 800a9a0:	0800c610 	.word	0x0800c610
 800a9a4:	0800c614 	.word	0x0800c614

0800a9a8 <memcpy>:
 800a9a8:	440a      	add	r2, r1
 800a9aa:	4291      	cmp	r1, r2
 800a9ac:	f100 33ff 	add.w	r3, r0, #4294967295
 800a9b0:	d100      	bne.n	800a9b4 <memcpy+0xc>
 800a9b2:	4770      	bx	lr
 800a9b4:	b510      	push	{r4, lr}
 800a9b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9be:	4291      	cmp	r1, r2
 800a9c0:	d1f9      	bne.n	800a9b6 <memcpy+0xe>
 800a9c2:	bd10      	pop	{r4, pc}

0800a9c4 <memset>:
 800a9c4:	4402      	add	r2, r0
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	4293      	cmp	r3, r2
 800a9ca:	d100      	bne.n	800a9ce <memset+0xa>
 800a9cc:	4770      	bx	lr
 800a9ce:	f803 1b01 	strb.w	r1, [r3], #1
 800a9d2:	e7f9      	b.n	800a9c8 <memset+0x4>

0800a9d4 <_free_r>:
 800a9d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a9d6:	2900      	cmp	r1, #0
 800a9d8:	d044      	beq.n	800aa64 <_free_r+0x90>
 800a9da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9de:	9001      	str	r0, [sp, #4]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	f1a1 0404 	sub.w	r4, r1, #4
 800a9e6:	bfb8      	it	lt
 800a9e8:	18e4      	addlt	r4, r4, r3
 800a9ea:	f000 fd25 	bl	800b438 <__malloc_lock>
 800a9ee:	4a1e      	ldr	r2, [pc, #120]	; (800aa68 <_free_r+0x94>)
 800a9f0:	9801      	ldr	r0, [sp, #4]
 800a9f2:	6813      	ldr	r3, [r2, #0]
 800a9f4:	b933      	cbnz	r3, 800aa04 <_free_r+0x30>
 800a9f6:	6063      	str	r3, [r4, #4]
 800a9f8:	6014      	str	r4, [r2, #0]
 800a9fa:	b003      	add	sp, #12
 800a9fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa00:	f000 bd20 	b.w	800b444 <__malloc_unlock>
 800aa04:	42a3      	cmp	r3, r4
 800aa06:	d908      	bls.n	800aa1a <_free_r+0x46>
 800aa08:	6825      	ldr	r5, [r4, #0]
 800aa0a:	1961      	adds	r1, r4, r5
 800aa0c:	428b      	cmp	r3, r1
 800aa0e:	bf01      	itttt	eq
 800aa10:	6819      	ldreq	r1, [r3, #0]
 800aa12:	685b      	ldreq	r3, [r3, #4]
 800aa14:	1949      	addeq	r1, r1, r5
 800aa16:	6021      	streq	r1, [r4, #0]
 800aa18:	e7ed      	b.n	800a9f6 <_free_r+0x22>
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	685b      	ldr	r3, [r3, #4]
 800aa1e:	b10b      	cbz	r3, 800aa24 <_free_r+0x50>
 800aa20:	42a3      	cmp	r3, r4
 800aa22:	d9fa      	bls.n	800aa1a <_free_r+0x46>
 800aa24:	6811      	ldr	r1, [r2, #0]
 800aa26:	1855      	adds	r5, r2, r1
 800aa28:	42a5      	cmp	r5, r4
 800aa2a:	d10b      	bne.n	800aa44 <_free_r+0x70>
 800aa2c:	6824      	ldr	r4, [r4, #0]
 800aa2e:	4421      	add	r1, r4
 800aa30:	1854      	adds	r4, r2, r1
 800aa32:	42a3      	cmp	r3, r4
 800aa34:	6011      	str	r1, [r2, #0]
 800aa36:	d1e0      	bne.n	800a9fa <_free_r+0x26>
 800aa38:	681c      	ldr	r4, [r3, #0]
 800aa3a:	685b      	ldr	r3, [r3, #4]
 800aa3c:	6053      	str	r3, [r2, #4]
 800aa3e:	4421      	add	r1, r4
 800aa40:	6011      	str	r1, [r2, #0]
 800aa42:	e7da      	b.n	800a9fa <_free_r+0x26>
 800aa44:	d902      	bls.n	800aa4c <_free_r+0x78>
 800aa46:	230c      	movs	r3, #12
 800aa48:	6003      	str	r3, [r0, #0]
 800aa4a:	e7d6      	b.n	800a9fa <_free_r+0x26>
 800aa4c:	6825      	ldr	r5, [r4, #0]
 800aa4e:	1961      	adds	r1, r4, r5
 800aa50:	428b      	cmp	r3, r1
 800aa52:	bf04      	itt	eq
 800aa54:	6819      	ldreq	r1, [r3, #0]
 800aa56:	685b      	ldreq	r3, [r3, #4]
 800aa58:	6063      	str	r3, [r4, #4]
 800aa5a:	bf04      	itt	eq
 800aa5c:	1949      	addeq	r1, r1, r5
 800aa5e:	6021      	streq	r1, [r4, #0]
 800aa60:	6054      	str	r4, [r2, #4]
 800aa62:	e7ca      	b.n	800a9fa <_free_r+0x26>
 800aa64:	b003      	add	sp, #12
 800aa66:	bd30      	pop	{r4, r5, pc}
 800aa68:	20001ae4 	.word	0x20001ae4

0800aa6c <sbrk_aligned>:
 800aa6c:	b570      	push	{r4, r5, r6, lr}
 800aa6e:	4e0e      	ldr	r6, [pc, #56]	; (800aaa8 <sbrk_aligned+0x3c>)
 800aa70:	460c      	mov	r4, r1
 800aa72:	6831      	ldr	r1, [r6, #0]
 800aa74:	4605      	mov	r5, r0
 800aa76:	b911      	cbnz	r1, 800aa7e <sbrk_aligned+0x12>
 800aa78:	f000 f91a 	bl	800acb0 <_sbrk_r>
 800aa7c:	6030      	str	r0, [r6, #0]
 800aa7e:	4621      	mov	r1, r4
 800aa80:	4628      	mov	r0, r5
 800aa82:	f000 f915 	bl	800acb0 <_sbrk_r>
 800aa86:	1c43      	adds	r3, r0, #1
 800aa88:	d00a      	beq.n	800aaa0 <sbrk_aligned+0x34>
 800aa8a:	1cc4      	adds	r4, r0, #3
 800aa8c:	f024 0403 	bic.w	r4, r4, #3
 800aa90:	42a0      	cmp	r0, r4
 800aa92:	d007      	beq.n	800aaa4 <sbrk_aligned+0x38>
 800aa94:	1a21      	subs	r1, r4, r0
 800aa96:	4628      	mov	r0, r5
 800aa98:	f000 f90a 	bl	800acb0 <_sbrk_r>
 800aa9c:	3001      	adds	r0, #1
 800aa9e:	d101      	bne.n	800aaa4 <sbrk_aligned+0x38>
 800aaa0:	f04f 34ff 	mov.w	r4, #4294967295
 800aaa4:	4620      	mov	r0, r4
 800aaa6:	bd70      	pop	{r4, r5, r6, pc}
 800aaa8:	20001ae8 	.word	0x20001ae8

0800aaac <_malloc_r>:
 800aaac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aab0:	1ccd      	adds	r5, r1, #3
 800aab2:	f025 0503 	bic.w	r5, r5, #3
 800aab6:	3508      	adds	r5, #8
 800aab8:	2d0c      	cmp	r5, #12
 800aaba:	bf38      	it	cc
 800aabc:	250c      	movcc	r5, #12
 800aabe:	2d00      	cmp	r5, #0
 800aac0:	4607      	mov	r7, r0
 800aac2:	db01      	blt.n	800aac8 <_malloc_r+0x1c>
 800aac4:	42a9      	cmp	r1, r5
 800aac6:	d905      	bls.n	800aad4 <_malloc_r+0x28>
 800aac8:	230c      	movs	r3, #12
 800aaca:	603b      	str	r3, [r7, #0]
 800aacc:	2600      	movs	r6, #0
 800aace:	4630      	mov	r0, r6
 800aad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aad4:	4e2e      	ldr	r6, [pc, #184]	; (800ab90 <_malloc_r+0xe4>)
 800aad6:	f000 fcaf 	bl	800b438 <__malloc_lock>
 800aada:	6833      	ldr	r3, [r6, #0]
 800aadc:	461c      	mov	r4, r3
 800aade:	bb34      	cbnz	r4, 800ab2e <_malloc_r+0x82>
 800aae0:	4629      	mov	r1, r5
 800aae2:	4638      	mov	r0, r7
 800aae4:	f7ff ffc2 	bl	800aa6c <sbrk_aligned>
 800aae8:	1c43      	adds	r3, r0, #1
 800aaea:	4604      	mov	r4, r0
 800aaec:	d14d      	bne.n	800ab8a <_malloc_r+0xde>
 800aaee:	6834      	ldr	r4, [r6, #0]
 800aaf0:	4626      	mov	r6, r4
 800aaf2:	2e00      	cmp	r6, #0
 800aaf4:	d140      	bne.n	800ab78 <_malloc_r+0xcc>
 800aaf6:	6823      	ldr	r3, [r4, #0]
 800aaf8:	4631      	mov	r1, r6
 800aafa:	4638      	mov	r0, r7
 800aafc:	eb04 0803 	add.w	r8, r4, r3
 800ab00:	f000 f8d6 	bl	800acb0 <_sbrk_r>
 800ab04:	4580      	cmp	r8, r0
 800ab06:	d13a      	bne.n	800ab7e <_malloc_r+0xd2>
 800ab08:	6821      	ldr	r1, [r4, #0]
 800ab0a:	3503      	adds	r5, #3
 800ab0c:	1a6d      	subs	r5, r5, r1
 800ab0e:	f025 0503 	bic.w	r5, r5, #3
 800ab12:	3508      	adds	r5, #8
 800ab14:	2d0c      	cmp	r5, #12
 800ab16:	bf38      	it	cc
 800ab18:	250c      	movcc	r5, #12
 800ab1a:	4629      	mov	r1, r5
 800ab1c:	4638      	mov	r0, r7
 800ab1e:	f7ff ffa5 	bl	800aa6c <sbrk_aligned>
 800ab22:	3001      	adds	r0, #1
 800ab24:	d02b      	beq.n	800ab7e <_malloc_r+0xd2>
 800ab26:	6823      	ldr	r3, [r4, #0]
 800ab28:	442b      	add	r3, r5
 800ab2a:	6023      	str	r3, [r4, #0]
 800ab2c:	e00e      	b.n	800ab4c <_malloc_r+0xa0>
 800ab2e:	6822      	ldr	r2, [r4, #0]
 800ab30:	1b52      	subs	r2, r2, r5
 800ab32:	d41e      	bmi.n	800ab72 <_malloc_r+0xc6>
 800ab34:	2a0b      	cmp	r2, #11
 800ab36:	d916      	bls.n	800ab66 <_malloc_r+0xba>
 800ab38:	1961      	adds	r1, r4, r5
 800ab3a:	42a3      	cmp	r3, r4
 800ab3c:	6025      	str	r5, [r4, #0]
 800ab3e:	bf18      	it	ne
 800ab40:	6059      	strne	r1, [r3, #4]
 800ab42:	6863      	ldr	r3, [r4, #4]
 800ab44:	bf08      	it	eq
 800ab46:	6031      	streq	r1, [r6, #0]
 800ab48:	5162      	str	r2, [r4, r5]
 800ab4a:	604b      	str	r3, [r1, #4]
 800ab4c:	4638      	mov	r0, r7
 800ab4e:	f104 060b 	add.w	r6, r4, #11
 800ab52:	f000 fc77 	bl	800b444 <__malloc_unlock>
 800ab56:	f026 0607 	bic.w	r6, r6, #7
 800ab5a:	1d23      	adds	r3, r4, #4
 800ab5c:	1af2      	subs	r2, r6, r3
 800ab5e:	d0b6      	beq.n	800aace <_malloc_r+0x22>
 800ab60:	1b9b      	subs	r3, r3, r6
 800ab62:	50a3      	str	r3, [r4, r2]
 800ab64:	e7b3      	b.n	800aace <_malloc_r+0x22>
 800ab66:	6862      	ldr	r2, [r4, #4]
 800ab68:	42a3      	cmp	r3, r4
 800ab6a:	bf0c      	ite	eq
 800ab6c:	6032      	streq	r2, [r6, #0]
 800ab6e:	605a      	strne	r2, [r3, #4]
 800ab70:	e7ec      	b.n	800ab4c <_malloc_r+0xa0>
 800ab72:	4623      	mov	r3, r4
 800ab74:	6864      	ldr	r4, [r4, #4]
 800ab76:	e7b2      	b.n	800aade <_malloc_r+0x32>
 800ab78:	4634      	mov	r4, r6
 800ab7a:	6876      	ldr	r6, [r6, #4]
 800ab7c:	e7b9      	b.n	800aaf2 <_malloc_r+0x46>
 800ab7e:	230c      	movs	r3, #12
 800ab80:	603b      	str	r3, [r7, #0]
 800ab82:	4638      	mov	r0, r7
 800ab84:	f000 fc5e 	bl	800b444 <__malloc_unlock>
 800ab88:	e7a1      	b.n	800aace <_malloc_r+0x22>
 800ab8a:	6025      	str	r5, [r4, #0]
 800ab8c:	e7de      	b.n	800ab4c <_malloc_r+0xa0>
 800ab8e:	bf00      	nop
 800ab90:	20001ae4 	.word	0x20001ae4

0800ab94 <iprintf>:
 800ab94:	b40f      	push	{r0, r1, r2, r3}
 800ab96:	4b0a      	ldr	r3, [pc, #40]	; (800abc0 <iprintf+0x2c>)
 800ab98:	b513      	push	{r0, r1, r4, lr}
 800ab9a:	681c      	ldr	r4, [r3, #0]
 800ab9c:	b124      	cbz	r4, 800aba8 <iprintf+0x14>
 800ab9e:	69a3      	ldr	r3, [r4, #24]
 800aba0:	b913      	cbnz	r3, 800aba8 <iprintf+0x14>
 800aba2:	4620      	mov	r0, r4
 800aba4:	f000 fb30 	bl	800b208 <__sinit>
 800aba8:	ab05      	add	r3, sp, #20
 800abaa:	9a04      	ldr	r2, [sp, #16]
 800abac:	68a1      	ldr	r1, [r4, #8]
 800abae:	9301      	str	r3, [sp, #4]
 800abb0:	4620      	mov	r0, r4
 800abb2:	f000 fdd3 	bl	800b75c <_vfiprintf_r>
 800abb6:	b002      	add	sp, #8
 800abb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abbc:	b004      	add	sp, #16
 800abbe:	4770      	bx	lr
 800abc0:	200000b4 	.word	0x200000b4

0800abc4 <_puts_r>:
 800abc4:	b570      	push	{r4, r5, r6, lr}
 800abc6:	460e      	mov	r6, r1
 800abc8:	4605      	mov	r5, r0
 800abca:	b118      	cbz	r0, 800abd4 <_puts_r+0x10>
 800abcc:	6983      	ldr	r3, [r0, #24]
 800abce:	b90b      	cbnz	r3, 800abd4 <_puts_r+0x10>
 800abd0:	f000 fb1a 	bl	800b208 <__sinit>
 800abd4:	69ab      	ldr	r3, [r5, #24]
 800abd6:	68ac      	ldr	r4, [r5, #8]
 800abd8:	b913      	cbnz	r3, 800abe0 <_puts_r+0x1c>
 800abda:	4628      	mov	r0, r5
 800abdc:	f000 fb14 	bl	800b208 <__sinit>
 800abe0:	4b2c      	ldr	r3, [pc, #176]	; (800ac94 <_puts_r+0xd0>)
 800abe2:	429c      	cmp	r4, r3
 800abe4:	d120      	bne.n	800ac28 <_puts_r+0x64>
 800abe6:	686c      	ldr	r4, [r5, #4]
 800abe8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800abea:	07db      	lsls	r3, r3, #31
 800abec:	d405      	bmi.n	800abfa <_puts_r+0x36>
 800abee:	89a3      	ldrh	r3, [r4, #12]
 800abf0:	0598      	lsls	r0, r3, #22
 800abf2:	d402      	bmi.n	800abfa <_puts_r+0x36>
 800abf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abf6:	f000 fba5 	bl	800b344 <__retarget_lock_acquire_recursive>
 800abfa:	89a3      	ldrh	r3, [r4, #12]
 800abfc:	0719      	lsls	r1, r3, #28
 800abfe:	d51d      	bpl.n	800ac3c <_puts_r+0x78>
 800ac00:	6923      	ldr	r3, [r4, #16]
 800ac02:	b1db      	cbz	r3, 800ac3c <_puts_r+0x78>
 800ac04:	3e01      	subs	r6, #1
 800ac06:	68a3      	ldr	r3, [r4, #8]
 800ac08:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ac0c:	3b01      	subs	r3, #1
 800ac0e:	60a3      	str	r3, [r4, #8]
 800ac10:	bb39      	cbnz	r1, 800ac62 <_puts_r+0x9e>
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	da38      	bge.n	800ac88 <_puts_r+0xc4>
 800ac16:	4622      	mov	r2, r4
 800ac18:	210a      	movs	r1, #10
 800ac1a:	4628      	mov	r0, r5
 800ac1c:	f000 f8f8 	bl	800ae10 <__swbuf_r>
 800ac20:	3001      	adds	r0, #1
 800ac22:	d011      	beq.n	800ac48 <_puts_r+0x84>
 800ac24:	250a      	movs	r5, #10
 800ac26:	e011      	b.n	800ac4c <_puts_r+0x88>
 800ac28:	4b1b      	ldr	r3, [pc, #108]	; (800ac98 <_puts_r+0xd4>)
 800ac2a:	429c      	cmp	r4, r3
 800ac2c:	d101      	bne.n	800ac32 <_puts_r+0x6e>
 800ac2e:	68ac      	ldr	r4, [r5, #8]
 800ac30:	e7da      	b.n	800abe8 <_puts_r+0x24>
 800ac32:	4b1a      	ldr	r3, [pc, #104]	; (800ac9c <_puts_r+0xd8>)
 800ac34:	429c      	cmp	r4, r3
 800ac36:	bf08      	it	eq
 800ac38:	68ec      	ldreq	r4, [r5, #12]
 800ac3a:	e7d5      	b.n	800abe8 <_puts_r+0x24>
 800ac3c:	4621      	mov	r1, r4
 800ac3e:	4628      	mov	r0, r5
 800ac40:	f000 f94a 	bl	800aed8 <__swsetup_r>
 800ac44:	2800      	cmp	r0, #0
 800ac46:	d0dd      	beq.n	800ac04 <_puts_r+0x40>
 800ac48:	f04f 35ff 	mov.w	r5, #4294967295
 800ac4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac4e:	07da      	lsls	r2, r3, #31
 800ac50:	d405      	bmi.n	800ac5e <_puts_r+0x9a>
 800ac52:	89a3      	ldrh	r3, [r4, #12]
 800ac54:	059b      	lsls	r3, r3, #22
 800ac56:	d402      	bmi.n	800ac5e <_puts_r+0x9a>
 800ac58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac5a:	f000 fb74 	bl	800b346 <__retarget_lock_release_recursive>
 800ac5e:	4628      	mov	r0, r5
 800ac60:	bd70      	pop	{r4, r5, r6, pc}
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	da04      	bge.n	800ac70 <_puts_r+0xac>
 800ac66:	69a2      	ldr	r2, [r4, #24]
 800ac68:	429a      	cmp	r2, r3
 800ac6a:	dc06      	bgt.n	800ac7a <_puts_r+0xb6>
 800ac6c:	290a      	cmp	r1, #10
 800ac6e:	d004      	beq.n	800ac7a <_puts_r+0xb6>
 800ac70:	6823      	ldr	r3, [r4, #0]
 800ac72:	1c5a      	adds	r2, r3, #1
 800ac74:	6022      	str	r2, [r4, #0]
 800ac76:	7019      	strb	r1, [r3, #0]
 800ac78:	e7c5      	b.n	800ac06 <_puts_r+0x42>
 800ac7a:	4622      	mov	r2, r4
 800ac7c:	4628      	mov	r0, r5
 800ac7e:	f000 f8c7 	bl	800ae10 <__swbuf_r>
 800ac82:	3001      	adds	r0, #1
 800ac84:	d1bf      	bne.n	800ac06 <_puts_r+0x42>
 800ac86:	e7df      	b.n	800ac48 <_puts_r+0x84>
 800ac88:	6823      	ldr	r3, [r4, #0]
 800ac8a:	250a      	movs	r5, #10
 800ac8c:	1c5a      	adds	r2, r3, #1
 800ac8e:	6022      	str	r2, [r4, #0]
 800ac90:	701d      	strb	r5, [r3, #0]
 800ac92:	e7db      	b.n	800ac4c <_puts_r+0x88>
 800ac94:	0800c46c 	.word	0x0800c46c
 800ac98:	0800c48c 	.word	0x0800c48c
 800ac9c:	0800c44c 	.word	0x0800c44c

0800aca0 <puts>:
 800aca0:	4b02      	ldr	r3, [pc, #8]	; (800acac <puts+0xc>)
 800aca2:	4601      	mov	r1, r0
 800aca4:	6818      	ldr	r0, [r3, #0]
 800aca6:	f7ff bf8d 	b.w	800abc4 <_puts_r>
 800acaa:	bf00      	nop
 800acac:	200000b4 	.word	0x200000b4

0800acb0 <_sbrk_r>:
 800acb0:	b538      	push	{r3, r4, r5, lr}
 800acb2:	4d06      	ldr	r5, [pc, #24]	; (800accc <_sbrk_r+0x1c>)
 800acb4:	2300      	movs	r3, #0
 800acb6:	4604      	mov	r4, r0
 800acb8:	4608      	mov	r0, r1
 800acba:	602b      	str	r3, [r5, #0]
 800acbc:	f7f6 fff6 	bl	8001cac <_sbrk>
 800acc0:	1c43      	adds	r3, r0, #1
 800acc2:	d102      	bne.n	800acca <_sbrk_r+0x1a>
 800acc4:	682b      	ldr	r3, [r5, #0]
 800acc6:	b103      	cbz	r3, 800acca <_sbrk_r+0x1a>
 800acc8:	6023      	str	r3, [r4, #0]
 800acca:	bd38      	pop	{r3, r4, r5, pc}
 800accc:	20001af0 	.word	0x20001af0

0800acd0 <siprintf>:
 800acd0:	b40e      	push	{r1, r2, r3}
 800acd2:	b500      	push	{lr}
 800acd4:	b09c      	sub	sp, #112	; 0x70
 800acd6:	ab1d      	add	r3, sp, #116	; 0x74
 800acd8:	9002      	str	r0, [sp, #8]
 800acda:	9006      	str	r0, [sp, #24]
 800acdc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ace0:	4809      	ldr	r0, [pc, #36]	; (800ad08 <siprintf+0x38>)
 800ace2:	9107      	str	r1, [sp, #28]
 800ace4:	9104      	str	r1, [sp, #16]
 800ace6:	4909      	ldr	r1, [pc, #36]	; (800ad0c <siprintf+0x3c>)
 800ace8:	f853 2b04 	ldr.w	r2, [r3], #4
 800acec:	9105      	str	r1, [sp, #20]
 800acee:	6800      	ldr	r0, [r0, #0]
 800acf0:	9301      	str	r3, [sp, #4]
 800acf2:	a902      	add	r1, sp, #8
 800acf4:	f000 fc08 	bl	800b508 <_svfiprintf_r>
 800acf8:	9b02      	ldr	r3, [sp, #8]
 800acfa:	2200      	movs	r2, #0
 800acfc:	701a      	strb	r2, [r3, #0]
 800acfe:	b01c      	add	sp, #112	; 0x70
 800ad00:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad04:	b003      	add	sp, #12
 800ad06:	4770      	bx	lr
 800ad08:	200000b4 	.word	0x200000b4
 800ad0c:	ffff0208 	.word	0xffff0208

0800ad10 <__sread>:
 800ad10:	b510      	push	{r4, lr}
 800ad12:	460c      	mov	r4, r1
 800ad14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad18:	f000 ffe4 	bl	800bce4 <_read_r>
 800ad1c:	2800      	cmp	r0, #0
 800ad1e:	bfab      	itete	ge
 800ad20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ad22:	89a3      	ldrhlt	r3, [r4, #12]
 800ad24:	181b      	addge	r3, r3, r0
 800ad26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ad2a:	bfac      	ite	ge
 800ad2c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ad2e:	81a3      	strhlt	r3, [r4, #12]
 800ad30:	bd10      	pop	{r4, pc}

0800ad32 <__swrite>:
 800ad32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad36:	461f      	mov	r7, r3
 800ad38:	898b      	ldrh	r3, [r1, #12]
 800ad3a:	05db      	lsls	r3, r3, #23
 800ad3c:	4605      	mov	r5, r0
 800ad3e:	460c      	mov	r4, r1
 800ad40:	4616      	mov	r6, r2
 800ad42:	d505      	bpl.n	800ad50 <__swrite+0x1e>
 800ad44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad48:	2302      	movs	r3, #2
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	f000 fafc 	bl	800b348 <_lseek_r>
 800ad50:	89a3      	ldrh	r3, [r4, #12]
 800ad52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad5a:	81a3      	strh	r3, [r4, #12]
 800ad5c:	4632      	mov	r2, r6
 800ad5e:	463b      	mov	r3, r7
 800ad60:	4628      	mov	r0, r5
 800ad62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad66:	f000 b8a5 	b.w	800aeb4 <_write_r>

0800ad6a <__sseek>:
 800ad6a:	b510      	push	{r4, lr}
 800ad6c:	460c      	mov	r4, r1
 800ad6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad72:	f000 fae9 	bl	800b348 <_lseek_r>
 800ad76:	1c43      	adds	r3, r0, #1
 800ad78:	89a3      	ldrh	r3, [r4, #12]
 800ad7a:	bf15      	itete	ne
 800ad7c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ad7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ad82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ad86:	81a3      	strheq	r3, [r4, #12]
 800ad88:	bf18      	it	ne
 800ad8a:	81a3      	strhne	r3, [r4, #12]
 800ad8c:	bd10      	pop	{r4, pc}

0800ad8e <__sclose>:
 800ad8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad92:	f000 b90f 	b.w	800afb4 <_close_r>

0800ad96 <strchr>:
 800ad96:	b2c9      	uxtb	r1, r1
 800ad98:	4603      	mov	r3, r0
 800ad9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad9e:	b11a      	cbz	r2, 800ada8 <strchr+0x12>
 800ada0:	428a      	cmp	r2, r1
 800ada2:	d1f9      	bne.n	800ad98 <strchr+0x2>
 800ada4:	4618      	mov	r0, r3
 800ada6:	4770      	bx	lr
 800ada8:	2900      	cmp	r1, #0
 800adaa:	bf18      	it	ne
 800adac:	2300      	movne	r3, #0
 800adae:	e7f9      	b.n	800ada4 <strchr+0xe>

0800adb0 <strcpy>:
 800adb0:	4603      	mov	r3, r0
 800adb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800adb6:	f803 2b01 	strb.w	r2, [r3], #1
 800adba:	2a00      	cmp	r2, #0
 800adbc:	d1f9      	bne.n	800adb2 <strcpy+0x2>
 800adbe:	4770      	bx	lr

0800adc0 <strncmp>:
 800adc0:	b510      	push	{r4, lr}
 800adc2:	b17a      	cbz	r2, 800ade4 <strncmp+0x24>
 800adc4:	4603      	mov	r3, r0
 800adc6:	3901      	subs	r1, #1
 800adc8:	1884      	adds	r4, r0, r2
 800adca:	f813 0b01 	ldrb.w	r0, [r3], #1
 800adce:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800add2:	4290      	cmp	r0, r2
 800add4:	d101      	bne.n	800adda <strncmp+0x1a>
 800add6:	42a3      	cmp	r3, r4
 800add8:	d101      	bne.n	800adde <strncmp+0x1e>
 800adda:	1a80      	subs	r0, r0, r2
 800addc:	bd10      	pop	{r4, pc}
 800adde:	2800      	cmp	r0, #0
 800ade0:	d1f3      	bne.n	800adca <strncmp+0xa>
 800ade2:	e7fa      	b.n	800adda <strncmp+0x1a>
 800ade4:	4610      	mov	r0, r2
 800ade6:	e7f9      	b.n	800addc <strncmp+0x1c>

0800ade8 <strncpy>:
 800ade8:	b510      	push	{r4, lr}
 800adea:	3901      	subs	r1, #1
 800adec:	4603      	mov	r3, r0
 800adee:	b132      	cbz	r2, 800adfe <strncpy+0x16>
 800adf0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800adf4:	f803 4b01 	strb.w	r4, [r3], #1
 800adf8:	3a01      	subs	r2, #1
 800adfa:	2c00      	cmp	r4, #0
 800adfc:	d1f7      	bne.n	800adee <strncpy+0x6>
 800adfe:	441a      	add	r2, r3
 800ae00:	2100      	movs	r1, #0
 800ae02:	4293      	cmp	r3, r2
 800ae04:	d100      	bne.n	800ae08 <strncpy+0x20>
 800ae06:	bd10      	pop	{r4, pc}
 800ae08:	f803 1b01 	strb.w	r1, [r3], #1
 800ae0c:	e7f9      	b.n	800ae02 <strncpy+0x1a>
	...

0800ae10 <__swbuf_r>:
 800ae10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae12:	460e      	mov	r6, r1
 800ae14:	4614      	mov	r4, r2
 800ae16:	4605      	mov	r5, r0
 800ae18:	b118      	cbz	r0, 800ae22 <__swbuf_r+0x12>
 800ae1a:	6983      	ldr	r3, [r0, #24]
 800ae1c:	b90b      	cbnz	r3, 800ae22 <__swbuf_r+0x12>
 800ae1e:	f000 f9f3 	bl	800b208 <__sinit>
 800ae22:	4b21      	ldr	r3, [pc, #132]	; (800aea8 <__swbuf_r+0x98>)
 800ae24:	429c      	cmp	r4, r3
 800ae26:	d12b      	bne.n	800ae80 <__swbuf_r+0x70>
 800ae28:	686c      	ldr	r4, [r5, #4]
 800ae2a:	69a3      	ldr	r3, [r4, #24]
 800ae2c:	60a3      	str	r3, [r4, #8]
 800ae2e:	89a3      	ldrh	r3, [r4, #12]
 800ae30:	071a      	lsls	r2, r3, #28
 800ae32:	d52f      	bpl.n	800ae94 <__swbuf_r+0x84>
 800ae34:	6923      	ldr	r3, [r4, #16]
 800ae36:	b36b      	cbz	r3, 800ae94 <__swbuf_r+0x84>
 800ae38:	6923      	ldr	r3, [r4, #16]
 800ae3a:	6820      	ldr	r0, [r4, #0]
 800ae3c:	1ac0      	subs	r0, r0, r3
 800ae3e:	6963      	ldr	r3, [r4, #20]
 800ae40:	b2f6      	uxtb	r6, r6
 800ae42:	4283      	cmp	r3, r0
 800ae44:	4637      	mov	r7, r6
 800ae46:	dc04      	bgt.n	800ae52 <__swbuf_r+0x42>
 800ae48:	4621      	mov	r1, r4
 800ae4a:	4628      	mov	r0, r5
 800ae4c:	f000 f948 	bl	800b0e0 <_fflush_r>
 800ae50:	bb30      	cbnz	r0, 800aea0 <__swbuf_r+0x90>
 800ae52:	68a3      	ldr	r3, [r4, #8]
 800ae54:	3b01      	subs	r3, #1
 800ae56:	60a3      	str	r3, [r4, #8]
 800ae58:	6823      	ldr	r3, [r4, #0]
 800ae5a:	1c5a      	adds	r2, r3, #1
 800ae5c:	6022      	str	r2, [r4, #0]
 800ae5e:	701e      	strb	r6, [r3, #0]
 800ae60:	6963      	ldr	r3, [r4, #20]
 800ae62:	3001      	adds	r0, #1
 800ae64:	4283      	cmp	r3, r0
 800ae66:	d004      	beq.n	800ae72 <__swbuf_r+0x62>
 800ae68:	89a3      	ldrh	r3, [r4, #12]
 800ae6a:	07db      	lsls	r3, r3, #31
 800ae6c:	d506      	bpl.n	800ae7c <__swbuf_r+0x6c>
 800ae6e:	2e0a      	cmp	r6, #10
 800ae70:	d104      	bne.n	800ae7c <__swbuf_r+0x6c>
 800ae72:	4621      	mov	r1, r4
 800ae74:	4628      	mov	r0, r5
 800ae76:	f000 f933 	bl	800b0e0 <_fflush_r>
 800ae7a:	b988      	cbnz	r0, 800aea0 <__swbuf_r+0x90>
 800ae7c:	4638      	mov	r0, r7
 800ae7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae80:	4b0a      	ldr	r3, [pc, #40]	; (800aeac <__swbuf_r+0x9c>)
 800ae82:	429c      	cmp	r4, r3
 800ae84:	d101      	bne.n	800ae8a <__swbuf_r+0x7a>
 800ae86:	68ac      	ldr	r4, [r5, #8]
 800ae88:	e7cf      	b.n	800ae2a <__swbuf_r+0x1a>
 800ae8a:	4b09      	ldr	r3, [pc, #36]	; (800aeb0 <__swbuf_r+0xa0>)
 800ae8c:	429c      	cmp	r4, r3
 800ae8e:	bf08      	it	eq
 800ae90:	68ec      	ldreq	r4, [r5, #12]
 800ae92:	e7ca      	b.n	800ae2a <__swbuf_r+0x1a>
 800ae94:	4621      	mov	r1, r4
 800ae96:	4628      	mov	r0, r5
 800ae98:	f000 f81e 	bl	800aed8 <__swsetup_r>
 800ae9c:	2800      	cmp	r0, #0
 800ae9e:	d0cb      	beq.n	800ae38 <__swbuf_r+0x28>
 800aea0:	f04f 37ff 	mov.w	r7, #4294967295
 800aea4:	e7ea      	b.n	800ae7c <__swbuf_r+0x6c>
 800aea6:	bf00      	nop
 800aea8:	0800c46c 	.word	0x0800c46c
 800aeac:	0800c48c 	.word	0x0800c48c
 800aeb0:	0800c44c 	.word	0x0800c44c

0800aeb4 <_write_r>:
 800aeb4:	b538      	push	{r3, r4, r5, lr}
 800aeb6:	4d07      	ldr	r5, [pc, #28]	; (800aed4 <_write_r+0x20>)
 800aeb8:	4604      	mov	r4, r0
 800aeba:	4608      	mov	r0, r1
 800aebc:	4611      	mov	r1, r2
 800aebe:	2200      	movs	r2, #0
 800aec0:	602a      	str	r2, [r5, #0]
 800aec2:	461a      	mov	r2, r3
 800aec4:	f7f6 fd9c 	bl	8001a00 <_write>
 800aec8:	1c43      	adds	r3, r0, #1
 800aeca:	d102      	bne.n	800aed2 <_write_r+0x1e>
 800aecc:	682b      	ldr	r3, [r5, #0]
 800aece:	b103      	cbz	r3, 800aed2 <_write_r+0x1e>
 800aed0:	6023      	str	r3, [r4, #0]
 800aed2:	bd38      	pop	{r3, r4, r5, pc}
 800aed4:	20001af0 	.word	0x20001af0

0800aed8 <__swsetup_r>:
 800aed8:	4b32      	ldr	r3, [pc, #200]	; (800afa4 <__swsetup_r+0xcc>)
 800aeda:	b570      	push	{r4, r5, r6, lr}
 800aedc:	681d      	ldr	r5, [r3, #0]
 800aede:	4606      	mov	r6, r0
 800aee0:	460c      	mov	r4, r1
 800aee2:	b125      	cbz	r5, 800aeee <__swsetup_r+0x16>
 800aee4:	69ab      	ldr	r3, [r5, #24]
 800aee6:	b913      	cbnz	r3, 800aeee <__swsetup_r+0x16>
 800aee8:	4628      	mov	r0, r5
 800aeea:	f000 f98d 	bl	800b208 <__sinit>
 800aeee:	4b2e      	ldr	r3, [pc, #184]	; (800afa8 <__swsetup_r+0xd0>)
 800aef0:	429c      	cmp	r4, r3
 800aef2:	d10f      	bne.n	800af14 <__swsetup_r+0x3c>
 800aef4:	686c      	ldr	r4, [r5, #4]
 800aef6:	89a3      	ldrh	r3, [r4, #12]
 800aef8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aefc:	0719      	lsls	r1, r3, #28
 800aefe:	d42c      	bmi.n	800af5a <__swsetup_r+0x82>
 800af00:	06dd      	lsls	r5, r3, #27
 800af02:	d411      	bmi.n	800af28 <__swsetup_r+0x50>
 800af04:	2309      	movs	r3, #9
 800af06:	6033      	str	r3, [r6, #0]
 800af08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800af0c:	81a3      	strh	r3, [r4, #12]
 800af0e:	f04f 30ff 	mov.w	r0, #4294967295
 800af12:	e03e      	b.n	800af92 <__swsetup_r+0xba>
 800af14:	4b25      	ldr	r3, [pc, #148]	; (800afac <__swsetup_r+0xd4>)
 800af16:	429c      	cmp	r4, r3
 800af18:	d101      	bne.n	800af1e <__swsetup_r+0x46>
 800af1a:	68ac      	ldr	r4, [r5, #8]
 800af1c:	e7eb      	b.n	800aef6 <__swsetup_r+0x1e>
 800af1e:	4b24      	ldr	r3, [pc, #144]	; (800afb0 <__swsetup_r+0xd8>)
 800af20:	429c      	cmp	r4, r3
 800af22:	bf08      	it	eq
 800af24:	68ec      	ldreq	r4, [r5, #12]
 800af26:	e7e6      	b.n	800aef6 <__swsetup_r+0x1e>
 800af28:	0758      	lsls	r0, r3, #29
 800af2a:	d512      	bpl.n	800af52 <__swsetup_r+0x7a>
 800af2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af2e:	b141      	cbz	r1, 800af42 <__swsetup_r+0x6a>
 800af30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af34:	4299      	cmp	r1, r3
 800af36:	d002      	beq.n	800af3e <__swsetup_r+0x66>
 800af38:	4630      	mov	r0, r6
 800af3a:	f7ff fd4b 	bl	800a9d4 <_free_r>
 800af3e:	2300      	movs	r3, #0
 800af40:	6363      	str	r3, [r4, #52]	; 0x34
 800af42:	89a3      	ldrh	r3, [r4, #12]
 800af44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800af48:	81a3      	strh	r3, [r4, #12]
 800af4a:	2300      	movs	r3, #0
 800af4c:	6063      	str	r3, [r4, #4]
 800af4e:	6923      	ldr	r3, [r4, #16]
 800af50:	6023      	str	r3, [r4, #0]
 800af52:	89a3      	ldrh	r3, [r4, #12]
 800af54:	f043 0308 	orr.w	r3, r3, #8
 800af58:	81a3      	strh	r3, [r4, #12]
 800af5a:	6923      	ldr	r3, [r4, #16]
 800af5c:	b94b      	cbnz	r3, 800af72 <__swsetup_r+0x9a>
 800af5e:	89a3      	ldrh	r3, [r4, #12]
 800af60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800af64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af68:	d003      	beq.n	800af72 <__swsetup_r+0x9a>
 800af6a:	4621      	mov	r1, r4
 800af6c:	4630      	mov	r0, r6
 800af6e:	f000 fa23 	bl	800b3b8 <__smakebuf_r>
 800af72:	89a0      	ldrh	r0, [r4, #12]
 800af74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af78:	f010 0301 	ands.w	r3, r0, #1
 800af7c:	d00a      	beq.n	800af94 <__swsetup_r+0xbc>
 800af7e:	2300      	movs	r3, #0
 800af80:	60a3      	str	r3, [r4, #8]
 800af82:	6963      	ldr	r3, [r4, #20]
 800af84:	425b      	negs	r3, r3
 800af86:	61a3      	str	r3, [r4, #24]
 800af88:	6923      	ldr	r3, [r4, #16]
 800af8a:	b943      	cbnz	r3, 800af9e <__swsetup_r+0xc6>
 800af8c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800af90:	d1ba      	bne.n	800af08 <__swsetup_r+0x30>
 800af92:	bd70      	pop	{r4, r5, r6, pc}
 800af94:	0781      	lsls	r1, r0, #30
 800af96:	bf58      	it	pl
 800af98:	6963      	ldrpl	r3, [r4, #20]
 800af9a:	60a3      	str	r3, [r4, #8]
 800af9c:	e7f4      	b.n	800af88 <__swsetup_r+0xb0>
 800af9e:	2000      	movs	r0, #0
 800afa0:	e7f7      	b.n	800af92 <__swsetup_r+0xba>
 800afa2:	bf00      	nop
 800afa4:	200000b4 	.word	0x200000b4
 800afa8:	0800c46c 	.word	0x0800c46c
 800afac:	0800c48c 	.word	0x0800c48c
 800afb0:	0800c44c 	.word	0x0800c44c

0800afb4 <_close_r>:
 800afb4:	b538      	push	{r3, r4, r5, lr}
 800afb6:	4d06      	ldr	r5, [pc, #24]	; (800afd0 <_close_r+0x1c>)
 800afb8:	2300      	movs	r3, #0
 800afba:	4604      	mov	r4, r0
 800afbc:	4608      	mov	r0, r1
 800afbe:	602b      	str	r3, [r5, #0]
 800afc0:	f7f6 fe3f 	bl	8001c42 <_close>
 800afc4:	1c43      	adds	r3, r0, #1
 800afc6:	d102      	bne.n	800afce <_close_r+0x1a>
 800afc8:	682b      	ldr	r3, [r5, #0]
 800afca:	b103      	cbz	r3, 800afce <_close_r+0x1a>
 800afcc:	6023      	str	r3, [r4, #0]
 800afce:	bd38      	pop	{r3, r4, r5, pc}
 800afd0:	20001af0 	.word	0x20001af0

0800afd4 <__sflush_r>:
 800afd4:	898a      	ldrh	r2, [r1, #12]
 800afd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afda:	4605      	mov	r5, r0
 800afdc:	0710      	lsls	r0, r2, #28
 800afde:	460c      	mov	r4, r1
 800afe0:	d458      	bmi.n	800b094 <__sflush_r+0xc0>
 800afe2:	684b      	ldr	r3, [r1, #4]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	dc05      	bgt.n	800aff4 <__sflush_r+0x20>
 800afe8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800afea:	2b00      	cmp	r3, #0
 800afec:	dc02      	bgt.n	800aff4 <__sflush_r+0x20>
 800afee:	2000      	movs	r0, #0
 800aff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aff4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aff6:	2e00      	cmp	r6, #0
 800aff8:	d0f9      	beq.n	800afee <__sflush_r+0x1a>
 800affa:	2300      	movs	r3, #0
 800affc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b000:	682f      	ldr	r7, [r5, #0]
 800b002:	602b      	str	r3, [r5, #0]
 800b004:	d032      	beq.n	800b06c <__sflush_r+0x98>
 800b006:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b008:	89a3      	ldrh	r3, [r4, #12]
 800b00a:	075a      	lsls	r2, r3, #29
 800b00c:	d505      	bpl.n	800b01a <__sflush_r+0x46>
 800b00e:	6863      	ldr	r3, [r4, #4]
 800b010:	1ac0      	subs	r0, r0, r3
 800b012:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b014:	b10b      	cbz	r3, 800b01a <__sflush_r+0x46>
 800b016:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b018:	1ac0      	subs	r0, r0, r3
 800b01a:	2300      	movs	r3, #0
 800b01c:	4602      	mov	r2, r0
 800b01e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b020:	6a21      	ldr	r1, [r4, #32]
 800b022:	4628      	mov	r0, r5
 800b024:	47b0      	blx	r6
 800b026:	1c43      	adds	r3, r0, #1
 800b028:	89a3      	ldrh	r3, [r4, #12]
 800b02a:	d106      	bne.n	800b03a <__sflush_r+0x66>
 800b02c:	6829      	ldr	r1, [r5, #0]
 800b02e:	291d      	cmp	r1, #29
 800b030:	d82c      	bhi.n	800b08c <__sflush_r+0xb8>
 800b032:	4a2a      	ldr	r2, [pc, #168]	; (800b0dc <__sflush_r+0x108>)
 800b034:	40ca      	lsrs	r2, r1
 800b036:	07d6      	lsls	r6, r2, #31
 800b038:	d528      	bpl.n	800b08c <__sflush_r+0xb8>
 800b03a:	2200      	movs	r2, #0
 800b03c:	6062      	str	r2, [r4, #4]
 800b03e:	04d9      	lsls	r1, r3, #19
 800b040:	6922      	ldr	r2, [r4, #16]
 800b042:	6022      	str	r2, [r4, #0]
 800b044:	d504      	bpl.n	800b050 <__sflush_r+0x7c>
 800b046:	1c42      	adds	r2, r0, #1
 800b048:	d101      	bne.n	800b04e <__sflush_r+0x7a>
 800b04a:	682b      	ldr	r3, [r5, #0]
 800b04c:	b903      	cbnz	r3, 800b050 <__sflush_r+0x7c>
 800b04e:	6560      	str	r0, [r4, #84]	; 0x54
 800b050:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b052:	602f      	str	r7, [r5, #0]
 800b054:	2900      	cmp	r1, #0
 800b056:	d0ca      	beq.n	800afee <__sflush_r+0x1a>
 800b058:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b05c:	4299      	cmp	r1, r3
 800b05e:	d002      	beq.n	800b066 <__sflush_r+0x92>
 800b060:	4628      	mov	r0, r5
 800b062:	f7ff fcb7 	bl	800a9d4 <_free_r>
 800b066:	2000      	movs	r0, #0
 800b068:	6360      	str	r0, [r4, #52]	; 0x34
 800b06a:	e7c1      	b.n	800aff0 <__sflush_r+0x1c>
 800b06c:	6a21      	ldr	r1, [r4, #32]
 800b06e:	2301      	movs	r3, #1
 800b070:	4628      	mov	r0, r5
 800b072:	47b0      	blx	r6
 800b074:	1c41      	adds	r1, r0, #1
 800b076:	d1c7      	bne.n	800b008 <__sflush_r+0x34>
 800b078:	682b      	ldr	r3, [r5, #0]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d0c4      	beq.n	800b008 <__sflush_r+0x34>
 800b07e:	2b1d      	cmp	r3, #29
 800b080:	d001      	beq.n	800b086 <__sflush_r+0xb2>
 800b082:	2b16      	cmp	r3, #22
 800b084:	d101      	bne.n	800b08a <__sflush_r+0xb6>
 800b086:	602f      	str	r7, [r5, #0]
 800b088:	e7b1      	b.n	800afee <__sflush_r+0x1a>
 800b08a:	89a3      	ldrh	r3, [r4, #12]
 800b08c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b090:	81a3      	strh	r3, [r4, #12]
 800b092:	e7ad      	b.n	800aff0 <__sflush_r+0x1c>
 800b094:	690f      	ldr	r7, [r1, #16]
 800b096:	2f00      	cmp	r7, #0
 800b098:	d0a9      	beq.n	800afee <__sflush_r+0x1a>
 800b09a:	0793      	lsls	r3, r2, #30
 800b09c:	680e      	ldr	r6, [r1, #0]
 800b09e:	bf08      	it	eq
 800b0a0:	694b      	ldreq	r3, [r1, #20]
 800b0a2:	600f      	str	r7, [r1, #0]
 800b0a4:	bf18      	it	ne
 800b0a6:	2300      	movne	r3, #0
 800b0a8:	eba6 0807 	sub.w	r8, r6, r7
 800b0ac:	608b      	str	r3, [r1, #8]
 800b0ae:	f1b8 0f00 	cmp.w	r8, #0
 800b0b2:	dd9c      	ble.n	800afee <__sflush_r+0x1a>
 800b0b4:	6a21      	ldr	r1, [r4, #32]
 800b0b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b0b8:	4643      	mov	r3, r8
 800b0ba:	463a      	mov	r2, r7
 800b0bc:	4628      	mov	r0, r5
 800b0be:	47b0      	blx	r6
 800b0c0:	2800      	cmp	r0, #0
 800b0c2:	dc06      	bgt.n	800b0d2 <__sflush_r+0xfe>
 800b0c4:	89a3      	ldrh	r3, [r4, #12]
 800b0c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0ca:	81a3      	strh	r3, [r4, #12]
 800b0cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b0d0:	e78e      	b.n	800aff0 <__sflush_r+0x1c>
 800b0d2:	4407      	add	r7, r0
 800b0d4:	eba8 0800 	sub.w	r8, r8, r0
 800b0d8:	e7e9      	b.n	800b0ae <__sflush_r+0xda>
 800b0da:	bf00      	nop
 800b0dc:	20400001 	.word	0x20400001

0800b0e0 <_fflush_r>:
 800b0e0:	b538      	push	{r3, r4, r5, lr}
 800b0e2:	690b      	ldr	r3, [r1, #16]
 800b0e4:	4605      	mov	r5, r0
 800b0e6:	460c      	mov	r4, r1
 800b0e8:	b913      	cbnz	r3, 800b0f0 <_fflush_r+0x10>
 800b0ea:	2500      	movs	r5, #0
 800b0ec:	4628      	mov	r0, r5
 800b0ee:	bd38      	pop	{r3, r4, r5, pc}
 800b0f0:	b118      	cbz	r0, 800b0fa <_fflush_r+0x1a>
 800b0f2:	6983      	ldr	r3, [r0, #24]
 800b0f4:	b90b      	cbnz	r3, 800b0fa <_fflush_r+0x1a>
 800b0f6:	f000 f887 	bl	800b208 <__sinit>
 800b0fa:	4b14      	ldr	r3, [pc, #80]	; (800b14c <_fflush_r+0x6c>)
 800b0fc:	429c      	cmp	r4, r3
 800b0fe:	d11b      	bne.n	800b138 <_fflush_r+0x58>
 800b100:	686c      	ldr	r4, [r5, #4]
 800b102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d0ef      	beq.n	800b0ea <_fflush_r+0xa>
 800b10a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b10c:	07d0      	lsls	r0, r2, #31
 800b10e:	d404      	bmi.n	800b11a <_fflush_r+0x3a>
 800b110:	0599      	lsls	r1, r3, #22
 800b112:	d402      	bmi.n	800b11a <_fflush_r+0x3a>
 800b114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b116:	f000 f915 	bl	800b344 <__retarget_lock_acquire_recursive>
 800b11a:	4628      	mov	r0, r5
 800b11c:	4621      	mov	r1, r4
 800b11e:	f7ff ff59 	bl	800afd4 <__sflush_r>
 800b122:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b124:	07da      	lsls	r2, r3, #31
 800b126:	4605      	mov	r5, r0
 800b128:	d4e0      	bmi.n	800b0ec <_fflush_r+0xc>
 800b12a:	89a3      	ldrh	r3, [r4, #12]
 800b12c:	059b      	lsls	r3, r3, #22
 800b12e:	d4dd      	bmi.n	800b0ec <_fflush_r+0xc>
 800b130:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b132:	f000 f908 	bl	800b346 <__retarget_lock_release_recursive>
 800b136:	e7d9      	b.n	800b0ec <_fflush_r+0xc>
 800b138:	4b05      	ldr	r3, [pc, #20]	; (800b150 <_fflush_r+0x70>)
 800b13a:	429c      	cmp	r4, r3
 800b13c:	d101      	bne.n	800b142 <_fflush_r+0x62>
 800b13e:	68ac      	ldr	r4, [r5, #8]
 800b140:	e7df      	b.n	800b102 <_fflush_r+0x22>
 800b142:	4b04      	ldr	r3, [pc, #16]	; (800b154 <_fflush_r+0x74>)
 800b144:	429c      	cmp	r4, r3
 800b146:	bf08      	it	eq
 800b148:	68ec      	ldreq	r4, [r5, #12]
 800b14a:	e7da      	b.n	800b102 <_fflush_r+0x22>
 800b14c:	0800c46c 	.word	0x0800c46c
 800b150:	0800c48c 	.word	0x0800c48c
 800b154:	0800c44c 	.word	0x0800c44c

0800b158 <std>:
 800b158:	2300      	movs	r3, #0
 800b15a:	b510      	push	{r4, lr}
 800b15c:	4604      	mov	r4, r0
 800b15e:	e9c0 3300 	strd	r3, r3, [r0]
 800b162:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b166:	6083      	str	r3, [r0, #8]
 800b168:	8181      	strh	r1, [r0, #12]
 800b16a:	6643      	str	r3, [r0, #100]	; 0x64
 800b16c:	81c2      	strh	r2, [r0, #14]
 800b16e:	6183      	str	r3, [r0, #24]
 800b170:	4619      	mov	r1, r3
 800b172:	2208      	movs	r2, #8
 800b174:	305c      	adds	r0, #92	; 0x5c
 800b176:	f7ff fc25 	bl	800a9c4 <memset>
 800b17a:	4b05      	ldr	r3, [pc, #20]	; (800b190 <std+0x38>)
 800b17c:	6263      	str	r3, [r4, #36]	; 0x24
 800b17e:	4b05      	ldr	r3, [pc, #20]	; (800b194 <std+0x3c>)
 800b180:	62a3      	str	r3, [r4, #40]	; 0x28
 800b182:	4b05      	ldr	r3, [pc, #20]	; (800b198 <std+0x40>)
 800b184:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b186:	4b05      	ldr	r3, [pc, #20]	; (800b19c <std+0x44>)
 800b188:	6224      	str	r4, [r4, #32]
 800b18a:	6323      	str	r3, [r4, #48]	; 0x30
 800b18c:	bd10      	pop	{r4, pc}
 800b18e:	bf00      	nop
 800b190:	0800ad11 	.word	0x0800ad11
 800b194:	0800ad33 	.word	0x0800ad33
 800b198:	0800ad6b 	.word	0x0800ad6b
 800b19c:	0800ad8f 	.word	0x0800ad8f

0800b1a0 <_cleanup_r>:
 800b1a0:	4901      	ldr	r1, [pc, #4]	; (800b1a8 <_cleanup_r+0x8>)
 800b1a2:	f000 b8af 	b.w	800b304 <_fwalk_reent>
 800b1a6:	bf00      	nop
 800b1a8:	0800b0e1 	.word	0x0800b0e1

0800b1ac <__sfmoreglue>:
 800b1ac:	b570      	push	{r4, r5, r6, lr}
 800b1ae:	2268      	movs	r2, #104	; 0x68
 800b1b0:	1e4d      	subs	r5, r1, #1
 800b1b2:	4355      	muls	r5, r2
 800b1b4:	460e      	mov	r6, r1
 800b1b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b1ba:	f7ff fc77 	bl	800aaac <_malloc_r>
 800b1be:	4604      	mov	r4, r0
 800b1c0:	b140      	cbz	r0, 800b1d4 <__sfmoreglue+0x28>
 800b1c2:	2100      	movs	r1, #0
 800b1c4:	e9c0 1600 	strd	r1, r6, [r0]
 800b1c8:	300c      	adds	r0, #12
 800b1ca:	60a0      	str	r0, [r4, #8]
 800b1cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b1d0:	f7ff fbf8 	bl	800a9c4 <memset>
 800b1d4:	4620      	mov	r0, r4
 800b1d6:	bd70      	pop	{r4, r5, r6, pc}

0800b1d8 <__sfp_lock_acquire>:
 800b1d8:	4801      	ldr	r0, [pc, #4]	; (800b1e0 <__sfp_lock_acquire+0x8>)
 800b1da:	f000 b8b3 	b.w	800b344 <__retarget_lock_acquire_recursive>
 800b1de:	bf00      	nop
 800b1e0:	20001aed 	.word	0x20001aed

0800b1e4 <__sfp_lock_release>:
 800b1e4:	4801      	ldr	r0, [pc, #4]	; (800b1ec <__sfp_lock_release+0x8>)
 800b1e6:	f000 b8ae 	b.w	800b346 <__retarget_lock_release_recursive>
 800b1ea:	bf00      	nop
 800b1ec:	20001aed 	.word	0x20001aed

0800b1f0 <__sinit_lock_acquire>:
 800b1f0:	4801      	ldr	r0, [pc, #4]	; (800b1f8 <__sinit_lock_acquire+0x8>)
 800b1f2:	f000 b8a7 	b.w	800b344 <__retarget_lock_acquire_recursive>
 800b1f6:	bf00      	nop
 800b1f8:	20001aee 	.word	0x20001aee

0800b1fc <__sinit_lock_release>:
 800b1fc:	4801      	ldr	r0, [pc, #4]	; (800b204 <__sinit_lock_release+0x8>)
 800b1fe:	f000 b8a2 	b.w	800b346 <__retarget_lock_release_recursive>
 800b202:	bf00      	nop
 800b204:	20001aee 	.word	0x20001aee

0800b208 <__sinit>:
 800b208:	b510      	push	{r4, lr}
 800b20a:	4604      	mov	r4, r0
 800b20c:	f7ff fff0 	bl	800b1f0 <__sinit_lock_acquire>
 800b210:	69a3      	ldr	r3, [r4, #24]
 800b212:	b11b      	cbz	r3, 800b21c <__sinit+0x14>
 800b214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b218:	f7ff bff0 	b.w	800b1fc <__sinit_lock_release>
 800b21c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b220:	6523      	str	r3, [r4, #80]	; 0x50
 800b222:	4b13      	ldr	r3, [pc, #76]	; (800b270 <__sinit+0x68>)
 800b224:	4a13      	ldr	r2, [pc, #76]	; (800b274 <__sinit+0x6c>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	62a2      	str	r2, [r4, #40]	; 0x28
 800b22a:	42a3      	cmp	r3, r4
 800b22c:	bf04      	itt	eq
 800b22e:	2301      	moveq	r3, #1
 800b230:	61a3      	streq	r3, [r4, #24]
 800b232:	4620      	mov	r0, r4
 800b234:	f000 f820 	bl	800b278 <__sfp>
 800b238:	6060      	str	r0, [r4, #4]
 800b23a:	4620      	mov	r0, r4
 800b23c:	f000 f81c 	bl	800b278 <__sfp>
 800b240:	60a0      	str	r0, [r4, #8]
 800b242:	4620      	mov	r0, r4
 800b244:	f000 f818 	bl	800b278 <__sfp>
 800b248:	2200      	movs	r2, #0
 800b24a:	60e0      	str	r0, [r4, #12]
 800b24c:	2104      	movs	r1, #4
 800b24e:	6860      	ldr	r0, [r4, #4]
 800b250:	f7ff ff82 	bl	800b158 <std>
 800b254:	68a0      	ldr	r0, [r4, #8]
 800b256:	2201      	movs	r2, #1
 800b258:	2109      	movs	r1, #9
 800b25a:	f7ff ff7d 	bl	800b158 <std>
 800b25e:	68e0      	ldr	r0, [r4, #12]
 800b260:	2202      	movs	r2, #2
 800b262:	2112      	movs	r1, #18
 800b264:	f7ff ff78 	bl	800b158 <std>
 800b268:	2301      	movs	r3, #1
 800b26a:	61a3      	str	r3, [r4, #24]
 800b26c:	e7d2      	b.n	800b214 <__sinit+0xc>
 800b26e:	bf00      	nop
 800b270:	0800c448 	.word	0x0800c448
 800b274:	0800b1a1 	.word	0x0800b1a1

0800b278 <__sfp>:
 800b278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b27a:	4607      	mov	r7, r0
 800b27c:	f7ff ffac 	bl	800b1d8 <__sfp_lock_acquire>
 800b280:	4b1e      	ldr	r3, [pc, #120]	; (800b2fc <__sfp+0x84>)
 800b282:	681e      	ldr	r6, [r3, #0]
 800b284:	69b3      	ldr	r3, [r6, #24]
 800b286:	b913      	cbnz	r3, 800b28e <__sfp+0x16>
 800b288:	4630      	mov	r0, r6
 800b28a:	f7ff ffbd 	bl	800b208 <__sinit>
 800b28e:	3648      	adds	r6, #72	; 0x48
 800b290:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b294:	3b01      	subs	r3, #1
 800b296:	d503      	bpl.n	800b2a0 <__sfp+0x28>
 800b298:	6833      	ldr	r3, [r6, #0]
 800b29a:	b30b      	cbz	r3, 800b2e0 <__sfp+0x68>
 800b29c:	6836      	ldr	r6, [r6, #0]
 800b29e:	e7f7      	b.n	800b290 <__sfp+0x18>
 800b2a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b2a4:	b9d5      	cbnz	r5, 800b2dc <__sfp+0x64>
 800b2a6:	4b16      	ldr	r3, [pc, #88]	; (800b300 <__sfp+0x88>)
 800b2a8:	60e3      	str	r3, [r4, #12]
 800b2aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b2ae:	6665      	str	r5, [r4, #100]	; 0x64
 800b2b0:	f000 f847 	bl	800b342 <__retarget_lock_init_recursive>
 800b2b4:	f7ff ff96 	bl	800b1e4 <__sfp_lock_release>
 800b2b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b2bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b2c0:	6025      	str	r5, [r4, #0]
 800b2c2:	61a5      	str	r5, [r4, #24]
 800b2c4:	2208      	movs	r2, #8
 800b2c6:	4629      	mov	r1, r5
 800b2c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b2cc:	f7ff fb7a 	bl	800a9c4 <memset>
 800b2d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b2d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b2d8:	4620      	mov	r0, r4
 800b2da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2dc:	3468      	adds	r4, #104	; 0x68
 800b2de:	e7d9      	b.n	800b294 <__sfp+0x1c>
 800b2e0:	2104      	movs	r1, #4
 800b2e2:	4638      	mov	r0, r7
 800b2e4:	f7ff ff62 	bl	800b1ac <__sfmoreglue>
 800b2e8:	4604      	mov	r4, r0
 800b2ea:	6030      	str	r0, [r6, #0]
 800b2ec:	2800      	cmp	r0, #0
 800b2ee:	d1d5      	bne.n	800b29c <__sfp+0x24>
 800b2f0:	f7ff ff78 	bl	800b1e4 <__sfp_lock_release>
 800b2f4:	230c      	movs	r3, #12
 800b2f6:	603b      	str	r3, [r7, #0]
 800b2f8:	e7ee      	b.n	800b2d8 <__sfp+0x60>
 800b2fa:	bf00      	nop
 800b2fc:	0800c448 	.word	0x0800c448
 800b300:	ffff0001 	.word	0xffff0001

0800b304 <_fwalk_reent>:
 800b304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b308:	4606      	mov	r6, r0
 800b30a:	4688      	mov	r8, r1
 800b30c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b310:	2700      	movs	r7, #0
 800b312:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b316:	f1b9 0901 	subs.w	r9, r9, #1
 800b31a:	d505      	bpl.n	800b328 <_fwalk_reent+0x24>
 800b31c:	6824      	ldr	r4, [r4, #0]
 800b31e:	2c00      	cmp	r4, #0
 800b320:	d1f7      	bne.n	800b312 <_fwalk_reent+0xe>
 800b322:	4638      	mov	r0, r7
 800b324:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b328:	89ab      	ldrh	r3, [r5, #12]
 800b32a:	2b01      	cmp	r3, #1
 800b32c:	d907      	bls.n	800b33e <_fwalk_reent+0x3a>
 800b32e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b332:	3301      	adds	r3, #1
 800b334:	d003      	beq.n	800b33e <_fwalk_reent+0x3a>
 800b336:	4629      	mov	r1, r5
 800b338:	4630      	mov	r0, r6
 800b33a:	47c0      	blx	r8
 800b33c:	4307      	orrs	r7, r0
 800b33e:	3568      	adds	r5, #104	; 0x68
 800b340:	e7e9      	b.n	800b316 <_fwalk_reent+0x12>

0800b342 <__retarget_lock_init_recursive>:
 800b342:	4770      	bx	lr

0800b344 <__retarget_lock_acquire_recursive>:
 800b344:	4770      	bx	lr

0800b346 <__retarget_lock_release_recursive>:
 800b346:	4770      	bx	lr

0800b348 <_lseek_r>:
 800b348:	b538      	push	{r3, r4, r5, lr}
 800b34a:	4d07      	ldr	r5, [pc, #28]	; (800b368 <_lseek_r+0x20>)
 800b34c:	4604      	mov	r4, r0
 800b34e:	4608      	mov	r0, r1
 800b350:	4611      	mov	r1, r2
 800b352:	2200      	movs	r2, #0
 800b354:	602a      	str	r2, [r5, #0]
 800b356:	461a      	mov	r2, r3
 800b358:	f7f6 fc9a 	bl	8001c90 <_lseek>
 800b35c:	1c43      	adds	r3, r0, #1
 800b35e:	d102      	bne.n	800b366 <_lseek_r+0x1e>
 800b360:	682b      	ldr	r3, [r5, #0]
 800b362:	b103      	cbz	r3, 800b366 <_lseek_r+0x1e>
 800b364:	6023      	str	r3, [r4, #0]
 800b366:	bd38      	pop	{r3, r4, r5, pc}
 800b368:	20001af0 	.word	0x20001af0

0800b36c <__swhatbuf_r>:
 800b36c:	b570      	push	{r4, r5, r6, lr}
 800b36e:	460e      	mov	r6, r1
 800b370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b374:	2900      	cmp	r1, #0
 800b376:	b096      	sub	sp, #88	; 0x58
 800b378:	4614      	mov	r4, r2
 800b37a:	461d      	mov	r5, r3
 800b37c:	da08      	bge.n	800b390 <__swhatbuf_r+0x24>
 800b37e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b382:	2200      	movs	r2, #0
 800b384:	602a      	str	r2, [r5, #0]
 800b386:	061a      	lsls	r2, r3, #24
 800b388:	d410      	bmi.n	800b3ac <__swhatbuf_r+0x40>
 800b38a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b38e:	e00e      	b.n	800b3ae <__swhatbuf_r+0x42>
 800b390:	466a      	mov	r2, sp
 800b392:	f000 fcc1 	bl	800bd18 <_fstat_r>
 800b396:	2800      	cmp	r0, #0
 800b398:	dbf1      	blt.n	800b37e <__swhatbuf_r+0x12>
 800b39a:	9a01      	ldr	r2, [sp, #4]
 800b39c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b3a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b3a4:	425a      	negs	r2, r3
 800b3a6:	415a      	adcs	r2, r3
 800b3a8:	602a      	str	r2, [r5, #0]
 800b3aa:	e7ee      	b.n	800b38a <__swhatbuf_r+0x1e>
 800b3ac:	2340      	movs	r3, #64	; 0x40
 800b3ae:	2000      	movs	r0, #0
 800b3b0:	6023      	str	r3, [r4, #0]
 800b3b2:	b016      	add	sp, #88	; 0x58
 800b3b4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b3b8 <__smakebuf_r>:
 800b3b8:	898b      	ldrh	r3, [r1, #12]
 800b3ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b3bc:	079d      	lsls	r5, r3, #30
 800b3be:	4606      	mov	r6, r0
 800b3c0:	460c      	mov	r4, r1
 800b3c2:	d507      	bpl.n	800b3d4 <__smakebuf_r+0x1c>
 800b3c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b3c8:	6023      	str	r3, [r4, #0]
 800b3ca:	6123      	str	r3, [r4, #16]
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	6163      	str	r3, [r4, #20]
 800b3d0:	b002      	add	sp, #8
 800b3d2:	bd70      	pop	{r4, r5, r6, pc}
 800b3d4:	ab01      	add	r3, sp, #4
 800b3d6:	466a      	mov	r2, sp
 800b3d8:	f7ff ffc8 	bl	800b36c <__swhatbuf_r>
 800b3dc:	9900      	ldr	r1, [sp, #0]
 800b3de:	4605      	mov	r5, r0
 800b3e0:	4630      	mov	r0, r6
 800b3e2:	f7ff fb63 	bl	800aaac <_malloc_r>
 800b3e6:	b948      	cbnz	r0, 800b3fc <__smakebuf_r+0x44>
 800b3e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3ec:	059a      	lsls	r2, r3, #22
 800b3ee:	d4ef      	bmi.n	800b3d0 <__smakebuf_r+0x18>
 800b3f0:	f023 0303 	bic.w	r3, r3, #3
 800b3f4:	f043 0302 	orr.w	r3, r3, #2
 800b3f8:	81a3      	strh	r3, [r4, #12]
 800b3fa:	e7e3      	b.n	800b3c4 <__smakebuf_r+0xc>
 800b3fc:	4b0d      	ldr	r3, [pc, #52]	; (800b434 <__smakebuf_r+0x7c>)
 800b3fe:	62b3      	str	r3, [r6, #40]	; 0x28
 800b400:	89a3      	ldrh	r3, [r4, #12]
 800b402:	6020      	str	r0, [r4, #0]
 800b404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b408:	81a3      	strh	r3, [r4, #12]
 800b40a:	9b00      	ldr	r3, [sp, #0]
 800b40c:	6163      	str	r3, [r4, #20]
 800b40e:	9b01      	ldr	r3, [sp, #4]
 800b410:	6120      	str	r0, [r4, #16]
 800b412:	b15b      	cbz	r3, 800b42c <__smakebuf_r+0x74>
 800b414:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b418:	4630      	mov	r0, r6
 800b41a:	f000 fc8f 	bl	800bd3c <_isatty_r>
 800b41e:	b128      	cbz	r0, 800b42c <__smakebuf_r+0x74>
 800b420:	89a3      	ldrh	r3, [r4, #12]
 800b422:	f023 0303 	bic.w	r3, r3, #3
 800b426:	f043 0301 	orr.w	r3, r3, #1
 800b42a:	81a3      	strh	r3, [r4, #12]
 800b42c:	89a0      	ldrh	r0, [r4, #12]
 800b42e:	4305      	orrs	r5, r0
 800b430:	81a5      	strh	r5, [r4, #12]
 800b432:	e7cd      	b.n	800b3d0 <__smakebuf_r+0x18>
 800b434:	0800b1a1 	.word	0x0800b1a1

0800b438 <__malloc_lock>:
 800b438:	4801      	ldr	r0, [pc, #4]	; (800b440 <__malloc_lock+0x8>)
 800b43a:	f7ff bf83 	b.w	800b344 <__retarget_lock_acquire_recursive>
 800b43e:	bf00      	nop
 800b440:	20001aec 	.word	0x20001aec

0800b444 <__malloc_unlock>:
 800b444:	4801      	ldr	r0, [pc, #4]	; (800b44c <__malloc_unlock+0x8>)
 800b446:	f7ff bf7e 	b.w	800b346 <__retarget_lock_release_recursive>
 800b44a:	bf00      	nop
 800b44c:	20001aec 	.word	0x20001aec

0800b450 <__ssputs_r>:
 800b450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b454:	688e      	ldr	r6, [r1, #8]
 800b456:	429e      	cmp	r6, r3
 800b458:	4682      	mov	sl, r0
 800b45a:	460c      	mov	r4, r1
 800b45c:	4690      	mov	r8, r2
 800b45e:	461f      	mov	r7, r3
 800b460:	d838      	bhi.n	800b4d4 <__ssputs_r+0x84>
 800b462:	898a      	ldrh	r2, [r1, #12]
 800b464:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b468:	d032      	beq.n	800b4d0 <__ssputs_r+0x80>
 800b46a:	6825      	ldr	r5, [r4, #0]
 800b46c:	6909      	ldr	r1, [r1, #16]
 800b46e:	eba5 0901 	sub.w	r9, r5, r1
 800b472:	6965      	ldr	r5, [r4, #20]
 800b474:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b478:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b47c:	3301      	adds	r3, #1
 800b47e:	444b      	add	r3, r9
 800b480:	106d      	asrs	r5, r5, #1
 800b482:	429d      	cmp	r5, r3
 800b484:	bf38      	it	cc
 800b486:	461d      	movcc	r5, r3
 800b488:	0553      	lsls	r3, r2, #21
 800b48a:	d531      	bpl.n	800b4f0 <__ssputs_r+0xa0>
 800b48c:	4629      	mov	r1, r5
 800b48e:	f7ff fb0d 	bl	800aaac <_malloc_r>
 800b492:	4606      	mov	r6, r0
 800b494:	b950      	cbnz	r0, 800b4ac <__ssputs_r+0x5c>
 800b496:	230c      	movs	r3, #12
 800b498:	f8ca 3000 	str.w	r3, [sl]
 800b49c:	89a3      	ldrh	r3, [r4, #12]
 800b49e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4a2:	81a3      	strh	r3, [r4, #12]
 800b4a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b4a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4ac:	6921      	ldr	r1, [r4, #16]
 800b4ae:	464a      	mov	r2, r9
 800b4b0:	f7ff fa7a 	bl	800a9a8 <memcpy>
 800b4b4:	89a3      	ldrh	r3, [r4, #12]
 800b4b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b4ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4be:	81a3      	strh	r3, [r4, #12]
 800b4c0:	6126      	str	r6, [r4, #16]
 800b4c2:	6165      	str	r5, [r4, #20]
 800b4c4:	444e      	add	r6, r9
 800b4c6:	eba5 0509 	sub.w	r5, r5, r9
 800b4ca:	6026      	str	r6, [r4, #0]
 800b4cc:	60a5      	str	r5, [r4, #8]
 800b4ce:	463e      	mov	r6, r7
 800b4d0:	42be      	cmp	r6, r7
 800b4d2:	d900      	bls.n	800b4d6 <__ssputs_r+0x86>
 800b4d4:	463e      	mov	r6, r7
 800b4d6:	6820      	ldr	r0, [r4, #0]
 800b4d8:	4632      	mov	r2, r6
 800b4da:	4641      	mov	r1, r8
 800b4dc:	f000 fc3e 	bl	800bd5c <memmove>
 800b4e0:	68a3      	ldr	r3, [r4, #8]
 800b4e2:	1b9b      	subs	r3, r3, r6
 800b4e4:	60a3      	str	r3, [r4, #8]
 800b4e6:	6823      	ldr	r3, [r4, #0]
 800b4e8:	4433      	add	r3, r6
 800b4ea:	6023      	str	r3, [r4, #0]
 800b4ec:	2000      	movs	r0, #0
 800b4ee:	e7db      	b.n	800b4a8 <__ssputs_r+0x58>
 800b4f0:	462a      	mov	r2, r5
 800b4f2:	f000 fc4d 	bl	800bd90 <_realloc_r>
 800b4f6:	4606      	mov	r6, r0
 800b4f8:	2800      	cmp	r0, #0
 800b4fa:	d1e1      	bne.n	800b4c0 <__ssputs_r+0x70>
 800b4fc:	6921      	ldr	r1, [r4, #16]
 800b4fe:	4650      	mov	r0, sl
 800b500:	f7ff fa68 	bl	800a9d4 <_free_r>
 800b504:	e7c7      	b.n	800b496 <__ssputs_r+0x46>
	...

0800b508 <_svfiprintf_r>:
 800b508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b50c:	4698      	mov	r8, r3
 800b50e:	898b      	ldrh	r3, [r1, #12]
 800b510:	061b      	lsls	r3, r3, #24
 800b512:	b09d      	sub	sp, #116	; 0x74
 800b514:	4607      	mov	r7, r0
 800b516:	460d      	mov	r5, r1
 800b518:	4614      	mov	r4, r2
 800b51a:	d50e      	bpl.n	800b53a <_svfiprintf_r+0x32>
 800b51c:	690b      	ldr	r3, [r1, #16]
 800b51e:	b963      	cbnz	r3, 800b53a <_svfiprintf_r+0x32>
 800b520:	2140      	movs	r1, #64	; 0x40
 800b522:	f7ff fac3 	bl	800aaac <_malloc_r>
 800b526:	6028      	str	r0, [r5, #0]
 800b528:	6128      	str	r0, [r5, #16]
 800b52a:	b920      	cbnz	r0, 800b536 <_svfiprintf_r+0x2e>
 800b52c:	230c      	movs	r3, #12
 800b52e:	603b      	str	r3, [r7, #0]
 800b530:	f04f 30ff 	mov.w	r0, #4294967295
 800b534:	e0d1      	b.n	800b6da <_svfiprintf_r+0x1d2>
 800b536:	2340      	movs	r3, #64	; 0x40
 800b538:	616b      	str	r3, [r5, #20]
 800b53a:	2300      	movs	r3, #0
 800b53c:	9309      	str	r3, [sp, #36]	; 0x24
 800b53e:	2320      	movs	r3, #32
 800b540:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b544:	f8cd 800c 	str.w	r8, [sp, #12]
 800b548:	2330      	movs	r3, #48	; 0x30
 800b54a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b6f4 <_svfiprintf_r+0x1ec>
 800b54e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b552:	f04f 0901 	mov.w	r9, #1
 800b556:	4623      	mov	r3, r4
 800b558:	469a      	mov	sl, r3
 800b55a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b55e:	b10a      	cbz	r2, 800b564 <_svfiprintf_r+0x5c>
 800b560:	2a25      	cmp	r2, #37	; 0x25
 800b562:	d1f9      	bne.n	800b558 <_svfiprintf_r+0x50>
 800b564:	ebba 0b04 	subs.w	fp, sl, r4
 800b568:	d00b      	beq.n	800b582 <_svfiprintf_r+0x7a>
 800b56a:	465b      	mov	r3, fp
 800b56c:	4622      	mov	r2, r4
 800b56e:	4629      	mov	r1, r5
 800b570:	4638      	mov	r0, r7
 800b572:	f7ff ff6d 	bl	800b450 <__ssputs_r>
 800b576:	3001      	adds	r0, #1
 800b578:	f000 80aa 	beq.w	800b6d0 <_svfiprintf_r+0x1c8>
 800b57c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b57e:	445a      	add	r2, fp
 800b580:	9209      	str	r2, [sp, #36]	; 0x24
 800b582:	f89a 3000 	ldrb.w	r3, [sl]
 800b586:	2b00      	cmp	r3, #0
 800b588:	f000 80a2 	beq.w	800b6d0 <_svfiprintf_r+0x1c8>
 800b58c:	2300      	movs	r3, #0
 800b58e:	f04f 32ff 	mov.w	r2, #4294967295
 800b592:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b596:	f10a 0a01 	add.w	sl, sl, #1
 800b59a:	9304      	str	r3, [sp, #16]
 800b59c:	9307      	str	r3, [sp, #28]
 800b59e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b5a2:	931a      	str	r3, [sp, #104]	; 0x68
 800b5a4:	4654      	mov	r4, sl
 800b5a6:	2205      	movs	r2, #5
 800b5a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5ac:	4851      	ldr	r0, [pc, #324]	; (800b6f4 <_svfiprintf_r+0x1ec>)
 800b5ae:	f7f4 fe3f 	bl	8000230 <memchr>
 800b5b2:	9a04      	ldr	r2, [sp, #16]
 800b5b4:	b9d8      	cbnz	r0, 800b5ee <_svfiprintf_r+0xe6>
 800b5b6:	06d0      	lsls	r0, r2, #27
 800b5b8:	bf44      	itt	mi
 800b5ba:	2320      	movmi	r3, #32
 800b5bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5c0:	0711      	lsls	r1, r2, #28
 800b5c2:	bf44      	itt	mi
 800b5c4:	232b      	movmi	r3, #43	; 0x2b
 800b5c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5ca:	f89a 3000 	ldrb.w	r3, [sl]
 800b5ce:	2b2a      	cmp	r3, #42	; 0x2a
 800b5d0:	d015      	beq.n	800b5fe <_svfiprintf_r+0xf6>
 800b5d2:	9a07      	ldr	r2, [sp, #28]
 800b5d4:	4654      	mov	r4, sl
 800b5d6:	2000      	movs	r0, #0
 800b5d8:	f04f 0c0a 	mov.w	ip, #10
 800b5dc:	4621      	mov	r1, r4
 800b5de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5e2:	3b30      	subs	r3, #48	; 0x30
 800b5e4:	2b09      	cmp	r3, #9
 800b5e6:	d94e      	bls.n	800b686 <_svfiprintf_r+0x17e>
 800b5e8:	b1b0      	cbz	r0, 800b618 <_svfiprintf_r+0x110>
 800b5ea:	9207      	str	r2, [sp, #28]
 800b5ec:	e014      	b.n	800b618 <_svfiprintf_r+0x110>
 800b5ee:	eba0 0308 	sub.w	r3, r0, r8
 800b5f2:	fa09 f303 	lsl.w	r3, r9, r3
 800b5f6:	4313      	orrs	r3, r2
 800b5f8:	9304      	str	r3, [sp, #16]
 800b5fa:	46a2      	mov	sl, r4
 800b5fc:	e7d2      	b.n	800b5a4 <_svfiprintf_r+0x9c>
 800b5fe:	9b03      	ldr	r3, [sp, #12]
 800b600:	1d19      	adds	r1, r3, #4
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	9103      	str	r1, [sp, #12]
 800b606:	2b00      	cmp	r3, #0
 800b608:	bfbb      	ittet	lt
 800b60a:	425b      	neglt	r3, r3
 800b60c:	f042 0202 	orrlt.w	r2, r2, #2
 800b610:	9307      	strge	r3, [sp, #28]
 800b612:	9307      	strlt	r3, [sp, #28]
 800b614:	bfb8      	it	lt
 800b616:	9204      	strlt	r2, [sp, #16]
 800b618:	7823      	ldrb	r3, [r4, #0]
 800b61a:	2b2e      	cmp	r3, #46	; 0x2e
 800b61c:	d10c      	bne.n	800b638 <_svfiprintf_r+0x130>
 800b61e:	7863      	ldrb	r3, [r4, #1]
 800b620:	2b2a      	cmp	r3, #42	; 0x2a
 800b622:	d135      	bne.n	800b690 <_svfiprintf_r+0x188>
 800b624:	9b03      	ldr	r3, [sp, #12]
 800b626:	1d1a      	adds	r2, r3, #4
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	9203      	str	r2, [sp, #12]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	bfb8      	it	lt
 800b630:	f04f 33ff 	movlt.w	r3, #4294967295
 800b634:	3402      	adds	r4, #2
 800b636:	9305      	str	r3, [sp, #20]
 800b638:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b704 <_svfiprintf_r+0x1fc>
 800b63c:	7821      	ldrb	r1, [r4, #0]
 800b63e:	2203      	movs	r2, #3
 800b640:	4650      	mov	r0, sl
 800b642:	f7f4 fdf5 	bl	8000230 <memchr>
 800b646:	b140      	cbz	r0, 800b65a <_svfiprintf_r+0x152>
 800b648:	2340      	movs	r3, #64	; 0x40
 800b64a:	eba0 000a 	sub.w	r0, r0, sl
 800b64e:	fa03 f000 	lsl.w	r0, r3, r0
 800b652:	9b04      	ldr	r3, [sp, #16]
 800b654:	4303      	orrs	r3, r0
 800b656:	3401      	adds	r4, #1
 800b658:	9304      	str	r3, [sp, #16]
 800b65a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b65e:	4826      	ldr	r0, [pc, #152]	; (800b6f8 <_svfiprintf_r+0x1f0>)
 800b660:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b664:	2206      	movs	r2, #6
 800b666:	f7f4 fde3 	bl	8000230 <memchr>
 800b66a:	2800      	cmp	r0, #0
 800b66c:	d038      	beq.n	800b6e0 <_svfiprintf_r+0x1d8>
 800b66e:	4b23      	ldr	r3, [pc, #140]	; (800b6fc <_svfiprintf_r+0x1f4>)
 800b670:	bb1b      	cbnz	r3, 800b6ba <_svfiprintf_r+0x1b2>
 800b672:	9b03      	ldr	r3, [sp, #12]
 800b674:	3307      	adds	r3, #7
 800b676:	f023 0307 	bic.w	r3, r3, #7
 800b67a:	3308      	adds	r3, #8
 800b67c:	9303      	str	r3, [sp, #12]
 800b67e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b680:	4433      	add	r3, r6
 800b682:	9309      	str	r3, [sp, #36]	; 0x24
 800b684:	e767      	b.n	800b556 <_svfiprintf_r+0x4e>
 800b686:	fb0c 3202 	mla	r2, ip, r2, r3
 800b68a:	460c      	mov	r4, r1
 800b68c:	2001      	movs	r0, #1
 800b68e:	e7a5      	b.n	800b5dc <_svfiprintf_r+0xd4>
 800b690:	2300      	movs	r3, #0
 800b692:	3401      	adds	r4, #1
 800b694:	9305      	str	r3, [sp, #20]
 800b696:	4619      	mov	r1, r3
 800b698:	f04f 0c0a 	mov.w	ip, #10
 800b69c:	4620      	mov	r0, r4
 800b69e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6a2:	3a30      	subs	r2, #48	; 0x30
 800b6a4:	2a09      	cmp	r2, #9
 800b6a6:	d903      	bls.n	800b6b0 <_svfiprintf_r+0x1a8>
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d0c5      	beq.n	800b638 <_svfiprintf_r+0x130>
 800b6ac:	9105      	str	r1, [sp, #20]
 800b6ae:	e7c3      	b.n	800b638 <_svfiprintf_r+0x130>
 800b6b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6b4:	4604      	mov	r4, r0
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	e7f0      	b.n	800b69c <_svfiprintf_r+0x194>
 800b6ba:	ab03      	add	r3, sp, #12
 800b6bc:	9300      	str	r3, [sp, #0]
 800b6be:	462a      	mov	r2, r5
 800b6c0:	4b0f      	ldr	r3, [pc, #60]	; (800b700 <_svfiprintf_r+0x1f8>)
 800b6c2:	a904      	add	r1, sp, #16
 800b6c4:	4638      	mov	r0, r7
 800b6c6:	f3af 8000 	nop.w
 800b6ca:	1c42      	adds	r2, r0, #1
 800b6cc:	4606      	mov	r6, r0
 800b6ce:	d1d6      	bne.n	800b67e <_svfiprintf_r+0x176>
 800b6d0:	89ab      	ldrh	r3, [r5, #12]
 800b6d2:	065b      	lsls	r3, r3, #25
 800b6d4:	f53f af2c 	bmi.w	800b530 <_svfiprintf_r+0x28>
 800b6d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b6da:	b01d      	add	sp, #116	; 0x74
 800b6dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6e0:	ab03      	add	r3, sp, #12
 800b6e2:	9300      	str	r3, [sp, #0]
 800b6e4:	462a      	mov	r2, r5
 800b6e6:	4b06      	ldr	r3, [pc, #24]	; (800b700 <_svfiprintf_r+0x1f8>)
 800b6e8:	a904      	add	r1, sp, #16
 800b6ea:	4638      	mov	r0, r7
 800b6ec:	f000 f9d4 	bl	800ba98 <_printf_i>
 800b6f0:	e7eb      	b.n	800b6ca <_svfiprintf_r+0x1c2>
 800b6f2:	bf00      	nop
 800b6f4:	0800c4ac 	.word	0x0800c4ac
 800b6f8:	0800c4b6 	.word	0x0800c4b6
 800b6fc:	00000000 	.word	0x00000000
 800b700:	0800b451 	.word	0x0800b451
 800b704:	0800c4b2 	.word	0x0800c4b2

0800b708 <__sfputc_r>:
 800b708:	6893      	ldr	r3, [r2, #8]
 800b70a:	3b01      	subs	r3, #1
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	b410      	push	{r4}
 800b710:	6093      	str	r3, [r2, #8]
 800b712:	da08      	bge.n	800b726 <__sfputc_r+0x1e>
 800b714:	6994      	ldr	r4, [r2, #24]
 800b716:	42a3      	cmp	r3, r4
 800b718:	db01      	blt.n	800b71e <__sfputc_r+0x16>
 800b71a:	290a      	cmp	r1, #10
 800b71c:	d103      	bne.n	800b726 <__sfputc_r+0x1e>
 800b71e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b722:	f7ff bb75 	b.w	800ae10 <__swbuf_r>
 800b726:	6813      	ldr	r3, [r2, #0]
 800b728:	1c58      	adds	r0, r3, #1
 800b72a:	6010      	str	r0, [r2, #0]
 800b72c:	7019      	strb	r1, [r3, #0]
 800b72e:	4608      	mov	r0, r1
 800b730:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b734:	4770      	bx	lr

0800b736 <__sfputs_r>:
 800b736:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b738:	4606      	mov	r6, r0
 800b73a:	460f      	mov	r7, r1
 800b73c:	4614      	mov	r4, r2
 800b73e:	18d5      	adds	r5, r2, r3
 800b740:	42ac      	cmp	r4, r5
 800b742:	d101      	bne.n	800b748 <__sfputs_r+0x12>
 800b744:	2000      	movs	r0, #0
 800b746:	e007      	b.n	800b758 <__sfputs_r+0x22>
 800b748:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b74c:	463a      	mov	r2, r7
 800b74e:	4630      	mov	r0, r6
 800b750:	f7ff ffda 	bl	800b708 <__sfputc_r>
 800b754:	1c43      	adds	r3, r0, #1
 800b756:	d1f3      	bne.n	800b740 <__sfputs_r+0xa>
 800b758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b75c <_vfiprintf_r>:
 800b75c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b760:	460d      	mov	r5, r1
 800b762:	b09d      	sub	sp, #116	; 0x74
 800b764:	4614      	mov	r4, r2
 800b766:	4698      	mov	r8, r3
 800b768:	4606      	mov	r6, r0
 800b76a:	b118      	cbz	r0, 800b774 <_vfiprintf_r+0x18>
 800b76c:	6983      	ldr	r3, [r0, #24]
 800b76e:	b90b      	cbnz	r3, 800b774 <_vfiprintf_r+0x18>
 800b770:	f7ff fd4a 	bl	800b208 <__sinit>
 800b774:	4b89      	ldr	r3, [pc, #548]	; (800b99c <_vfiprintf_r+0x240>)
 800b776:	429d      	cmp	r5, r3
 800b778:	d11b      	bne.n	800b7b2 <_vfiprintf_r+0x56>
 800b77a:	6875      	ldr	r5, [r6, #4]
 800b77c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b77e:	07d9      	lsls	r1, r3, #31
 800b780:	d405      	bmi.n	800b78e <_vfiprintf_r+0x32>
 800b782:	89ab      	ldrh	r3, [r5, #12]
 800b784:	059a      	lsls	r2, r3, #22
 800b786:	d402      	bmi.n	800b78e <_vfiprintf_r+0x32>
 800b788:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b78a:	f7ff fddb 	bl	800b344 <__retarget_lock_acquire_recursive>
 800b78e:	89ab      	ldrh	r3, [r5, #12]
 800b790:	071b      	lsls	r3, r3, #28
 800b792:	d501      	bpl.n	800b798 <_vfiprintf_r+0x3c>
 800b794:	692b      	ldr	r3, [r5, #16]
 800b796:	b9eb      	cbnz	r3, 800b7d4 <_vfiprintf_r+0x78>
 800b798:	4629      	mov	r1, r5
 800b79a:	4630      	mov	r0, r6
 800b79c:	f7ff fb9c 	bl	800aed8 <__swsetup_r>
 800b7a0:	b1c0      	cbz	r0, 800b7d4 <_vfiprintf_r+0x78>
 800b7a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7a4:	07dc      	lsls	r4, r3, #31
 800b7a6:	d50e      	bpl.n	800b7c6 <_vfiprintf_r+0x6a>
 800b7a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b7ac:	b01d      	add	sp, #116	; 0x74
 800b7ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7b2:	4b7b      	ldr	r3, [pc, #492]	; (800b9a0 <_vfiprintf_r+0x244>)
 800b7b4:	429d      	cmp	r5, r3
 800b7b6:	d101      	bne.n	800b7bc <_vfiprintf_r+0x60>
 800b7b8:	68b5      	ldr	r5, [r6, #8]
 800b7ba:	e7df      	b.n	800b77c <_vfiprintf_r+0x20>
 800b7bc:	4b79      	ldr	r3, [pc, #484]	; (800b9a4 <_vfiprintf_r+0x248>)
 800b7be:	429d      	cmp	r5, r3
 800b7c0:	bf08      	it	eq
 800b7c2:	68f5      	ldreq	r5, [r6, #12]
 800b7c4:	e7da      	b.n	800b77c <_vfiprintf_r+0x20>
 800b7c6:	89ab      	ldrh	r3, [r5, #12]
 800b7c8:	0598      	lsls	r0, r3, #22
 800b7ca:	d4ed      	bmi.n	800b7a8 <_vfiprintf_r+0x4c>
 800b7cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b7ce:	f7ff fdba 	bl	800b346 <__retarget_lock_release_recursive>
 800b7d2:	e7e9      	b.n	800b7a8 <_vfiprintf_r+0x4c>
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	9309      	str	r3, [sp, #36]	; 0x24
 800b7d8:	2320      	movs	r3, #32
 800b7da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b7de:	f8cd 800c 	str.w	r8, [sp, #12]
 800b7e2:	2330      	movs	r3, #48	; 0x30
 800b7e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b9a8 <_vfiprintf_r+0x24c>
 800b7e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b7ec:	f04f 0901 	mov.w	r9, #1
 800b7f0:	4623      	mov	r3, r4
 800b7f2:	469a      	mov	sl, r3
 800b7f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7f8:	b10a      	cbz	r2, 800b7fe <_vfiprintf_r+0xa2>
 800b7fa:	2a25      	cmp	r2, #37	; 0x25
 800b7fc:	d1f9      	bne.n	800b7f2 <_vfiprintf_r+0x96>
 800b7fe:	ebba 0b04 	subs.w	fp, sl, r4
 800b802:	d00b      	beq.n	800b81c <_vfiprintf_r+0xc0>
 800b804:	465b      	mov	r3, fp
 800b806:	4622      	mov	r2, r4
 800b808:	4629      	mov	r1, r5
 800b80a:	4630      	mov	r0, r6
 800b80c:	f7ff ff93 	bl	800b736 <__sfputs_r>
 800b810:	3001      	adds	r0, #1
 800b812:	f000 80aa 	beq.w	800b96a <_vfiprintf_r+0x20e>
 800b816:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b818:	445a      	add	r2, fp
 800b81a:	9209      	str	r2, [sp, #36]	; 0x24
 800b81c:	f89a 3000 	ldrb.w	r3, [sl]
 800b820:	2b00      	cmp	r3, #0
 800b822:	f000 80a2 	beq.w	800b96a <_vfiprintf_r+0x20e>
 800b826:	2300      	movs	r3, #0
 800b828:	f04f 32ff 	mov.w	r2, #4294967295
 800b82c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b830:	f10a 0a01 	add.w	sl, sl, #1
 800b834:	9304      	str	r3, [sp, #16]
 800b836:	9307      	str	r3, [sp, #28]
 800b838:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b83c:	931a      	str	r3, [sp, #104]	; 0x68
 800b83e:	4654      	mov	r4, sl
 800b840:	2205      	movs	r2, #5
 800b842:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b846:	4858      	ldr	r0, [pc, #352]	; (800b9a8 <_vfiprintf_r+0x24c>)
 800b848:	f7f4 fcf2 	bl	8000230 <memchr>
 800b84c:	9a04      	ldr	r2, [sp, #16]
 800b84e:	b9d8      	cbnz	r0, 800b888 <_vfiprintf_r+0x12c>
 800b850:	06d1      	lsls	r1, r2, #27
 800b852:	bf44      	itt	mi
 800b854:	2320      	movmi	r3, #32
 800b856:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b85a:	0713      	lsls	r3, r2, #28
 800b85c:	bf44      	itt	mi
 800b85e:	232b      	movmi	r3, #43	; 0x2b
 800b860:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b864:	f89a 3000 	ldrb.w	r3, [sl]
 800b868:	2b2a      	cmp	r3, #42	; 0x2a
 800b86a:	d015      	beq.n	800b898 <_vfiprintf_r+0x13c>
 800b86c:	9a07      	ldr	r2, [sp, #28]
 800b86e:	4654      	mov	r4, sl
 800b870:	2000      	movs	r0, #0
 800b872:	f04f 0c0a 	mov.w	ip, #10
 800b876:	4621      	mov	r1, r4
 800b878:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b87c:	3b30      	subs	r3, #48	; 0x30
 800b87e:	2b09      	cmp	r3, #9
 800b880:	d94e      	bls.n	800b920 <_vfiprintf_r+0x1c4>
 800b882:	b1b0      	cbz	r0, 800b8b2 <_vfiprintf_r+0x156>
 800b884:	9207      	str	r2, [sp, #28]
 800b886:	e014      	b.n	800b8b2 <_vfiprintf_r+0x156>
 800b888:	eba0 0308 	sub.w	r3, r0, r8
 800b88c:	fa09 f303 	lsl.w	r3, r9, r3
 800b890:	4313      	orrs	r3, r2
 800b892:	9304      	str	r3, [sp, #16]
 800b894:	46a2      	mov	sl, r4
 800b896:	e7d2      	b.n	800b83e <_vfiprintf_r+0xe2>
 800b898:	9b03      	ldr	r3, [sp, #12]
 800b89a:	1d19      	adds	r1, r3, #4
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	9103      	str	r1, [sp, #12]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	bfbb      	ittet	lt
 800b8a4:	425b      	neglt	r3, r3
 800b8a6:	f042 0202 	orrlt.w	r2, r2, #2
 800b8aa:	9307      	strge	r3, [sp, #28]
 800b8ac:	9307      	strlt	r3, [sp, #28]
 800b8ae:	bfb8      	it	lt
 800b8b0:	9204      	strlt	r2, [sp, #16]
 800b8b2:	7823      	ldrb	r3, [r4, #0]
 800b8b4:	2b2e      	cmp	r3, #46	; 0x2e
 800b8b6:	d10c      	bne.n	800b8d2 <_vfiprintf_r+0x176>
 800b8b8:	7863      	ldrb	r3, [r4, #1]
 800b8ba:	2b2a      	cmp	r3, #42	; 0x2a
 800b8bc:	d135      	bne.n	800b92a <_vfiprintf_r+0x1ce>
 800b8be:	9b03      	ldr	r3, [sp, #12]
 800b8c0:	1d1a      	adds	r2, r3, #4
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	9203      	str	r2, [sp, #12]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	bfb8      	it	lt
 800b8ca:	f04f 33ff 	movlt.w	r3, #4294967295
 800b8ce:	3402      	adds	r4, #2
 800b8d0:	9305      	str	r3, [sp, #20]
 800b8d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b9b8 <_vfiprintf_r+0x25c>
 800b8d6:	7821      	ldrb	r1, [r4, #0]
 800b8d8:	2203      	movs	r2, #3
 800b8da:	4650      	mov	r0, sl
 800b8dc:	f7f4 fca8 	bl	8000230 <memchr>
 800b8e0:	b140      	cbz	r0, 800b8f4 <_vfiprintf_r+0x198>
 800b8e2:	2340      	movs	r3, #64	; 0x40
 800b8e4:	eba0 000a 	sub.w	r0, r0, sl
 800b8e8:	fa03 f000 	lsl.w	r0, r3, r0
 800b8ec:	9b04      	ldr	r3, [sp, #16]
 800b8ee:	4303      	orrs	r3, r0
 800b8f0:	3401      	adds	r4, #1
 800b8f2:	9304      	str	r3, [sp, #16]
 800b8f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8f8:	482c      	ldr	r0, [pc, #176]	; (800b9ac <_vfiprintf_r+0x250>)
 800b8fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b8fe:	2206      	movs	r2, #6
 800b900:	f7f4 fc96 	bl	8000230 <memchr>
 800b904:	2800      	cmp	r0, #0
 800b906:	d03f      	beq.n	800b988 <_vfiprintf_r+0x22c>
 800b908:	4b29      	ldr	r3, [pc, #164]	; (800b9b0 <_vfiprintf_r+0x254>)
 800b90a:	bb1b      	cbnz	r3, 800b954 <_vfiprintf_r+0x1f8>
 800b90c:	9b03      	ldr	r3, [sp, #12]
 800b90e:	3307      	adds	r3, #7
 800b910:	f023 0307 	bic.w	r3, r3, #7
 800b914:	3308      	adds	r3, #8
 800b916:	9303      	str	r3, [sp, #12]
 800b918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b91a:	443b      	add	r3, r7
 800b91c:	9309      	str	r3, [sp, #36]	; 0x24
 800b91e:	e767      	b.n	800b7f0 <_vfiprintf_r+0x94>
 800b920:	fb0c 3202 	mla	r2, ip, r2, r3
 800b924:	460c      	mov	r4, r1
 800b926:	2001      	movs	r0, #1
 800b928:	e7a5      	b.n	800b876 <_vfiprintf_r+0x11a>
 800b92a:	2300      	movs	r3, #0
 800b92c:	3401      	adds	r4, #1
 800b92e:	9305      	str	r3, [sp, #20]
 800b930:	4619      	mov	r1, r3
 800b932:	f04f 0c0a 	mov.w	ip, #10
 800b936:	4620      	mov	r0, r4
 800b938:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b93c:	3a30      	subs	r2, #48	; 0x30
 800b93e:	2a09      	cmp	r2, #9
 800b940:	d903      	bls.n	800b94a <_vfiprintf_r+0x1ee>
 800b942:	2b00      	cmp	r3, #0
 800b944:	d0c5      	beq.n	800b8d2 <_vfiprintf_r+0x176>
 800b946:	9105      	str	r1, [sp, #20]
 800b948:	e7c3      	b.n	800b8d2 <_vfiprintf_r+0x176>
 800b94a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b94e:	4604      	mov	r4, r0
 800b950:	2301      	movs	r3, #1
 800b952:	e7f0      	b.n	800b936 <_vfiprintf_r+0x1da>
 800b954:	ab03      	add	r3, sp, #12
 800b956:	9300      	str	r3, [sp, #0]
 800b958:	462a      	mov	r2, r5
 800b95a:	4b16      	ldr	r3, [pc, #88]	; (800b9b4 <_vfiprintf_r+0x258>)
 800b95c:	a904      	add	r1, sp, #16
 800b95e:	4630      	mov	r0, r6
 800b960:	f3af 8000 	nop.w
 800b964:	4607      	mov	r7, r0
 800b966:	1c78      	adds	r0, r7, #1
 800b968:	d1d6      	bne.n	800b918 <_vfiprintf_r+0x1bc>
 800b96a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b96c:	07d9      	lsls	r1, r3, #31
 800b96e:	d405      	bmi.n	800b97c <_vfiprintf_r+0x220>
 800b970:	89ab      	ldrh	r3, [r5, #12]
 800b972:	059a      	lsls	r2, r3, #22
 800b974:	d402      	bmi.n	800b97c <_vfiprintf_r+0x220>
 800b976:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b978:	f7ff fce5 	bl	800b346 <__retarget_lock_release_recursive>
 800b97c:	89ab      	ldrh	r3, [r5, #12]
 800b97e:	065b      	lsls	r3, r3, #25
 800b980:	f53f af12 	bmi.w	800b7a8 <_vfiprintf_r+0x4c>
 800b984:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b986:	e711      	b.n	800b7ac <_vfiprintf_r+0x50>
 800b988:	ab03      	add	r3, sp, #12
 800b98a:	9300      	str	r3, [sp, #0]
 800b98c:	462a      	mov	r2, r5
 800b98e:	4b09      	ldr	r3, [pc, #36]	; (800b9b4 <_vfiprintf_r+0x258>)
 800b990:	a904      	add	r1, sp, #16
 800b992:	4630      	mov	r0, r6
 800b994:	f000 f880 	bl	800ba98 <_printf_i>
 800b998:	e7e4      	b.n	800b964 <_vfiprintf_r+0x208>
 800b99a:	bf00      	nop
 800b99c:	0800c46c 	.word	0x0800c46c
 800b9a0:	0800c48c 	.word	0x0800c48c
 800b9a4:	0800c44c 	.word	0x0800c44c
 800b9a8:	0800c4ac 	.word	0x0800c4ac
 800b9ac:	0800c4b6 	.word	0x0800c4b6
 800b9b0:	00000000 	.word	0x00000000
 800b9b4:	0800b737 	.word	0x0800b737
 800b9b8:	0800c4b2 	.word	0x0800c4b2

0800b9bc <_printf_common>:
 800b9bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9c0:	4616      	mov	r6, r2
 800b9c2:	4699      	mov	r9, r3
 800b9c4:	688a      	ldr	r2, [r1, #8]
 800b9c6:	690b      	ldr	r3, [r1, #16]
 800b9c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	bfb8      	it	lt
 800b9d0:	4613      	movlt	r3, r2
 800b9d2:	6033      	str	r3, [r6, #0]
 800b9d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b9d8:	4607      	mov	r7, r0
 800b9da:	460c      	mov	r4, r1
 800b9dc:	b10a      	cbz	r2, 800b9e2 <_printf_common+0x26>
 800b9de:	3301      	adds	r3, #1
 800b9e0:	6033      	str	r3, [r6, #0]
 800b9e2:	6823      	ldr	r3, [r4, #0]
 800b9e4:	0699      	lsls	r1, r3, #26
 800b9e6:	bf42      	ittt	mi
 800b9e8:	6833      	ldrmi	r3, [r6, #0]
 800b9ea:	3302      	addmi	r3, #2
 800b9ec:	6033      	strmi	r3, [r6, #0]
 800b9ee:	6825      	ldr	r5, [r4, #0]
 800b9f0:	f015 0506 	ands.w	r5, r5, #6
 800b9f4:	d106      	bne.n	800ba04 <_printf_common+0x48>
 800b9f6:	f104 0a19 	add.w	sl, r4, #25
 800b9fa:	68e3      	ldr	r3, [r4, #12]
 800b9fc:	6832      	ldr	r2, [r6, #0]
 800b9fe:	1a9b      	subs	r3, r3, r2
 800ba00:	42ab      	cmp	r3, r5
 800ba02:	dc26      	bgt.n	800ba52 <_printf_common+0x96>
 800ba04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ba08:	1e13      	subs	r3, r2, #0
 800ba0a:	6822      	ldr	r2, [r4, #0]
 800ba0c:	bf18      	it	ne
 800ba0e:	2301      	movne	r3, #1
 800ba10:	0692      	lsls	r2, r2, #26
 800ba12:	d42b      	bmi.n	800ba6c <_printf_common+0xb0>
 800ba14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ba18:	4649      	mov	r1, r9
 800ba1a:	4638      	mov	r0, r7
 800ba1c:	47c0      	blx	r8
 800ba1e:	3001      	adds	r0, #1
 800ba20:	d01e      	beq.n	800ba60 <_printf_common+0xa4>
 800ba22:	6823      	ldr	r3, [r4, #0]
 800ba24:	68e5      	ldr	r5, [r4, #12]
 800ba26:	6832      	ldr	r2, [r6, #0]
 800ba28:	f003 0306 	and.w	r3, r3, #6
 800ba2c:	2b04      	cmp	r3, #4
 800ba2e:	bf08      	it	eq
 800ba30:	1aad      	subeq	r5, r5, r2
 800ba32:	68a3      	ldr	r3, [r4, #8]
 800ba34:	6922      	ldr	r2, [r4, #16]
 800ba36:	bf0c      	ite	eq
 800ba38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ba3c:	2500      	movne	r5, #0
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	bfc4      	itt	gt
 800ba42:	1a9b      	subgt	r3, r3, r2
 800ba44:	18ed      	addgt	r5, r5, r3
 800ba46:	2600      	movs	r6, #0
 800ba48:	341a      	adds	r4, #26
 800ba4a:	42b5      	cmp	r5, r6
 800ba4c:	d11a      	bne.n	800ba84 <_printf_common+0xc8>
 800ba4e:	2000      	movs	r0, #0
 800ba50:	e008      	b.n	800ba64 <_printf_common+0xa8>
 800ba52:	2301      	movs	r3, #1
 800ba54:	4652      	mov	r2, sl
 800ba56:	4649      	mov	r1, r9
 800ba58:	4638      	mov	r0, r7
 800ba5a:	47c0      	blx	r8
 800ba5c:	3001      	adds	r0, #1
 800ba5e:	d103      	bne.n	800ba68 <_printf_common+0xac>
 800ba60:	f04f 30ff 	mov.w	r0, #4294967295
 800ba64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba68:	3501      	adds	r5, #1
 800ba6a:	e7c6      	b.n	800b9fa <_printf_common+0x3e>
 800ba6c:	18e1      	adds	r1, r4, r3
 800ba6e:	1c5a      	adds	r2, r3, #1
 800ba70:	2030      	movs	r0, #48	; 0x30
 800ba72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ba76:	4422      	add	r2, r4
 800ba78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ba7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ba80:	3302      	adds	r3, #2
 800ba82:	e7c7      	b.n	800ba14 <_printf_common+0x58>
 800ba84:	2301      	movs	r3, #1
 800ba86:	4622      	mov	r2, r4
 800ba88:	4649      	mov	r1, r9
 800ba8a:	4638      	mov	r0, r7
 800ba8c:	47c0      	blx	r8
 800ba8e:	3001      	adds	r0, #1
 800ba90:	d0e6      	beq.n	800ba60 <_printf_common+0xa4>
 800ba92:	3601      	adds	r6, #1
 800ba94:	e7d9      	b.n	800ba4a <_printf_common+0x8e>
	...

0800ba98 <_printf_i>:
 800ba98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ba9c:	7e0f      	ldrb	r7, [r1, #24]
 800ba9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800baa0:	2f78      	cmp	r7, #120	; 0x78
 800baa2:	4691      	mov	r9, r2
 800baa4:	4680      	mov	r8, r0
 800baa6:	460c      	mov	r4, r1
 800baa8:	469a      	mov	sl, r3
 800baaa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800baae:	d807      	bhi.n	800bac0 <_printf_i+0x28>
 800bab0:	2f62      	cmp	r7, #98	; 0x62
 800bab2:	d80a      	bhi.n	800baca <_printf_i+0x32>
 800bab4:	2f00      	cmp	r7, #0
 800bab6:	f000 80d8 	beq.w	800bc6a <_printf_i+0x1d2>
 800baba:	2f58      	cmp	r7, #88	; 0x58
 800babc:	f000 80a3 	beq.w	800bc06 <_printf_i+0x16e>
 800bac0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bac4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bac8:	e03a      	b.n	800bb40 <_printf_i+0xa8>
 800baca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bace:	2b15      	cmp	r3, #21
 800bad0:	d8f6      	bhi.n	800bac0 <_printf_i+0x28>
 800bad2:	a101      	add	r1, pc, #4	; (adr r1, 800bad8 <_printf_i+0x40>)
 800bad4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bad8:	0800bb31 	.word	0x0800bb31
 800badc:	0800bb45 	.word	0x0800bb45
 800bae0:	0800bac1 	.word	0x0800bac1
 800bae4:	0800bac1 	.word	0x0800bac1
 800bae8:	0800bac1 	.word	0x0800bac1
 800baec:	0800bac1 	.word	0x0800bac1
 800baf0:	0800bb45 	.word	0x0800bb45
 800baf4:	0800bac1 	.word	0x0800bac1
 800baf8:	0800bac1 	.word	0x0800bac1
 800bafc:	0800bac1 	.word	0x0800bac1
 800bb00:	0800bac1 	.word	0x0800bac1
 800bb04:	0800bc51 	.word	0x0800bc51
 800bb08:	0800bb75 	.word	0x0800bb75
 800bb0c:	0800bc33 	.word	0x0800bc33
 800bb10:	0800bac1 	.word	0x0800bac1
 800bb14:	0800bac1 	.word	0x0800bac1
 800bb18:	0800bc73 	.word	0x0800bc73
 800bb1c:	0800bac1 	.word	0x0800bac1
 800bb20:	0800bb75 	.word	0x0800bb75
 800bb24:	0800bac1 	.word	0x0800bac1
 800bb28:	0800bac1 	.word	0x0800bac1
 800bb2c:	0800bc3b 	.word	0x0800bc3b
 800bb30:	682b      	ldr	r3, [r5, #0]
 800bb32:	1d1a      	adds	r2, r3, #4
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	602a      	str	r2, [r5, #0]
 800bb38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bb40:	2301      	movs	r3, #1
 800bb42:	e0a3      	b.n	800bc8c <_printf_i+0x1f4>
 800bb44:	6820      	ldr	r0, [r4, #0]
 800bb46:	6829      	ldr	r1, [r5, #0]
 800bb48:	0606      	lsls	r6, r0, #24
 800bb4a:	f101 0304 	add.w	r3, r1, #4
 800bb4e:	d50a      	bpl.n	800bb66 <_printf_i+0xce>
 800bb50:	680e      	ldr	r6, [r1, #0]
 800bb52:	602b      	str	r3, [r5, #0]
 800bb54:	2e00      	cmp	r6, #0
 800bb56:	da03      	bge.n	800bb60 <_printf_i+0xc8>
 800bb58:	232d      	movs	r3, #45	; 0x2d
 800bb5a:	4276      	negs	r6, r6
 800bb5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb60:	485e      	ldr	r0, [pc, #376]	; (800bcdc <_printf_i+0x244>)
 800bb62:	230a      	movs	r3, #10
 800bb64:	e019      	b.n	800bb9a <_printf_i+0x102>
 800bb66:	680e      	ldr	r6, [r1, #0]
 800bb68:	602b      	str	r3, [r5, #0]
 800bb6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bb6e:	bf18      	it	ne
 800bb70:	b236      	sxthne	r6, r6
 800bb72:	e7ef      	b.n	800bb54 <_printf_i+0xbc>
 800bb74:	682b      	ldr	r3, [r5, #0]
 800bb76:	6820      	ldr	r0, [r4, #0]
 800bb78:	1d19      	adds	r1, r3, #4
 800bb7a:	6029      	str	r1, [r5, #0]
 800bb7c:	0601      	lsls	r1, r0, #24
 800bb7e:	d501      	bpl.n	800bb84 <_printf_i+0xec>
 800bb80:	681e      	ldr	r6, [r3, #0]
 800bb82:	e002      	b.n	800bb8a <_printf_i+0xf2>
 800bb84:	0646      	lsls	r6, r0, #25
 800bb86:	d5fb      	bpl.n	800bb80 <_printf_i+0xe8>
 800bb88:	881e      	ldrh	r6, [r3, #0]
 800bb8a:	4854      	ldr	r0, [pc, #336]	; (800bcdc <_printf_i+0x244>)
 800bb8c:	2f6f      	cmp	r7, #111	; 0x6f
 800bb8e:	bf0c      	ite	eq
 800bb90:	2308      	moveq	r3, #8
 800bb92:	230a      	movne	r3, #10
 800bb94:	2100      	movs	r1, #0
 800bb96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bb9a:	6865      	ldr	r5, [r4, #4]
 800bb9c:	60a5      	str	r5, [r4, #8]
 800bb9e:	2d00      	cmp	r5, #0
 800bba0:	bfa2      	ittt	ge
 800bba2:	6821      	ldrge	r1, [r4, #0]
 800bba4:	f021 0104 	bicge.w	r1, r1, #4
 800bba8:	6021      	strge	r1, [r4, #0]
 800bbaa:	b90e      	cbnz	r6, 800bbb0 <_printf_i+0x118>
 800bbac:	2d00      	cmp	r5, #0
 800bbae:	d04d      	beq.n	800bc4c <_printf_i+0x1b4>
 800bbb0:	4615      	mov	r5, r2
 800bbb2:	fbb6 f1f3 	udiv	r1, r6, r3
 800bbb6:	fb03 6711 	mls	r7, r3, r1, r6
 800bbba:	5dc7      	ldrb	r7, [r0, r7]
 800bbbc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bbc0:	4637      	mov	r7, r6
 800bbc2:	42bb      	cmp	r3, r7
 800bbc4:	460e      	mov	r6, r1
 800bbc6:	d9f4      	bls.n	800bbb2 <_printf_i+0x11a>
 800bbc8:	2b08      	cmp	r3, #8
 800bbca:	d10b      	bne.n	800bbe4 <_printf_i+0x14c>
 800bbcc:	6823      	ldr	r3, [r4, #0]
 800bbce:	07de      	lsls	r6, r3, #31
 800bbd0:	d508      	bpl.n	800bbe4 <_printf_i+0x14c>
 800bbd2:	6923      	ldr	r3, [r4, #16]
 800bbd4:	6861      	ldr	r1, [r4, #4]
 800bbd6:	4299      	cmp	r1, r3
 800bbd8:	bfde      	ittt	le
 800bbda:	2330      	movle	r3, #48	; 0x30
 800bbdc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bbe0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bbe4:	1b52      	subs	r2, r2, r5
 800bbe6:	6122      	str	r2, [r4, #16]
 800bbe8:	f8cd a000 	str.w	sl, [sp]
 800bbec:	464b      	mov	r3, r9
 800bbee:	aa03      	add	r2, sp, #12
 800bbf0:	4621      	mov	r1, r4
 800bbf2:	4640      	mov	r0, r8
 800bbf4:	f7ff fee2 	bl	800b9bc <_printf_common>
 800bbf8:	3001      	adds	r0, #1
 800bbfa:	d14c      	bne.n	800bc96 <_printf_i+0x1fe>
 800bbfc:	f04f 30ff 	mov.w	r0, #4294967295
 800bc00:	b004      	add	sp, #16
 800bc02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc06:	4835      	ldr	r0, [pc, #212]	; (800bcdc <_printf_i+0x244>)
 800bc08:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bc0c:	6829      	ldr	r1, [r5, #0]
 800bc0e:	6823      	ldr	r3, [r4, #0]
 800bc10:	f851 6b04 	ldr.w	r6, [r1], #4
 800bc14:	6029      	str	r1, [r5, #0]
 800bc16:	061d      	lsls	r5, r3, #24
 800bc18:	d514      	bpl.n	800bc44 <_printf_i+0x1ac>
 800bc1a:	07df      	lsls	r7, r3, #31
 800bc1c:	bf44      	itt	mi
 800bc1e:	f043 0320 	orrmi.w	r3, r3, #32
 800bc22:	6023      	strmi	r3, [r4, #0]
 800bc24:	b91e      	cbnz	r6, 800bc2e <_printf_i+0x196>
 800bc26:	6823      	ldr	r3, [r4, #0]
 800bc28:	f023 0320 	bic.w	r3, r3, #32
 800bc2c:	6023      	str	r3, [r4, #0]
 800bc2e:	2310      	movs	r3, #16
 800bc30:	e7b0      	b.n	800bb94 <_printf_i+0xfc>
 800bc32:	6823      	ldr	r3, [r4, #0]
 800bc34:	f043 0320 	orr.w	r3, r3, #32
 800bc38:	6023      	str	r3, [r4, #0]
 800bc3a:	2378      	movs	r3, #120	; 0x78
 800bc3c:	4828      	ldr	r0, [pc, #160]	; (800bce0 <_printf_i+0x248>)
 800bc3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bc42:	e7e3      	b.n	800bc0c <_printf_i+0x174>
 800bc44:	0659      	lsls	r1, r3, #25
 800bc46:	bf48      	it	mi
 800bc48:	b2b6      	uxthmi	r6, r6
 800bc4a:	e7e6      	b.n	800bc1a <_printf_i+0x182>
 800bc4c:	4615      	mov	r5, r2
 800bc4e:	e7bb      	b.n	800bbc8 <_printf_i+0x130>
 800bc50:	682b      	ldr	r3, [r5, #0]
 800bc52:	6826      	ldr	r6, [r4, #0]
 800bc54:	6961      	ldr	r1, [r4, #20]
 800bc56:	1d18      	adds	r0, r3, #4
 800bc58:	6028      	str	r0, [r5, #0]
 800bc5a:	0635      	lsls	r5, r6, #24
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	d501      	bpl.n	800bc64 <_printf_i+0x1cc>
 800bc60:	6019      	str	r1, [r3, #0]
 800bc62:	e002      	b.n	800bc6a <_printf_i+0x1d2>
 800bc64:	0670      	lsls	r0, r6, #25
 800bc66:	d5fb      	bpl.n	800bc60 <_printf_i+0x1c8>
 800bc68:	8019      	strh	r1, [r3, #0]
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	6123      	str	r3, [r4, #16]
 800bc6e:	4615      	mov	r5, r2
 800bc70:	e7ba      	b.n	800bbe8 <_printf_i+0x150>
 800bc72:	682b      	ldr	r3, [r5, #0]
 800bc74:	1d1a      	adds	r2, r3, #4
 800bc76:	602a      	str	r2, [r5, #0]
 800bc78:	681d      	ldr	r5, [r3, #0]
 800bc7a:	6862      	ldr	r2, [r4, #4]
 800bc7c:	2100      	movs	r1, #0
 800bc7e:	4628      	mov	r0, r5
 800bc80:	f7f4 fad6 	bl	8000230 <memchr>
 800bc84:	b108      	cbz	r0, 800bc8a <_printf_i+0x1f2>
 800bc86:	1b40      	subs	r0, r0, r5
 800bc88:	6060      	str	r0, [r4, #4]
 800bc8a:	6863      	ldr	r3, [r4, #4]
 800bc8c:	6123      	str	r3, [r4, #16]
 800bc8e:	2300      	movs	r3, #0
 800bc90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc94:	e7a8      	b.n	800bbe8 <_printf_i+0x150>
 800bc96:	6923      	ldr	r3, [r4, #16]
 800bc98:	462a      	mov	r2, r5
 800bc9a:	4649      	mov	r1, r9
 800bc9c:	4640      	mov	r0, r8
 800bc9e:	47d0      	blx	sl
 800bca0:	3001      	adds	r0, #1
 800bca2:	d0ab      	beq.n	800bbfc <_printf_i+0x164>
 800bca4:	6823      	ldr	r3, [r4, #0]
 800bca6:	079b      	lsls	r3, r3, #30
 800bca8:	d413      	bmi.n	800bcd2 <_printf_i+0x23a>
 800bcaa:	68e0      	ldr	r0, [r4, #12]
 800bcac:	9b03      	ldr	r3, [sp, #12]
 800bcae:	4298      	cmp	r0, r3
 800bcb0:	bfb8      	it	lt
 800bcb2:	4618      	movlt	r0, r3
 800bcb4:	e7a4      	b.n	800bc00 <_printf_i+0x168>
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	4632      	mov	r2, r6
 800bcba:	4649      	mov	r1, r9
 800bcbc:	4640      	mov	r0, r8
 800bcbe:	47d0      	blx	sl
 800bcc0:	3001      	adds	r0, #1
 800bcc2:	d09b      	beq.n	800bbfc <_printf_i+0x164>
 800bcc4:	3501      	adds	r5, #1
 800bcc6:	68e3      	ldr	r3, [r4, #12]
 800bcc8:	9903      	ldr	r1, [sp, #12]
 800bcca:	1a5b      	subs	r3, r3, r1
 800bccc:	42ab      	cmp	r3, r5
 800bcce:	dcf2      	bgt.n	800bcb6 <_printf_i+0x21e>
 800bcd0:	e7eb      	b.n	800bcaa <_printf_i+0x212>
 800bcd2:	2500      	movs	r5, #0
 800bcd4:	f104 0619 	add.w	r6, r4, #25
 800bcd8:	e7f5      	b.n	800bcc6 <_printf_i+0x22e>
 800bcda:	bf00      	nop
 800bcdc:	0800c4bd 	.word	0x0800c4bd
 800bce0:	0800c4ce 	.word	0x0800c4ce

0800bce4 <_read_r>:
 800bce4:	b538      	push	{r3, r4, r5, lr}
 800bce6:	4d07      	ldr	r5, [pc, #28]	; (800bd04 <_read_r+0x20>)
 800bce8:	4604      	mov	r4, r0
 800bcea:	4608      	mov	r0, r1
 800bcec:	4611      	mov	r1, r2
 800bcee:	2200      	movs	r2, #0
 800bcf0:	602a      	str	r2, [r5, #0]
 800bcf2:	461a      	mov	r2, r3
 800bcf4:	f7f5 ff88 	bl	8001c08 <_read>
 800bcf8:	1c43      	adds	r3, r0, #1
 800bcfa:	d102      	bne.n	800bd02 <_read_r+0x1e>
 800bcfc:	682b      	ldr	r3, [r5, #0]
 800bcfe:	b103      	cbz	r3, 800bd02 <_read_r+0x1e>
 800bd00:	6023      	str	r3, [r4, #0]
 800bd02:	bd38      	pop	{r3, r4, r5, pc}
 800bd04:	20001af0 	.word	0x20001af0

0800bd08 <abort>:
 800bd08:	b508      	push	{r3, lr}
 800bd0a:	2006      	movs	r0, #6
 800bd0c:	f000 f898 	bl	800be40 <raise>
 800bd10:	2001      	movs	r0, #1
 800bd12:	f7f5 ff6f 	bl	8001bf4 <_exit>
	...

0800bd18 <_fstat_r>:
 800bd18:	b538      	push	{r3, r4, r5, lr}
 800bd1a:	4d07      	ldr	r5, [pc, #28]	; (800bd38 <_fstat_r+0x20>)
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	4604      	mov	r4, r0
 800bd20:	4608      	mov	r0, r1
 800bd22:	4611      	mov	r1, r2
 800bd24:	602b      	str	r3, [r5, #0]
 800bd26:	f7f5 ff98 	bl	8001c5a <_fstat>
 800bd2a:	1c43      	adds	r3, r0, #1
 800bd2c:	d102      	bne.n	800bd34 <_fstat_r+0x1c>
 800bd2e:	682b      	ldr	r3, [r5, #0]
 800bd30:	b103      	cbz	r3, 800bd34 <_fstat_r+0x1c>
 800bd32:	6023      	str	r3, [r4, #0]
 800bd34:	bd38      	pop	{r3, r4, r5, pc}
 800bd36:	bf00      	nop
 800bd38:	20001af0 	.word	0x20001af0

0800bd3c <_isatty_r>:
 800bd3c:	b538      	push	{r3, r4, r5, lr}
 800bd3e:	4d06      	ldr	r5, [pc, #24]	; (800bd58 <_isatty_r+0x1c>)
 800bd40:	2300      	movs	r3, #0
 800bd42:	4604      	mov	r4, r0
 800bd44:	4608      	mov	r0, r1
 800bd46:	602b      	str	r3, [r5, #0]
 800bd48:	f7f5 ff97 	bl	8001c7a <_isatty>
 800bd4c:	1c43      	adds	r3, r0, #1
 800bd4e:	d102      	bne.n	800bd56 <_isatty_r+0x1a>
 800bd50:	682b      	ldr	r3, [r5, #0]
 800bd52:	b103      	cbz	r3, 800bd56 <_isatty_r+0x1a>
 800bd54:	6023      	str	r3, [r4, #0]
 800bd56:	bd38      	pop	{r3, r4, r5, pc}
 800bd58:	20001af0 	.word	0x20001af0

0800bd5c <memmove>:
 800bd5c:	4288      	cmp	r0, r1
 800bd5e:	b510      	push	{r4, lr}
 800bd60:	eb01 0402 	add.w	r4, r1, r2
 800bd64:	d902      	bls.n	800bd6c <memmove+0x10>
 800bd66:	4284      	cmp	r4, r0
 800bd68:	4623      	mov	r3, r4
 800bd6a:	d807      	bhi.n	800bd7c <memmove+0x20>
 800bd6c:	1e43      	subs	r3, r0, #1
 800bd6e:	42a1      	cmp	r1, r4
 800bd70:	d008      	beq.n	800bd84 <memmove+0x28>
 800bd72:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd76:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd7a:	e7f8      	b.n	800bd6e <memmove+0x12>
 800bd7c:	4402      	add	r2, r0
 800bd7e:	4601      	mov	r1, r0
 800bd80:	428a      	cmp	r2, r1
 800bd82:	d100      	bne.n	800bd86 <memmove+0x2a>
 800bd84:	bd10      	pop	{r4, pc}
 800bd86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bd8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bd8e:	e7f7      	b.n	800bd80 <memmove+0x24>

0800bd90 <_realloc_r>:
 800bd90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd94:	4680      	mov	r8, r0
 800bd96:	4614      	mov	r4, r2
 800bd98:	460e      	mov	r6, r1
 800bd9a:	b921      	cbnz	r1, 800bda6 <_realloc_r+0x16>
 800bd9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bda0:	4611      	mov	r1, r2
 800bda2:	f7fe be83 	b.w	800aaac <_malloc_r>
 800bda6:	b92a      	cbnz	r2, 800bdb4 <_realloc_r+0x24>
 800bda8:	f7fe fe14 	bl	800a9d4 <_free_r>
 800bdac:	4625      	mov	r5, r4
 800bdae:	4628      	mov	r0, r5
 800bdb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdb4:	f000 f860 	bl	800be78 <_malloc_usable_size_r>
 800bdb8:	4284      	cmp	r4, r0
 800bdba:	4607      	mov	r7, r0
 800bdbc:	d802      	bhi.n	800bdc4 <_realloc_r+0x34>
 800bdbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bdc2:	d812      	bhi.n	800bdea <_realloc_r+0x5a>
 800bdc4:	4621      	mov	r1, r4
 800bdc6:	4640      	mov	r0, r8
 800bdc8:	f7fe fe70 	bl	800aaac <_malloc_r>
 800bdcc:	4605      	mov	r5, r0
 800bdce:	2800      	cmp	r0, #0
 800bdd0:	d0ed      	beq.n	800bdae <_realloc_r+0x1e>
 800bdd2:	42bc      	cmp	r4, r7
 800bdd4:	4622      	mov	r2, r4
 800bdd6:	4631      	mov	r1, r6
 800bdd8:	bf28      	it	cs
 800bdda:	463a      	movcs	r2, r7
 800bddc:	f7fe fde4 	bl	800a9a8 <memcpy>
 800bde0:	4631      	mov	r1, r6
 800bde2:	4640      	mov	r0, r8
 800bde4:	f7fe fdf6 	bl	800a9d4 <_free_r>
 800bde8:	e7e1      	b.n	800bdae <_realloc_r+0x1e>
 800bdea:	4635      	mov	r5, r6
 800bdec:	e7df      	b.n	800bdae <_realloc_r+0x1e>

0800bdee <_raise_r>:
 800bdee:	291f      	cmp	r1, #31
 800bdf0:	b538      	push	{r3, r4, r5, lr}
 800bdf2:	4604      	mov	r4, r0
 800bdf4:	460d      	mov	r5, r1
 800bdf6:	d904      	bls.n	800be02 <_raise_r+0x14>
 800bdf8:	2316      	movs	r3, #22
 800bdfa:	6003      	str	r3, [r0, #0]
 800bdfc:	f04f 30ff 	mov.w	r0, #4294967295
 800be00:	bd38      	pop	{r3, r4, r5, pc}
 800be02:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800be04:	b112      	cbz	r2, 800be0c <_raise_r+0x1e>
 800be06:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be0a:	b94b      	cbnz	r3, 800be20 <_raise_r+0x32>
 800be0c:	4620      	mov	r0, r4
 800be0e:	f000 f831 	bl	800be74 <_getpid_r>
 800be12:	462a      	mov	r2, r5
 800be14:	4601      	mov	r1, r0
 800be16:	4620      	mov	r0, r4
 800be18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be1c:	f000 b818 	b.w	800be50 <_kill_r>
 800be20:	2b01      	cmp	r3, #1
 800be22:	d00a      	beq.n	800be3a <_raise_r+0x4c>
 800be24:	1c59      	adds	r1, r3, #1
 800be26:	d103      	bne.n	800be30 <_raise_r+0x42>
 800be28:	2316      	movs	r3, #22
 800be2a:	6003      	str	r3, [r0, #0]
 800be2c:	2001      	movs	r0, #1
 800be2e:	e7e7      	b.n	800be00 <_raise_r+0x12>
 800be30:	2400      	movs	r4, #0
 800be32:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800be36:	4628      	mov	r0, r5
 800be38:	4798      	blx	r3
 800be3a:	2000      	movs	r0, #0
 800be3c:	e7e0      	b.n	800be00 <_raise_r+0x12>
	...

0800be40 <raise>:
 800be40:	4b02      	ldr	r3, [pc, #8]	; (800be4c <raise+0xc>)
 800be42:	4601      	mov	r1, r0
 800be44:	6818      	ldr	r0, [r3, #0]
 800be46:	f7ff bfd2 	b.w	800bdee <_raise_r>
 800be4a:	bf00      	nop
 800be4c:	200000b4 	.word	0x200000b4

0800be50 <_kill_r>:
 800be50:	b538      	push	{r3, r4, r5, lr}
 800be52:	4d07      	ldr	r5, [pc, #28]	; (800be70 <_kill_r+0x20>)
 800be54:	2300      	movs	r3, #0
 800be56:	4604      	mov	r4, r0
 800be58:	4608      	mov	r0, r1
 800be5a:	4611      	mov	r1, r2
 800be5c:	602b      	str	r3, [r5, #0]
 800be5e:	f7f5 feb9 	bl	8001bd4 <_kill>
 800be62:	1c43      	adds	r3, r0, #1
 800be64:	d102      	bne.n	800be6c <_kill_r+0x1c>
 800be66:	682b      	ldr	r3, [r5, #0]
 800be68:	b103      	cbz	r3, 800be6c <_kill_r+0x1c>
 800be6a:	6023      	str	r3, [r4, #0]
 800be6c:	bd38      	pop	{r3, r4, r5, pc}
 800be6e:	bf00      	nop
 800be70:	20001af0 	.word	0x20001af0

0800be74 <_getpid_r>:
 800be74:	f7f5 bea6 	b.w	8001bc4 <_getpid>

0800be78 <_malloc_usable_size_r>:
 800be78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be7c:	1f18      	subs	r0, r3, #4
 800be7e:	2b00      	cmp	r3, #0
 800be80:	bfbc      	itt	lt
 800be82:	580b      	ldrlt	r3, [r1, r0]
 800be84:	18c0      	addlt	r0, r0, r3
 800be86:	4770      	bx	lr

0800be88 <_init>:
 800be88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be8a:	bf00      	nop
 800be8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be8e:	bc08      	pop	{r3}
 800be90:	469e      	mov	lr, r3
 800be92:	4770      	bx	lr

0800be94 <_fini>:
 800be94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be96:	bf00      	nop
 800be98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be9a:	bc08      	pop	{r3}
 800be9c:	469e      	mov	lr, r3
 800be9e:	4770      	bx	lr
